{"ast":null,"code":"'use client';\n/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, elementAcceptingRef, unstable_useForkRef as useForkRef, unstable_ownerDocument as ownerDocument, unstable_getReactNodeRef as getReactNodeRef } from '@mui/utils';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\"; // Inspired by https://github.com/focus-trap/tabbable\n\nconst candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'].join(',');\n\nfunction getTabIndex(node) {\n  const tabindexAttr = parseInt(node.getAttribute('tabindex') || '', 10);\n\n  if (!Number.isNaN(tabindexAttr)) {\n    return tabindexAttr;\n  } // Browsers do not return `tabIndex` correctly for contentEditable nodes;\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n  //  yet they are still part of the regular tab order; in FF, they get a default\n  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n  //  order, consider their tab index to be 0.\n\n\n  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {\n    return 0;\n  }\n\n  return node.tabIndex;\n}\n\nfunction isNonTabbableRadio(node) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio') {\n    return false;\n  }\n\n  if (!node.name) {\n    return false;\n  }\n\n  const getRadio = selector => node.ownerDocument.querySelector(`input[type=\"radio\"]${selector}`);\n\n  let roving = getRadio(`[name=\"${node.name}\"]:checked`);\n\n  if (!roving) {\n    roving = getRadio(`[name=\"${node.name}\"]`);\n  }\n\n  return roving !== node;\n}\n\nfunction isNodeMatchingSelectorFocusable(node) {\n  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction defaultGetTabbable(root) {\n  const regularTabNodes = [];\n  const orderedTabNodes = [];\n  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {\n    const nodeTabIndex = getTabIndex(node);\n\n    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {\n      return;\n    }\n\n    if (nodeTabIndex === 0) {\n      regularTabNodes.push(node);\n    } else {\n      orderedTabNodes.push({\n        documentOrder: i,\n        tabIndex: nodeTabIndex,\n        node: node\n      });\n    }\n  });\n  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);\n}\n\nfunction defaultIsEnabled() {\n  return true;\n}\n/**\n * Utility component that locks focus inside the component.\n *\n * Demos:\n *\n * - [Focus Trap](https://mui.com/base-ui/react-focus-trap/)\n *\n * API:\n *\n * - [FocusTrap API](https://mui.com/base-ui/react-focus-trap/components-api/#focus-trap)\n */\n\n\nfunction FocusTrap(props) {\n  const {\n    children,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    getTabbable = defaultGetTabbable,\n    isEnabled = defaultIsEnabled,\n    open\n  } = props;\n  const ignoreNextEnforceFocus = React.useRef(false);\n  const sentinelStart = React.useRef(null);\n  const sentinelEnd = React.useRef(null);\n  const nodeToRestore = React.useRef(null);\n  const reactFocusEventTarget = React.useRef(null); // This variable is useful when disableAutoFocus is true.\n  // It waits for the active element to move into the component to activate.\n\n  const activated = React.useRef(false);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(getReactNodeRef(children), rootRef);\n  const lastKeydown = React.useRef(null);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    const doc = ownerDocument(rootRef.current);\n\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', '-1');\n      }\n\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n\n    return () => {\n      // restoreLastFocus()\n      if (!disableRestoreFocus) {\n        // In IE11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE11 have a focus method.\n        // Once IE11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    }; // Missing `disableRestoreFocus` which is fine.\n    // We don't support changing that prop on an open FocusTrap\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    const doc = ownerDocument(rootRef.current);\n\n    const loopFocus = nativeEvent => {\n      lastKeydown.current = nativeEvent;\n\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {\n        return;\n      } // Make sure the next tab starts from the right place.\n      // doc.activeElement refers to the origin.\n\n\n      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n\n        if (sentinelEnd.current) {\n          sentinelEnd.current.focus();\n        }\n      }\n    };\n\n    const contain = () => {\n      const rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n\n      if (rootElement === null) {\n        return;\n      }\n\n      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      } // The focus is already inside\n\n\n      if (rootElement.contains(doc.activeElement)) {\n        return;\n      } // The disableEnforceFocus is set and the focus is outside of the focus trap (and sentinel nodes)\n\n\n      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {\n        return;\n      } // if the focus event is not coming from inside the children's react tree, reset the refs\n\n\n      if (doc.activeElement !== reactFocusEventTarget.current) {\n        reactFocusEventTarget.current = null;\n      } else if (reactFocusEventTarget.current !== null) {\n        return;\n      }\n\n      if (!activated.current) {\n        return;\n      }\n\n      let tabbable = [];\n\n      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {\n        tabbable = getTabbable(rootRef.current);\n      } // one of the sentinel nodes was focused, so move the focus\n      // to the first/last tabbable element inside the focus trap\n\n\n      if (tabbable.length > 0) {\n        const isShiftTab = Boolean(lastKeydown.current?.shiftKey && lastKeydown.current?.key === 'Tab');\n        const focusNext = tabbable[0];\n        const focusPrevious = tabbable[tabbable.length - 1];\n\n        if (typeof focusNext !== 'string' && typeof focusPrevious !== 'string') {\n          if (isShiftTab) {\n            focusPrevious.focus();\n          } else {\n            focusNext.focus();\n          }\n        } // no tabbable elements in the trap focus or the focus was outside of the focus trap\n\n      } else {\n        rootElement.focus();\n      }\n    };\n\n    doc.addEventListener('focusin', contain);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.\n    // for example https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    // Instead, we can look if the active element was restored on the BODY element.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    const interval = setInterval(() => {\n      if (doc.activeElement && doc.activeElement.tagName === 'BODY') {\n        contain();\n      }\n    }, 50);\n    return () => {\n      clearInterval(interval);\n      doc.removeEventListener('focusin', contain);\n      doc.removeEventListener('keydown', loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);\n\n  const onFocus = event => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    const childrenPropsHandler = children.props.onFocus;\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  const handleFocusSentinel = event => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n\n    activated.current = true;\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelStart,\n      \"data-testid\": \"sentinelStart\"\n    }), /*#__PURE__*/React.cloneElement(children, {\n      ref: handleRef,\n      onFocus\n    }), /*#__PURE__*/_jsx(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelEnd,\n      \"data-testid\": \"sentinelEnd\"\n    })]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? FocusTrap.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n\n  /**\n   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the focus trap less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.\n   *\n   * Generally this should never be set to `true` as it makes the focus trap less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the focus trap will not restore focus to previously focused element once\n   * focus trap is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.\n   * For instance, you can provide the \"tabbable\" npm dependency.\n   * @param {HTMLElement} root\n   */\n  getTabbable: PropTypes.func,\n\n  /**\n   * This prop extends the `open` prop.\n   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.\n   * This prop should be memoized.\n   * It can be used to support multiple focus trap mounted at the same time.\n   * @default function defaultIsEnabled(): boolean {\n   *   return true;\n   * }\n   */\n  isEnabled: PropTypes.func,\n\n  /**\n   * If `true`, focus is locked.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  FocusTrap['propTypes' + ''] = exactProp(FocusTrap.propTypes);\n}\n\nexport { FocusTrap };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/FocusTrap/FocusTrap.js"],"names":["React","PropTypes","exactProp","elementAcceptingRef","unstable_useForkRef","useForkRef","unstable_ownerDocument","ownerDocument","unstable_getReactNodeRef","getReactNodeRef","jsx","_jsx","jsxs","_jsxs","candidatesSelector","join","getTabIndex","node","tabindexAttr","parseInt","getAttribute","Number","isNaN","contentEditable","nodeName","tabIndex","isNonTabbableRadio","tagName","type","name","getRadio","selector","querySelector","roving","isNodeMatchingSelectorFocusable","disabled","defaultGetTabbable","root","regularTabNodes","orderedTabNodes","Array","from","querySelectorAll","forEach","i","nodeTabIndex","push","documentOrder","sort","a","b","map","concat","defaultIsEnabled","FocusTrap","props","children","disableAutoFocus","disableEnforceFocus","disableRestoreFocus","getTabbable","isEnabled","open","ignoreNextEnforceFocus","useRef","sentinelStart","sentinelEnd","nodeToRestore","reactFocusEventTarget","activated","rootRef","handleRef","lastKeydown","useEffect","current","doc","contains","activeElement","hasAttribute","process","env","NODE_ENV","console","error","setAttribute","focus","loopFocus","nativeEvent","key","shiftKey","contain","rootElement","hasFocus","tabbable","length","isShiftTab","Boolean","focusNext","focusPrevious","addEventListener","interval","setInterval","clearInterval","removeEventListener","onFocus","event","relatedTarget","target","childrenPropsHandler","handleFocusSentinel","Fragment","ref","cloneElement","propTypes","bool","func","isRequired"],"mappings":"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","sourcesContent":["'use client';\n\n/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, elementAcceptingRef, unstable_useForkRef as useForkRef, unstable_ownerDocument as ownerDocument, unstable_getReactNodeRef as getReactNodeRef } from '@mui/utils';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n// Inspired by https://github.com/focus-trap/tabbable\nconst candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'].join(',');\nfunction getTabIndex(node) {\n  const tabindexAttr = parseInt(node.getAttribute('tabindex') || '', 10);\n  if (!Number.isNaN(tabindexAttr)) {\n    return tabindexAttr;\n  }\n\n  // Browsers do not return `tabIndex` correctly for contentEditable nodes;\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n  //  yet they are still part of the regular tab order; in FF, they get a default\n  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n  //  order, consider their tab index to be 0.\n  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {\n    return 0;\n  }\n  return node.tabIndex;\n}\nfunction isNonTabbableRadio(node) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio') {\n    return false;\n  }\n  if (!node.name) {\n    return false;\n  }\n  const getRadio = selector => node.ownerDocument.querySelector(`input[type=\"radio\"]${selector}`);\n  let roving = getRadio(`[name=\"${node.name}\"]:checked`);\n  if (!roving) {\n    roving = getRadio(`[name=\"${node.name}\"]`);\n  }\n  return roving !== node;\n}\nfunction isNodeMatchingSelectorFocusable(node) {\n  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {\n    return false;\n  }\n  return true;\n}\nfunction defaultGetTabbable(root) {\n  const regularTabNodes = [];\n  const orderedTabNodes = [];\n  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {\n    const nodeTabIndex = getTabIndex(node);\n    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {\n      return;\n    }\n    if (nodeTabIndex === 0) {\n      regularTabNodes.push(node);\n    } else {\n      orderedTabNodes.push({\n        documentOrder: i,\n        tabIndex: nodeTabIndex,\n        node: node\n      });\n    }\n  });\n  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);\n}\nfunction defaultIsEnabled() {\n  return true;\n}\n\n/**\n * Utility component that locks focus inside the component.\n *\n * Demos:\n *\n * - [Focus Trap](https://mui.com/base-ui/react-focus-trap/)\n *\n * API:\n *\n * - [FocusTrap API](https://mui.com/base-ui/react-focus-trap/components-api/#focus-trap)\n */\nfunction FocusTrap(props) {\n  const {\n    children,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    getTabbable = defaultGetTabbable,\n    isEnabled = defaultIsEnabled,\n    open\n  } = props;\n  const ignoreNextEnforceFocus = React.useRef(false);\n  const sentinelStart = React.useRef(null);\n  const sentinelEnd = React.useRef(null);\n  const nodeToRestore = React.useRef(null);\n  const reactFocusEventTarget = React.useRef(null);\n  // This variable is useful when disableAutoFocus is true.\n  // It waits for the active element to move into the component to activate.\n  const activated = React.useRef(false);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(getReactNodeRef(children), rootRef);\n  const lastKeydown = React.useRef(null);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n    const doc = ownerDocument(rootRef.current);\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n        rootRef.current.setAttribute('tabIndex', '-1');\n      }\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n    return () => {\n      // restoreLastFocus()\n      if (!disableRestoreFocus) {\n        // In IE11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE11 have a focus method.\n        // Once IE11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n        nodeToRestore.current = null;\n      }\n    };\n    // Missing `disableRestoreFocus` which is fine.\n    // We don't support changing that prop on an open FocusTrap\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n    const doc = ownerDocument(rootRef.current);\n    const loopFocus = nativeEvent => {\n      lastKeydown.current = nativeEvent;\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {\n        return;\n      }\n\n      // Make sure the next tab starts from the right place.\n      // doc.activeElement refers to the origin.\n      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n        if (sentinelEnd.current) {\n          sentinelEnd.current.focus();\n        }\n      }\n    };\n    const contain = () => {\n      const rootElement = rootRef.current;\n\n      // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n      if (rootElement === null) {\n        return;\n      }\n      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      // The focus is already inside\n      if (rootElement.contains(doc.activeElement)) {\n        return;\n      }\n\n      // The disableEnforceFocus is set and the focus is outside of the focus trap (and sentinel nodes)\n      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {\n        return;\n      }\n\n      // if the focus event is not coming from inside the children's react tree, reset the refs\n      if (doc.activeElement !== reactFocusEventTarget.current) {\n        reactFocusEventTarget.current = null;\n      } else if (reactFocusEventTarget.current !== null) {\n        return;\n      }\n      if (!activated.current) {\n        return;\n      }\n      let tabbable = [];\n      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {\n        tabbable = getTabbable(rootRef.current);\n      }\n\n      // one of the sentinel nodes was focused, so move the focus\n      // to the first/last tabbable element inside the focus trap\n      if (tabbable.length > 0) {\n        const isShiftTab = Boolean(lastKeydown.current?.shiftKey && lastKeydown.current?.key === 'Tab');\n        const focusNext = tabbable[0];\n        const focusPrevious = tabbable[tabbable.length - 1];\n        if (typeof focusNext !== 'string' && typeof focusPrevious !== 'string') {\n          if (isShiftTab) {\n            focusPrevious.focus();\n          } else {\n            focusNext.focus();\n          }\n        }\n        // no tabbable elements in the trap focus or the focus was outside of the focus trap\n      } else {\n        rootElement.focus();\n      }\n    };\n    doc.addEventListener('focusin', contain);\n    doc.addEventListener('keydown', loopFocus, true);\n\n    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.\n    // for example https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    // Instead, we can look if the active element was restored on the BODY element.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n    const interval = setInterval(() => {\n      if (doc.activeElement && doc.activeElement.tagName === 'BODY') {\n        contain();\n      }\n    }, 50);\n    return () => {\n      clearInterval(interval);\n      doc.removeEventListener('focusin', contain);\n      doc.removeEventListener('keydown', loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);\n  const onFocus = event => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    const childrenPropsHandler = children.props.onFocus;\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const handleFocusSentinel = event => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n    activated.current = true;\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelStart,\n      \"data-testid\": \"sentinelStart\"\n    }), /*#__PURE__*/React.cloneElement(children, {\n      ref: handleRef,\n      onFocus\n    }), /*#__PURE__*/_jsx(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelEnd,\n      \"data-testid\": \"sentinelEnd\"\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? FocusTrap.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n  /**\n   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the focus trap less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n  /**\n   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.\n   *\n   * Generally this should never be set to `true` as it makes the focus trap less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n  /**\n   * If `true`, the focus trap will not restore focus to previously focused element once\n   * focus trap is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n  /**\n   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.\n   * For instance, you can provide the \"tabbable\" npm dependency.\n   * @param {HTMLElement} root\n   */\n  getTabbable: PropTypes.func,\n  /**\n   * This prop extends the `open` prop.\n   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.\n   * This prop should be memoized.\n   * It can be used to support multiple focus trap mounted at the same time.\n   * @default function defaultIsEnabled(): boolean {\n   *   return true;\n   * }\n   */\n  isEnabled: PropTypes.func,\n  /**\n   * If `true`, focus is locked.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  FocusTrap['propTypes' + ''] = exactProp(FocusTrap.propTypes);\n}\nexport { FocusTrap };"]},"metadata":{},"sourceType":"module"}