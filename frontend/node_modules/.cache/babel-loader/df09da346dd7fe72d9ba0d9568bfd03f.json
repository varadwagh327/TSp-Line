{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useBadge } from '../useBadge';\nimport { getBadgeUtilityClass } from './badgeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base-ui/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/base-ui/react-badge/components-api/#badge)\n */\n\n\nconst Badge = /*#__PURE__*/React.forwardRef(function Badge(props, forwardedRef) {\n  const {\n    badgeContent: badgeContentProp,\n    children,\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false,\n    ...other\n  } = props;\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge({ ...props,\n    max: maxProp\n  });\n  const ownerState = { ...props,\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = slots.root ?? 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = slots.badge ?? 'span';\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, { ...rootProps,\n    children: [children, /*#__PURE__*/_jsx(BadgeComponent, { ...badgeProps,\n      children: displayValue\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Badge };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Badge/Badge.js"],"names":["React","PropTypes","unstable_composeClasses","composeClasses","useBadge","getBadgeUtilityClass","useSlotProps","useClassNamesOverride","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","invisible","slots","root","badge","Badge","forwardRef","props","forwardedRef","badgeContent","badgeContentProp","children","invisibleProp","max","maxProp","slotProps","showZero","other","displayValue","classes","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","className","BadgeComponent","badgeProps","process","env","NODE_ENV","propTypes","node","bool","number","shape","oneOfType","func","object"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useBadge } from '../useBadge';\nimport { getBadgeUtilityClass } from './badgeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base-ui/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/base-ui/react-badge/components-api/#badge)\n */\nconst Badge = /*#__PURE__*/React.forwardRef(function Badge(props, forwardedRef) {\n  const {\n    badgeContent: badgeContentProp,\n    children,\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false,\n    ...other\n  } = props;\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge({\n    ...props,\n    max: maxProp\n  });\n  const ownerState = {\n    ...props,\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = slots.root ?? 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = slots.badge ?? 'span';\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [children, /*#__PURE__*/_jsx(BadgeComponent, {\n      ...badgeProps,\n      children: displayValue\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Badge };"]},"metadata":{},"sourceType":"module"}