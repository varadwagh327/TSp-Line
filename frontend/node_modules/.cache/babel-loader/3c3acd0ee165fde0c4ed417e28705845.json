{"ast":null,"code":"import { moveHighlight, listReducer, ListActionTypes, handleItemSelection } from '../useList';\nimport { SelectActionTypes } from './useSelect.types';\nexport function selectReducer(state, action) {\n  const {\n    open\n  } = state;\n  const {\n    context: {\n      selectionMode\n    }\n  } = action;\n\n  if (action.type === SelectActionTypes.buttonClick) {\n    const itemToHighlight = state.selectedValues[0] ?? moveHighlight(null, 'start', action.context);\n    return { ...state,\n      open: !open,\n      highlightedValue: !open ? itemToHighlight : null\n    };\n  }\n\n  if (action.type === SelectActionTypes.browserAutoFill) {\n    return handleItemSelection(action.item, state, action.context);\n  }\n\n  const newState = listReducer(state, action);\n\n  switch (action.type) {\n    case ListActionTypes.keyDown:\n      if (state.open) {\n        if (action.event.key === 'Escape') {\n          return { ...newState,\n            open: false\n          };\n        }\n      } else {\n        if (action.event.key === 'ArrowDown') {\n          return { ...state,\n            open: true,\n            highlightedValue: state.selectedValues[0] ?? moveHighlight(null, 'start', action.context)\n          };\n        }\n\n        if (action.event.key === 'ArrowUp') {\n          return { ...state,\n            open: true,\n            highlightedValue: state.selectedValues[0] ?? moveHighlight(null, 'end', action.context)\n          };\n        }\n      }\n\n      break;\n\n    case ListActionTypes.itemClick:\n      if (selectionMode === 'single') {\n        return { ...newState,\n          open: false\n        };\n      }\n\n      break;\n\n    case ListActionTypes.blur:\n      return { ...newState,\n        open: false\n      };\n\n    default:\n      return newState;\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useSelect/selectReducer.js"],"names":["moveHighlight","listReducer","ListActionTypes","handleItemSelection","SelectActionTypes","selectReducer","state","action","open","context","selectionMode","type","buttonClick","itemToHighlight","selectedValues","highlightedValue","browserAutoFill","item","newState","keyDown","event","key","itemClick","blur"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,eAArC,EAAsDC,mBAAtD,QAAiF,YAAjF;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AAC3C,QAAM;AACJC,IAAAA;AADI,MAEFF,KAFJ;AAGA,QAAM;AACJG,IAAAA,OAAO,EAAE;AACPC,MAAAA;AADO;AADL,MAIFH,MAJJ;;AAKA,MAAIA,MAAM,CAACI,IAAP,KAAgBP,iBAAiB,CAACQ,WAAtC,EAAmD;AACjD,UAAMC,eAAe,GAAGP,KAAK,CAACQ,cAAN,CAAqB,CAArB,KAA2Bd,aAAa,CAAC,IAAD,EAAO,OAAP,EAAgBO,MAAM,CAACE,OAAvB,CAAhE;AACA,WAAO,EACL,GAAGH,KADE;AAELE,MAAAA,IAAI,EAAE,CAACA,IAFF;AAGLO,MAAAA,gBAAgB,EAAE,CAACP,IAAD,GAAQK,eAAR,GAA0B;AAHvC,KAAP;AAKD;;AACD,MAAIN,MAAM,CAACI,IAAP,KAAgBP,iBAAiB,CAACY,eAAtC,EAAuD;AACrD,WAAOb,mBAAmB,CAACI,MAAM,CAACU,IAAR,EAAcX,KAAd,EAAqBC,MAAM,CAACE,OAA5B,CAA1B;AACD;;AACD,QAAMS,QAAQ,GAAGjB,WAAW,CAACK,KAAD,EAAQC,MAAR,CAA5B;;AACA,UAAQA,MAAM,CAACI,IAAf;AACE,SAAKT,eAAe,CAACiB,OAArB;AACE,UAAIb,KAAK,CAACE,IAAV,EAAgB;AACd,YAAID,MAAM,CAACa,KAAP,CAAaC,GAAb,KAAqB,QAAzB,EAAmC;AACjC,iBAAO,EACL,GAAGH,QADE;AAELV,YAAAA,IAAI,EAAE;AAFD,WAAP;AAID;AACF,OAPD,MAOO;AACL,YAAID,MAAM,CAACa,KAAP,CAAaC,GAAb,KAAqB,WAAzB,EAAsC;AACpC,iBAAO,EACL,GAAGf,KADE;AAELE,YAAAA,IAAI,EAAE,IAFD;AAGLO,YAAAA,gBAAgB,EAAET,KAAK,CAACQ,cAAN,CAAqB,CAArB,KAA2Bd,aAAa,CAAC,IAAD,EAAO,OAAP,EAAgBO,MAAM,CAACE,OAAvB;AAHrD,WAAP;AAKD;;AACD,YAAIF,MAAM,CAACa,KAAP,CAAaC,GAAb,KAAqB,SAAzB,EAAoC;AAClC,iBAAO,EACL,GAAGf,KADE;AAELE,YAAAA,IAAI,EAAE,IAFD;AAGLO,YAAAA,gBAAgB,EAAET,KAAK,CAACQ,cAAN,CAAqB,CAArB,KAA2Bd,aAAa,CAAC,IAAD,EAAO,KAAP,EAAcO,MAAM,CAACE,OAArB;AAHrD,WAAP;AAKD;AACF;;AACD;;AACF,SAAKP,eAAe,CAACoB,SAArB;AACE,UAAIZ,aAAa,KAAK,QAAtB,EAAgC;AAC9B,eAAO,EACL,GAAGQ,QADE;AAELV,UAAAA,IAAI,EAAE;AAFD,SAAP;AAID;;AACD;;AACF,SAAKN,eAAe,CAACqB,IAArB;AACE,aAAO,EACL,GAAGL,QADE;AAELV,QAAAA,IAAI,EAAE;AAFD,OAAP;;AAIF;AACE,aAAOU,QAAP;AAxCJ;;AA0CA,SAAOA,QAAP;AACD","sourcesContent":["import { moveHighlight, listReducer, ListActionTypes, handleItemSelection } from '../useList';\nimport { SelectActionTypes } from './useSelect.types';\nexport function selectReducer(state, action) {\n  const {\n    open\n  } = state;\n  const {\n    context: {\n      selectionMode\n    }\n  } = action;\n  if (action.type === SelectActionTypes.buttonClick) {\n    const itemToHighlight = state.selectedValues[0] ?? moveHighlight(null, 'start', action.context);\n    return {\n      ...state,\n      open: !open,\n      highlightedValue: !open ? itemToHighlight : null\n    };\n  }\n  if (action.type === SelectActionTypes.browserAutoFill) {\n    return handleItemSelection(action.item, state, action.context);\n  }\n  const newState = listReducer(state, action);\n  switch (action.type) {\n    case ListActionTypes.keyDown:\n      if (state.open) {\n        if (action.event.key === 'Escape') {\n          return {\n            ...newState,\n            open: false\n          };\n        }\n      } else {\n        if (action.event.key === 'ArrowDown') {\n          return {\n            ...state,\n            open: true,\n            highlightedValue: state.selectedValues[0] ?? moveHighlight(null, 'start', action.context)\n          };\n        }\n        if (action.event.key === 'ArrowUp') {\n          return {\n            ...state,\n            open: true,\n            highlightedValue: state.selectedValues[0] ?? moveHighlight(null, 'end', action.context)\n          };\n        }\n      }\n      break;\n    case ListActionTypes.itemClick:\n      if (selectionMode === 'single') {\n        return {\n          ...newState,\n          open: false\n        };\n      }\n      break;\n    case ListActionTypes.blur:\n      return {\n        ...newState,\n        open: false\n      };\n    default:\n      return newState;\n  }\n  return newState;\n}"]},"metadata":{},"sourceType":"module"}