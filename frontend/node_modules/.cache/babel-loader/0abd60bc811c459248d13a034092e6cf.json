{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ClickAwayListener } from '../ClickAwayListener';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getSnackbarUtilityClass } from './snackbarClasses';\nimport { useSnackbar } from '../useSnackbar';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/)\n * - [Snackbar](https://mui.com/joy-ui/react-snackbar/)\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/base-ui/react-snackbar/components-api/#snackbar)\n */\n\n\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, forwardedRef) {\n  const {\n    autoHideDuration = null,\n    children,\n    disableWindowBlurListener = false,\n    exited = true,\n    onBlur,\n    onClose,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const classes = useUtilityClasses();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar({ ...props,\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  });\n  const ownerState = props;\n  const Root = slots.root || 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  }); // ClickAwayListener doesn't support ownerState\n\n  delete clickAwayListenerProps.ownerState; // So that we only render active snackbars.\n\n  if (!open && exited) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(ClickAwayListener, { ...clickAwayListenerProps,\n    children: /*#__PURE__*/_jsx(Root, { ...rootProps,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: PropTypes.bool,\n\n  /**\n   * The prop used to handle exited transition and unmount the component.\n   * @default true\n   */\n  exited: PropTypes.bool,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n\n  /**\n   * The props used for each slot inside the Snackbar.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element.isRequired,\n      disableReactTree: PropTypes.bool,\n      mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n      onClickAway: PropTypes.func,\n      touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n    })]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Snackbar.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Snackbar };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Snackbar/Snackbar.js"],"names":["React","PropTypes","ClickAwayListener","unstable_composeClasses","composeClasses","getSnackbarUtilityClass","useSnackbar","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","slots","root","Snackbar","forwardRef","props","forwardedRef","autoHideDuration","children","disableWindowBlurListener","exited","onBlur","onClose","onFocus","onMouseEnter","onMouseLeave","open","resumeHideDuration","slotProps","other","classes","getRootProps","onClickAway","ownerState","Root","rootProps","elementType","getSlotProps","externalForwardedProps","externalSlotProps","additionalProps","ref","className","clickAwayListenerProps","clickAwayListener","process","env","NODE_ENV","propTypes","number","node","bool","func","shape","oneOfType","element","isRequired","disableReactTree","mouseEvent","oneOf","touchEvent","object"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ClickAwayListener } from '../ClickAwayListener';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getSnackbarUtilityClass } from './snackbarClasses';\nimport { useSnackbar } from '../useSnackbar';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/)\n * - [Snackbar](https://mui.com/joy-ui/react-snackbar/)\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/base-ui/react-snackbar/components-api/#snackbar)\n */\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, forwardedRef) {\n  const {\n    autoHideDuration = null,\n    children,\n    disableWindowBlurListener = false,\n    exited = true,\n    onBlur,\n    onClose,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const classes = useUtilityClasses();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar({\n    ...props,\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  });\n  const ownerState = props;\n  const Root = slots.root || 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  });\n\n  // ClickAwayListener doesn't support ownerState\n  delete clickAwayListenerProps.ownerState;\n\n  // So that we only render active snackbars.\n  if (!open && exited) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(ClickAwayListener, {\n    ...clickAwayListenerProps,\n    children: /*#__PURE__*/_jsx(Root, {\n      ...rootProps,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: PropTypes.number,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: PropTypes.bool,\n  /**\n   * The prop used to handle exited transition and unmount the component.\n   * @default true\n   */\n  exited: PropTypes.bool,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n  /**\n   * The props used for each slot inside the Snackbar.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element.isRequired,\n      disableReactTree: PropTypes.bool,\n      mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n      onClickAway: PropTypes.func,\n      touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n    })]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Snackbar.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Snackbar };"]},"metadata":{},"sourceType":"module"}