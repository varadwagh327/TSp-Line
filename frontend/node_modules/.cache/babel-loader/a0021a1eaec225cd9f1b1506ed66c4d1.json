{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getOptionUtilityClass } from './optionClasses';\nimport { useSlotProps } from '../utils';\nimport { useOption, useOptionContextStabilizer } from '../useOption';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { ListContext } from '../useList';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    highlighted,\n    selected\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));\n}\n\nconst InnerOption = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Option(props, forwardedRef) {\n  const {\n    children,\n    disabled = false,\n    label,\n    slotProps = {},\n    slots = {},\n    value,\n    ...other\n  } = props;\n  const Root = slots.root ?? 'li';\n  const optionRef = React.useRef(null);\n  const combinedRef = useForkRef(optionRef, forwardedRef); // If `label` is not explicitly provided, the `children` are used for convenience.\n  // This is used to populate the select's trigger with the selected option's label.\n\n  const computedLabel = label ?? (typeof children === 'string' ? children : optionRef.current?.textContent?.trim());\n  const {\n    getRootProps,\n    selected,\n    highlighted,\n    index\n  } = useOption({\n    disabled,\n    label: computedLabel,\n    rootRef: combinedRef,\n    value\n  });\n  const ownerState = { ...props,\n    disabled,\n    highlighted,\n    index,\n    selected\n  };\n  const classes = useUtilityClasses(ownerState);\n  const rootProps = useSlotProps({\n    getSlotProps: getRootProps,\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, { ...rootProps,\n    children: children\n  });\n}));\n/**\n * An unstyled option to be used within a Select.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/)\n *\n * API:\n *\n * - [Option API](https://mui.com/base-ui/react-select/components-api/#option)\n */\n\nconst Option = /*#__PURE__*/React.forwardRef(function Option(props, ref) {\n  const {\n    value\n  } = props; // This wrapper component is used as a performance optimization.\n  // `useOptionContextStabilizer` ensures that the context value\n  // is stable across renders, so that the actual Option re-renders\n  // only when it needs to.\n\n  const {\n    contextValue\n  } = useOptionContextStabilizer(value);\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(InnerOption, { ...props,\n      ref: ref\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Option.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the option will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A text representation of the option's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The props used for each slot inside the Option.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Option.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The value of the option.\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\nexport { Option };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Option/Option.js"],"names":["React","PropTypes","unstable_useForkRef","useForkRef","unstable_composeClasses","composeClasses","getOptionUtilityClass","useSlotProps","useOption","useOptionContextStabilizer","useClassNamesOverride","ListContext","jsx","_jsx","useUtilityClasses","ownerState","disabled","highlighted","selected","slots","root","InnerOption","memo","forwardRef","Option","props","forwardedRef","children","label","slotProps","value","other","Root","optionRef","useRef","combinedRef","computedLabel","current","textContent","trim","getRootProps","index","rootRef","classes","rootProps","getSlotProps","elementType","externalSlotProps","externalForwardedProps","className","ref","contextValue","Provider","process","env","NODE_ENV","propTypes","node","string","bool","shape","oneOfType","func","object","any","isRequired"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getOptionUtilityClass } from './optionClasses';\nimport { useSlotProps } from '../utils';\nimport { useOption, useOptionContextStabilizer } from '../useOption';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { ListContext } from '../useList';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    highlighted,\n    selected\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));\n}\nconst InnerOption = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Option(props, forwardedRef) {\n  const {\n    children,\n    disabled = false,\n    label,\n    slotProps = {},\n    slots = {},\n    value,\n    ...other\n  } = props;\n  const Root = slots.root ?? 'li';\n  const optionRef = React.useRef(null);\n  const combinedRef = useForkRef(optionRef, forwardedRef);\n\n  // If `label` is not explicitly provided, the `children` are used for convenience.\n  // This is used to populate the select's trigger with the selected option's label.\n  const computedLabel = label ?? (typeof children === 'string' ? children : optionRef.current?.textContent?.trim());\n  const {\n    getRootProps,\n    selected,\n    highlighted,\n    index\n  } = useOption({\n    disabled,\n    label: computedLabel,\n    rootRef: combinedRef,\n    value\n  });\n  const ownerState = {\n    ...props,\n    disabled,\n    highlighted,\n    index,\n    selected\n  };\n  const classes = useUtilityClasses(ownerState);\n  const rootProps = useSlotProps({\n    getSlotProps: getRootProps,\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, {\n    ...rootProps,\n    children: children\n  });\n}));\n\n/**\n * An unstyled option to be used within a Select.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/)\n *\n * API:\n *\n * - [Option API](https://mui.com/base-ui/react-select/components-api/#option)\n */\nconst Option = /*#__PURE__*/React.forwardRef(function Option(props, ref) {\n  const {\n    value\n  } = props;\n\n  // This wrapper component is used as a performance optimization.\n  // `useOptionContextStabilizer` ensures that the context value\n  // is stable across renders, so that the actual Option re-renders\n  // only when it needs to.\n  const {\n    contextValue\n  } = useOptionContextStabilizer(value);\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(InnerOption, {\n      ...props,\n      ref: ref\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Option.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the option will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A text representation of the option's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: PropTypes.string,\n  /**\n   * The props used for each slot inside the Option.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Option.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The value of the option.\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\nexport { Option };"]},"metadata":{},"sourceType":"module"}