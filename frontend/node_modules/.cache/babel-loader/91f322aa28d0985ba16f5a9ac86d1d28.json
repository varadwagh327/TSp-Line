{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { menuReducer } from './menuReducer';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { ListActionTypes, useList } from '../useList';\nimport { DropdownActionTypes } from '../useDropdown';\nimport { useCompoundParent } from '../useCompound';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nconst FALLBACK_MENU_CONTEXT = {\n  dispatch: () => {},\n  popupId: '',\n  registerPopup: () => {},\n  registerTrigger: () => {},\n  state: {\n    open: true,\n    changeReason: null\n  },\n  triggerElement: null\n};\n/**\n *\n * Demos:\n *\n * - [Menu](https://next.mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenu API](https://next.mui.com/base-ui/react-menu/hooks-api/#use-menu)\n */\n\nexport function useMenu() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    listboxRef: listboxRefProp,\n    onItemsChange,\n    id: idParam,\n    disabledItemsFocusable = true,\n    disableListWrap = false,\n    autoFocus = true,\n    componentName = 'useMenu'\n  } = parameters;\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(rootRef, listboxRefProp);\n  const listboxId = useId(idParam) ?? '';\n  const {\n    state: {\n      open,\n      changeReason\n    },\n    dispatch: menuDispatch,\n    triggerElement,\n    registerPopup\n  } = React.useContext(DropdownContext) ?? FALLBACK_MENU_CONTEXT; // store the initial open state to prevent focus stealing\n  // (the first menu items gets focued only when the menu is opened by the user)\n\n  const isInitiallyOpen = React.useRef(open);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const subitemKeys = React.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getItemDomElement = React.useCallback(itemId => {\n    if (itemId == null) {\n      return null;\n    }\n\n    return subitems.get(itemId)?.ref.current ?? null;\n  }, [subitems]);\n  const isItemDisabled = React.useCallback(id => subitems?.get(id)?.disabled || false, [subitems]);\n  const getItemAsString = React.useCallback(id => subitems.get(id)?.label || subitems.get(id)?.ref.current?.innerText, [subitems]);\n  const reducerActionContext = React.useMemo(() => ({\n    listboxRef: rootRef\n  }), [rootRef]);\n  const {\n    dispatch: listDispatch,\n    getRootProps: getListRootProps,\n    contextValue: listContextValue,\n    state: {\n      highlightedValue\n    },\n    rootRef: mergedListRef\n  } = useList({\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    getInitialState: () => ({\n      selectedValues: [],\n      highlightedValue: null\n    }),\n    isItemDisabled,\n    items: subitemKeys,\n    getItemAsString,\n    rootRef: handleRef,\n    onItemsChange,\n    reducerActionContext,\n    selectionMode: 'none',\n    stateReducer: menuReducer,\n    componentName\n  });\n  useEnhancedEffect(() => {\n    registerPopup(listboxId);\n  }, [listboxId, registerPopup]);\n  useEnhancedEffect(() => {\n    if (open && changeReason?.type === 'keydown' && changeReason.key === 'ArrowUp') {\n      listDispatch({\n        type: ListActionTypes.highlightLast,\n        event: changeReason\n      });\n    }\n  }, [open, changeReason, listDispatch]);\n  React.useEffect(() => {\n    if (open && autoFocus && highlightedValue && !isInitiallyOpen.current) {\n      subitems.get(highlightedValue)?.ref?.current?.focus();\n    }\n  }, [open, autoFocus, highlightedValue, subitems, subitemKeys]);\n  React.useEffect(() => {\n    // set focus to the highlighted item (but prevent stealing focus from other elements on the page)\n    if (rootRef.current?.contains(document.activeElement) && highlightedValue !== null) {\n      subitems?.get(highlightedValue)?.ref.current?.focus();\n    }\n  }, [highlightedValue, subitems]);\n\n  const createHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (rootRef.current?.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {\n      return;\n    }\n\n    menuDispatch({\n      type: DropdownActionTypes.blur,\n      event\n    });\n  };\n\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (event.key === 'Escape') {\n      menuDispatch({\n        type: DropdownActionTypes.escapeKeyDown,\n        event\n      });\n    }\n  };\n\n  const getOwnListboxHandlers = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n\n  const getListboxProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return { ...externalProps,\n      ...externalEventHandlers,\n      ...getCombinedRootProps(externalEventHandlers),\n      id: listboxId,\n      role: 'menu'\n    };\n  };\n\n  React.useDebugValue({\n    subitems,\n    highlightedValue\n  });\n  return {\n    contextValue: { ...compoundComponentContextValue,\n      ...listContextValue\n    },\n    dispatch: listDispatch,\n    getListboxProps,\n    highlightedValue,\n    listboxRef: mergedListRef,\n    menuItems: subitems,\n    open,\n    triggerElement\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useMenu/useMenu.js"],"names":["React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","menuReducer","DropdownContext","ListActionTypes","useList","DropdownActionTypes","useCompoundParent","combineHooksSlotProps","extractEventHandlers","FALLBACK_MENU_CONTEXT","dispatch","popupId","registerPopup","registerTrigger","state","open","changeReason","triggerElement","useMenu","parameters","listboxRef","listboxRefProp","onItemsChange","id","idParam","disabledItemsFocusable","disableListWrap","autoFocus","componentName","rootRef","useRef","handleRef","listboxId","menuDispatch","useContext","isInitiallyOpen","subitems","contextValue","compoundComponentContextValue","subitemKeys","useMemo","Array","from","keys","getItemDomElement","useCallback","itemId","get","ref","current","isItemDisabled","disabled","getItemAsString","label","innerText","reducerActionContext","listDispatch","getRootProps","getListRootProps","listContextValue","highlightedValue","mergedListRef","focusManagement","getInitialState","selectedValues","items","selectionMode","stateReducer","type","key","highlightLast","event","useEffect","focus","contains","document","activeElement","createHandleBlur","otherHandlers","onBlur","defaultMuiPrevented","relatedTarget","blur","createHandleKeyDown","onKeyDown","escapeKeyDown","getOwnListboxHandlers","getListboxProps","externalProps","getCombinedRootProps","externalEventHandlers","role","useDebugValue","menuItems"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { menuReducer } from './menuReducer';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { ListActionTypes, useList } from '../useList';\nimport { DropdownActionTypes } from '../useDropdown';\nimport { useCompoundParent } from '../useCompound';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nconst FALLBACK_MENU_CONTEXT = {\n  dispatch: () => {},\n  popupId: '',\n  registerPopup: () => {},\n  registerTrigger: () => {},\n  state: {\n    open: true,\n    changeReason: null\n  },\n  triggerElement: null\n};\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://next.mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenu API](https://next.mui.com/base-ui/react-menu/hooks-api/#use-menu)\n */\nexport function useMenu(parameters = {}) {\n  const {\n    listboxRef: listboxRefProp,\n    onItemsChange,\n    id: idParam,\n    disabledItemsFocusable = true,\n    disableListWrap = false,\n    autoFocus = true,\n    componentName = 'useMenu'\n  } = parameters;\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(rootRef, listboxRefProp);\n  const listboxId = useId(idParam) ?? '';\n  const {\n    state: {\n      open,\n      changeReason\n    },\n    dispatch: menuDispatch,\n    triggerElement,\n    registerPopup\n  } = React.useContext(DropdownContext) ?? FALLBACK_MENU_CONTEXT;\n\n  // store the initial open state to prevent focus stealing\n  // (the first menu items gets focued only when the menu is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const subitemKeys = React.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getItemDomElement = React.useCallback(itemId => {\n    if (itemId == null) {\n      return null;\n    }\n    return subitems.get(itemId)?.ref.current ?? null;\n  }, [subitems]);\n  const isItemDisabled = React.useCallback(id => subitems?.get(id)?.disabled || false, [subitems]);\n  const getItemAsString = React.useCallback(id => subitems.get(id)?.label || subitems.get(id)?.ref.current?.innerText, [subitems]);\n  const reducerActionContext = React.useMemo(() => ({\n    listboxRef: rootRef\n  }), [rootRef]);\n  const {\n    dispatch: listDispatch,\n    getRootProps: getListRootProps,\n    contextValue: listContextValue,\n    state: {\n      highlightedValue\n    },\n    rootRef: mergedListRef\n  } = useList({\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    getInitialState: () => ({\n      selectedValues: [],\n      highlightedValue: null\n    }),\n    isItemDisabled,\n    items: subitemKeys,\n    getItemAsString,\n    rootRef: handleRef,\n    onItemsChange,\n    reducerActionContext,\n    selectionMode: 'none',\n    stateReducer: menuReducer,\n    componentName\n  });\n  useEnhancedEffect(() => {\n    registerPopup(listboxId);\n  }, [listboxId, registerPopup]);\n  useEnhancedEffect(() => {\n    if (open && changeReason?.type === 'keydown' && changeReason.key === 'ArrowUp') {\n      listDispatch({\n        type: ListActionTypes.highlightLast,\n        event: changeReason\n      });\n    }\n  }, [open, changeReason, listDispatch]);\n  React.useEffect(() => {\n    if (open && autoFocus && highlightedValue && !isInitiallyOpen.current) {\n      subitems.get(highlightedValue)?.ref?.current?.focus();\n    }\n  }, [open, autoFocus, highlightedValue, subitems, subitemKeys]);\n  React.useEffect(() => {\n    // set focus to the highlighted item (but prevent stealing focus from other elements on the page)\n    if (rootRef.current?.contains(document.activeElement) && highlightedValue !== null) {\n      subitems?.get(highlightedValue)?.ref.current?.focus();\n    }\n  }, [highlightedValue, subitems]);\n  const createHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (rootRef.current?.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {\n      return;\n    }\n    menuDispatch({\n      type: DropdownActionTypes.blur,\n      event\n    });\n  };\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'Escape') {\n      menuDispatch({\n        type: DropdownActionTypes.escapeKeyDown,\n        event\n      });\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createHandleBlur(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return {\n      ...externalProps,\n      ...externalEventHandlers,\n      ...getCombinedRootProps(externalEventHandlers),\n      id: listboxId,\n      role: 'menu'\n    };\n  };\n  React.useDebugValue({\n    subitems,\n    highlightedValue\n  });\n  return {\n    contextValue: {\n      ...compoundComponentContextValue,\n      ...listContextValue\n    },\n    dispatch: listDispatch,\n    getListboxProps,\n    highlightedValue,\n    listboxRef: mergedListRef,\n    menuItems: subitems,\n    open,\n    triggerElement\n  };\n}"]},"metadata":{},"sourceType":"module"}