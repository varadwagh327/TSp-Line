{"ast":null,"code":"'use client';\n\nimport useLazyRef from \"../useLazyRef/useLazyRef.js\";\nimport useOnMount from \"../useOnMount/useOnMount.js\";\nexport class Timeout {\n  static create() {\n    return new Timeout();\n  }\n\n  currentId = null;\n  /**\n   * Executes `fn` after `delay`, clearing any previously scheduled call.\n   */\n\n  start(delay, fn) {\n    this.clear();\n    this.currentId = setTimeout(() => {\n      this.currentId = null;\n      fn();\n    }, delay);\n  }\n\n  clear = () => {\n    if (this.currentId !== null) {\n      clearTimeout(this.currentId);\n      this.currentId = null;\n    }\n  };\n  disposeEffect = () => {\n    return this.clear;\n  };\n}\nexport default function useTimeout() {\n  const timeout = useLazyRef(Timeout.create).current;\n  useOnMount(timeout.disposeEffect);\n  return timeout;\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/utils/esm/useTimeout/useTimeout.js"],"names":["useLazyRef","useOnMount","Timeout","create","currentId","start","delay","fn","clear","setTimeout","clearTimeout","disposeEffect","useTimeout","timeout","current"],"mappings":"AAAA;;AAEA,OAAOA,UAAP,MAAuB,6BAAvB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAO,MAAMC,OAAN,CAAc;AACN,SAANC,MAAM,GAAG;AACd,WAAO,IAAID,OAAJ,EAAP;AACD;;AACDE,EAAAA,SAAS,GAAG,IAAH;AAET;AACF;AACA;;AACEC,EAAAA,KAAK,CAACC,KAAD,EAAQC,EAAR,EAAY;AACf,SAAKC,KAAL;AACA,SAAKJ,SAAL,GAAiBK,UAAU,CAAC,MAAM;AAChC,WAAKL,SAAL,GAAiB,IAAjB;AACAG,MAAAA,EAAE;AACH,KAH0B,EAGxBD,KAHwB,CAA3B;AAID;;AACDE,EAAAA,KAAK,GAAG,MAAM;AACZ,QAAI,KAAKJ,SAAL,KAAmB,IAAvB,EAA6B;AAC3BM,MAAAA,YAAY,CAAC,KAAKN,SAAN,CAAZ;AACA,WAAKA,SAAL,GAAiB,IAAjB;AACD;AACF,GALI;AAMLO,EAAAA,aAAa,GAAG,MAAM;AACpB,WAAO,KAAKH,KAAZ;AACD,GAFY;AAtBM;AA0BrB,eAAe,SAASI,UAAT,GAAsB;AACnC,QAAMC,OAAO,GAAGb,UAAU,CAACE,OAAO,CAACC,MAAT,CAAV,CAA2BW,OAA3C;AACAb,EAAAA,UAAU,CAACY,OAAO,CAACF,aAAT,CAAV;AACA,SAAOE,OAAP;AACD","sourcesContent":["'use client';\n\nimport useLazyRef from \"../useLazyRef/useLazyRef.js\";\nimport useOnMount from \"../useOnMount/useOnMount.js\";\nexport class Timeout {\n  static create() {\n    return new Timeout();\n  }\n  currentId = null;\n\n  /**\n   * Executes `fn` after `delay`, clearing any previously scheduled call.\n   */\n  start(delay, fn) {\n    this.clear();\n    this.currentId = setTimeout(() => {\n      this.currentId = null;\n      fn();\n    }, delay);\n  }\n  clear = () => {\n    if (this.currentId !== null) {\n      clearTimeout(this.currentId);\n      this.currentId = null;\n    }\n  };\n  disposeEffect = () => {\n    return this.clear;\n  };\n}\nexport default function useTimeout() {\n  const timeout = useLazyRef(Timeout.create).current;\n  useOnMount(timeout.disposeEffect);\n  return timeout;\n}"]},"metadata":{},"sourceType":"module"}