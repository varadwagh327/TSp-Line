{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { useTabPanel } from '../useTabPanel/useTabPanel';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    hidden\n  } = ownerState;\n  const slots = {\n    root: ['root', hidden && 'hidden']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabPanelUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [TabPanel API](https://mui.com/base-ui/react-tabs/components-api/#tab-panel)\n */\n\n\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(props, forwardedRef) {\n  const {\n    children,\n    value,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    hidden,\n    getRootProps\n  } = useTabPanel(props);\n  const ownerState = { ...props,\n    hidden\n  };\n  const classes = useUtilityClasses(ownerState);\n  const TabPanelRoot = slots.root ?? 'div';\n  const tabPanelRootProps = useSlotProps({\n    elementType: TabPanelRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      role: 'tabpanel',\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabPanelRoot, { ...tabPanelRootProps,\n    children: !hidden && children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The props used for each slot inside the TabPanel.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the TabPanel.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\n   * If not provided, it will fall back to the index of the panel.\n   * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport { TabPanel };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/TabPanel/TabPanel.js"],"names":["React","PropTypes","useSlotProps","unstable_composeClasses","composeClasses","getTabPanelUtilityClass","useTabPanel","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","hidden","slots","root","TabPanel","forwardRef","props","forwardedRef","children","value","slotProps","other","getRootProps","classes","TabPanelRoot","tabPanelRootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","additionalProps","role","ref","className","process","env","NODE_ENV","propTypes","node","string","shape","oneOfType","func","object","number"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { useTabPanel } from '../useTabPanel/useTabPanel';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    hidden\n  } = ownerState;\n  const slots = {\n    root: ['root', hidden && 'hidden']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabPanelUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [TabPanel API](https://mui.com/base-ui/react-tabs/components-api/#tab-panel)\n */\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(props, forwardedRef) {\n  const {\n    children,\n    value,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    hidden,\n    getRootProps\n  } = useTabPanel(props);\n  const ownerState = {\n    ...props,\n    hidden\n  };\n  const classes = useUtilityClasses(ownerState);\n  const TabPanelRoot = slots.root ?? 'div';\n  const tabPanelRootProps = useSlotProps({\n    elementType: TabPanelRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      role: 'tabpanel',\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabPanelRoot, {\n    ...tabPanelRootProps,\n    children: !hidden && children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The props used for each slot inside the TabPanel.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the TabPanel.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\n   * If not provided, it will fall back to the index of the panel.\n   * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport { TabPanel };"]},"metadata":{},"sourceType":"module"}