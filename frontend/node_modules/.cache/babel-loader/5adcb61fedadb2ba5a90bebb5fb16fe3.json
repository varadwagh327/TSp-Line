{"ast":null,"code":"import excludeVariablesFromRoot from \"./excludeVariablesFromRoot.js\";\nexport default (theme => (colorScheme, css) => {\n  const root = theme.rootSelector || ':root';\n  const selector = theme.colorSchemeSelector;\n  let rule = selector;\n\n  if (selector === 'class') {\n    rule = '.%s';\n  }\n\n  if (selector === 'data') {\n    rule = '[data-%s]';\n  }\n\n  if (selector?.startsWith('data-') && !selector.includes('%s')) {\n    // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n    rule = `[${selector}=\"%s\"]`;\n  }\n\n  if (theme.defaultColorScheme === colorScheme) {\n    if (colorScheme === 'dark') {\n      const excludedVariables = {};\n      excludeVariablesFromRoot(theme.cssVarPrefix).forEach(cssVar => {\n        excludedVariables[cssVar] = css[cssVar];\n        delete css[cssVar];\n      });\n\n      if (rule === 'media') {\n        return {\n          [root]: css,\n          [`@media (prefers-color-scheme: dark)`]: {\n            [root]: excludedVariables\n          }\n        };\n      }\n\n      if (rule) {\n        return {\n          [rule.replace('%s', colorScheme)]: excludedVariables,\n          [`${root}, ${rule.replace('%s', colorScheme)}`]: css\n        };\n      }\n\n      return {\n        [root]: { ...css,\n          ...excludedVariables\n        }\n      };\n    }\n\n    if (rule && rule !== 'media') {\n      return `${root}, ${rule.replace('%s', String(colorScheme))}`;\n    }\n  } else if (colorScheme) {\n    if (rule === 'media') {\n      return {\n        [`@media (prefers-color-scheme: ${String(colorScheme)})`]: {\n          [root]: css\n        }\n      };\n    }\n\n    if (rule) {\n      return rule.replace('%s', String(colorScheme));\n    }\n  }\n\n  return root;\n});","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/styles/createGetSelector.js"],"names":["excludeVariablesFromRoot","theme","colorScheme","css","root","rootSelector","selector","colorSchemeSelector","rule","startsWith","includes","defaultColorScheme","excludedVariables","cssVarPrefix","forEach","cssVar","replace","String"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,+BAArC;AACA,gBAAeC,KAAK,IAAI,CAACC,WAAD,EAAcC,GAAd,KAAsB;AAC5C,QAAMC,IAAI,GAAGH,KAAK,CAACI,YAAN,IAAsB,OAAnC;AACA,QAAMC,QAAQ,GAAGL,KAAK,CAACM,mBAAvB;AACA,MAAIC,IAAI,GAAGF,QAAX;;AACA,MAAIA,QAAQ,KAAK,OAAjB,EAA0B;AACxBE,IAAAA,IAAI,GAAG,KAAP;AACD;;AACD,MAAIF,QAAQ,KAAK,MAAjB,EAAyB;AACvBE,IAAAA,IAAI,GAAG,WAAP;AACD;;AACD,MAAIF,QAAQ,EAAEG,UAAV,CAAqB,OAArB,KAAiC,CAACH,QAAQ,CAACI,QAAT,CAAkB,IAAlB,CAAtC,EAA+D;AAC7D;AACAF,IAAAA,IAAI,GAAI,IAAGF,QAAS,QAApB;AACD;;AACD,MAAIL,KAAK,CAACU,kBAAN,KAA6BT,WAAjC,EAA8C;AAC5C,QAAIA,WAAW,KAAK,MAApB,EAA4B;AAC1B,YAAMU,iBAAiB,GAAG,EAA1B;AACAZ,MAAAA,wBAAwB,CAACC,KAAK,CAACY,YAAP,CAAxB,CAA6CC,OAA7C,CAAqDC,MAAM,IAAI;AAC7DH,QAAAA,iBAAiB,CAACG,MAAD,CAAjB,GAA4BZ,GAAG,CAACY,MAAD,CAA/B;AACA,eAAOZ,GAAG,CAACY,MAAD,CAAV;AACD,OAHD;;AAIA,UAAIP,IAAI,KAAK,OAAb,EAAsB;AACpB,eAAO;AACL,WAACJ,IAAD,GAAQD,GADH;AAEL,WAAE,qCAAF,GAAyC;AACvC,aAACC,IAAD,GAAQQ;AAD+B;AAFpC,SAAP;AAMD;;AACD,UAAIJ,IAAJ,EAAU;AACR,eAAO;AACL,WAACA,IAAI,CAACQ,OAAL,CAAa,IAAb,EAAmBd,WAAnB,CAAD,GAAmCU,iBAD9B;AAEL,WAAE,GAAER,IAAK,KAAII,IAAI,CAACQ,OAAL,CAAa,IAAb,EAAmBd,WAAnB,CAAgC,EAA7C,GAAiDC;AAF5C,SAAP;AAID;;AACD,aAAO;AACL,SAACC,IAAD,GAAQ,EACN,GAAGD,GADG;AAEN,aAAGS;AAFG;AADH,OAAP;AAMD;;AACD,QAAIJ,IAAI,IAAIA,IAAI,KAAK,OAArB,EAA8B;AAC5B,aAAQ,GAAEJ,IAAK,KAAII,IAAI,CAACQ,OAAL,CAAa,IAAb,EAAmBC,MAAM,CAACf,WAAD,CAAzB,CAAwC,EAA3D;AACD;AACF,GA/BD,MA+BO,IAAIA,WAAJ,EAAiB;AACtB,QAAIM,IAAI,KAAK,OAAb,EAAsB;AACpB,aAAO;AACL,SAAE,iCAAgCS,MAAM,CAACf,WAAD,CAAc,GAAtD,GAA2D;AACzD,WAACE,IAAD,GAAQD;AADiD;AADtD,OAAP;AAKD;;AACD,QAAIK,IAAJ,EAAU;AACR,aAAOA,IAAI,CAACQ,OAAL,CAAa,IAAb,EAAmBC,MAAM,CAACf,WAAD,CAAzB,CAAP;AACD;AACF;;AACD,SAAOE,IAAP;AACD,CA1DD","sourcesContent":["import excludeVariablesFromRoot from \"./excludeVariablesFromRoot.js\";\nexport default theme => (colorScheme, css) => {\n  const root = theme.rootSelector || ':root';\n  const selector = theme.colorSchemeSelector;\n  let rule = selector;\n  if (selector === 'class') {\n    rule = '.%s';\n  }\n  if (selector === 'data') {\n    rule = '[data-%s]';\n  }\n  if (selector?.startsWith('data-') && !selector.includes('%s')) {\n    // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n    rule = `[${selector}=\"%s\"]`;\n  }\n  if (theme.defaultColorScheme === colorScheme) {\n    if (colorScheme === 'dark') {\n      const excludedVariables = {};\n      excludeVariablesFromRoot(theme.cssVarPrefix).forEach(cssVar => {\n        excludedVariables[cssVar] = css[cssVar];\n        delete css[cssVar];\n      });\n      if (rule === 'media') {\n        return {\n          [root]: css,\n          [`@media (prefers-color-scheme: dark)`]: {\n            [root]: excludedVariables\n          }\n        };\n      }\n      if (rule) {\n        return {\n          [rule.replace('%s', colorScheme)]: excludedVariables,\n          [`${root}, ${rule.replace('%s', colorScheme)}`]: css\n        };\n      }\n      return {\n        [root]: {\n          ...css,\n          ...excludedVariables\n        }\n      };\n    }\n    if (rule && rule !== 'media') {\n      return `${root}, ${rule.replace('%s', String(colorScheme))}`;\n    }\n  } else if (colorScheme) {\n    if (rule === 'media') {\n      return {\n        [`@media (prefers-color-scheme: ${String(colorScheme)})`]: {\n          [root]: css\n        }\n      };\n    }\n    if (rule) {\n      return rule.replace('%s', String(colorScheme));\n    }\n  }\n  return root;\n};"]},"metadata":{},"sourceType":"module"}