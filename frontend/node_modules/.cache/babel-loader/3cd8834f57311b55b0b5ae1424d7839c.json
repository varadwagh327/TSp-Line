{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useTransitionStateManager } from '../useTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * A utility component that hooks up to the Base UI transitions API and\n * applies a CSS transition to its children when necessary.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/)\n *\n * API:\n *\n * - [CssTransition API](https://mui.com/base-ui/react-transitions/components-api/#css-transition)\n */\n\nconst CssTransition = /*#__PURE__*/React.forwardRef(function CssTransition(props, forwardedRef) {\n  const {\n    children,\n    className,\n    lastTransitionedPropertyOnExit,\n    enterClassName,\n    exitClassName,\n    ...other\n  } = props;\n  const {\n    requestedEnter,\n    onExited\n  } = useTransitionStateManager();\n  const [isEntering, setIsEntering] = React.useState(false); // The `isEntering` state (which is used to determine the right CSS class to apply)\n  // is updated slightly (one animation frame) after the `requestedEnter` state is updated.\n  // Thanks to this, elements that are mounted will have their enter transition applied\n  // (if the `enterClassName` was applied when the element was mounted, the transition would not be fired).\n\n  React.useEffect(() => {\n    if (requestedEnter) {\n      requestAnimationFrame(() => {\n        setIsEntering(true);\n      });\n    } else {\n      setIsEntering(false);\n    }\n  }, [requestedEnter]);\n  const handleTransitionEnd = React.useCallback(event => {\n    if (!requestedEnter && (lastTransitionedPropertyOnExit == null || event.propertyName === lastTransitionedPropertyOnExit)) {\n      onExited();\n    }\n  }, [onExited, requestedEnter, lastTransitionedPropertyOnExit]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    onTransitionEnd: handleTransitionEnd,\n    className: clsx(className, isEntering ? enterClassName : exitClassName),\n    ...other,\n    ref: forwardedRef,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CssTransition.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  enterClassName: PropTypes.string,\n  exitClassName: PropTypes.string,\n  lastTransitionedPropertyOnEnter: PropTypes.string,\n  lastTransitionedPropertyOnExit: PropTypes.string\n} : void 0;\nexport { CssTransition };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Transitions/CssTransition.js"],"names":["React","PropTypes","clsx","useTransitionStateManager","jsx","_jsx","CssTransition","forwardRef","props","forwardedRef","children","className","lastTransitionedPropertyOnExit","enterClassName","exitClassName","other","requestedEnter","onExited","isEntering","setIsEntering","useState","useEffect","requestAnimationFrame","handleTransitionEnd","useCallback","event","propertyName","onTransitionEnd","ref","process","env","NODE_ENV","propTypes","node","string","lastTransitionedPropertyOnEnter"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,aAAaN,KAAK,CAACO,UAAN,CAAiB,SAASD,aAAT,CAAuBE,KAAvB,EAA8BC,YAA9B,EAA4C;AAC9F,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,8BAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,aALI;AAMJ,OAAGC;AANC,MAOFP,KAPJ;AAQA,QAAM;AACJQ,IAAAA,cADI;AAEJC,IAAAA;AAFI,MAGFd,yBAAyB,EAH7B;AAIA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BnB,KAAK,CAACoB,QAAN,CAAe,KAAf,CAApC,CAb8F,CAe9F;AACA;AACA;AACA;;AACApB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QAAIL,cAAJ,EAAoB;AAClBM,MAAAA,qBAAqB,CAAC,MAAM;AAC1BH,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAFoB,CAArB;AAGD,KAJD,MAIO;AACLA,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GARD,EAQG,CAACH,cAAD,CARH;AASA,QAAMO,mBAAmB,GAAGvB,KAAK,CAACwB,WAAN,CAAkBC,KAAK,IAAI;AACrD,QAAI,CAACT,cAAD,KAAoBJ,8BAA8B,IAAI,IAAlC,IAA0Ca,KAAK,CAACC,YAAN,KAAuBd,8BAArF,CAAJ,EAA0H;AACxHK,MAAAA,QAAQ;AACT;AACF,GAJ2B,EAIzB,CAACA,QAAD,EAAWD,cAAX,EAA2BJ,8BAA3B,CAJyB,CAA5B;AAKA,SAAO,aAAaP,IAAI,CAAC,KAAD,EAAQ;AAC9BsB,IAAAA,eAAe,EAAEJ,mBADa;AAE9BZ,IAAAA,SAAS,EAAET,IAAI,CAACS,SAAD,EAAYO,UAAU,GAAGL,cAAH,GAAoBC,aAA1C,CAFe;AAG9B,OAAGC,KAH2B;AAI9Ba,IAAAA,GAAG,EAAEnB,YAJyB;AAK9BC,IAAAA,QAAQ,EAAEA;AALoB,GAAR,CAAxB;AAOD,CAxCkC,CAAnC;AAyCAmB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCzB,aAAa,CAAC0B,SAAd,GAA0B;AAChEtB,EAAAA,QAAQ,EAAET,SAAS,CAACgC,IAD4C;AAEhEtB,EAAAA,SAAS,EAAEV,SAAS,CAACiC,MAF2C;AAGhErB,EAAAA,cAAc,EAAEZ,SAAS,CAACiC,MAHsC;AAIhEpB,EAAAA,aAAa,EAAEb,SAAS,CAACiC,MAJuC;AAKhEC,EAAAA,+BAA+B,EAAElC,SAAS,CAACiC,MALqB;AAMhEtB,EAAAA,8BAA8B,EAAEX,SAAS,CAACiC;AANsB,CAAlE,GAOI,KAAK,CAPT;AAQA,SAAS5B,aAAT","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useTransitionStateManager } from '../useTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * A utility component that hooks up to the Base UI transitions API and\n * applies a CSS transition to its children when necessary.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/)\n *\n * API:\n *\n * - [CssTransition API](https://mui.com/base-ui/react-transitions/components-api/#css-transition)\n */\nconst CssTransition = /*#__PURE__*/React.forwardRef(function CssTransition(props, forwardedRef) {\n  const {\n    children,\n    className,\n    lastTransitionedPropertyOnExit,\n    enterClassName,\n    exitClassName,\n    ...other\n  } = props;\n  const {\n    requestedEnter,\n    onExited\n  } = useTransitionStateManager();\n  const [isEntering, setIsEntering] = React.useState(false);\n\n  // The `isEntering` state (which is used to determine the right CSS class to apply)\n  // is updated slightly (one animation frame) after the `requestedEnter` state is updated.\n  // Thanks to this, elements that are mounted will have their enter transition applied\n  // (if the `enterClassName` was applied when the element was mounted, the transition would not be fired).\n  React.useEffect(() => {\n    if (requestedEnter) {\n      requestAnimationFrame(() => {\n        setIsEntering(true);\n      });\n    } else {\n      setIsEntering(false);\n    }\n  }, [requestedEnter]);\n  const handleTransitionEnd = React.useCallback(event => {\n    if (!requestedEnter && (lastTransitionedPropertyOnExit == null || event.propertyName === lastTransitionedPropertyOnExit)) {\n      onExited();\n    }\n  }, [onExited, requestedEnter, lastTransitionedPropertyOnExit]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    onTransitionEnd: handleTransitionEnd,\n    className: clsx(className, isEntering ? enterClassName : exitClassName),\n    ...other,\n    ref: forwardedRef,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CssTransition.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  enterClassName: PropTypes.string,\n  exitClassName: PropTypes.string,\n  lastTransitionedPropertyOnEnter: PropTypes.string,\n  lastTransitionedPropertyOnExit: PropTypes.string\n} : void 0;\nexport { CssTransition };"]},"metadata":{},"sourceType":"module"}