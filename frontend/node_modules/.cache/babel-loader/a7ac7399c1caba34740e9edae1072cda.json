{"ast":null,"code":"import { rectToClientRect, detectOverflow as detectOverflow$1, offset as offset$1, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element); // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height; // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\n\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\n\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n} // If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\n\n\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n\n  return rect.left + leftScroll;\n} // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\n\n\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n} // Returns the inner client rect, subtracting scrollbars if present.\n\n\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = { ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n\n  return rectToClientRect(rect);\n}\n\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n} // A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\n\n\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element; // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n\n    currentNode = getParentNode(currentNode);\n  }\n\n  cache.set(element, result);\n  return result;\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\n\n\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n      // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  let htmlX = 0;\n  let htmlY = 0;\n\n  if (documentElement && !isOffsetParentAnElement && !isFixed) {\n    const htmlRect = documentElement.getBoundingClientRect();\n    htmlY = htmlRect.top + scroll.scrollTop;\n    htmlX = htmlRect.left + scroll.scrollLeft - // RTL <body> scrollbar.\n    getWindowScrollBarX(documentElement, htmlRect);\n  }\n\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlX;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlY;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n\n  if (polyfill) {\n    return polyfill(element);\n  }\n\n  let rawOffsetParent = element.offsetParent; // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n\n  return rawOffsetParent;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n\n  if (isTopLayer(element)) {\n    return win;\n  }\n\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n\n    return win;\n  }\n\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n}; // https://samthor.au/2021/observing-dom/\n\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n\n  function cleanup() {\n    var _io;\n\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n\n    if (!skip) {\n      onMove();\n    }\n\n    if (!width || !height) {\n      return;\n    }\n\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n\n      isFirstUpdate = false;\n    } // Older browsers don't support a `document` as the root and will throw an\n    // error.\n\n\n    try {\n      io = new IntersectionObserver(handleObserve, { ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n\n    io.observe(element);\n  }\n\n  refresh(true);\n  return cleanup;\n}\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\n\n\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n\n      update();\n    });\n\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n\n    resizeObserver.observe(floating);\n  }\n\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n\n  if (animationFrame) {\n    frameLoop();\n  }\n\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n\n  update();\n  return () => {\n    var _resizeObserver2;\n\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\n\n\nconst detectOverflow = detectOverflow$1;\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\n\nconst offset = offset$1;\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\n\nconst autoPlacement = autoPlacement$1;\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\n\nconst shift = shift$1;\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\n\nconst flip = flip$1;\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\n\nconst size = size$1;\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\n\nconst hide = hide$1;\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\n\nconst arrow = arrow$1;\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\n\nconst inline = inline$1;\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\n\nconst limitShift = limitShift$1;\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\n\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = { ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, { ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"],"names":["rectToClientRect","detectOverflow","detectOverflow$1","offset","offset$1","autoPlacement","autoPlacement$1","shift","shift$1","flip","flip$1","size","size$1","hide","hide$1","arrow","arrow$1","inline","inline$1","limitShift","limitShift$1","computePosition","computePosition$1","round","createCoords","max","min","floor","getComputedStyle","isHTMLElement","isElement","getWindow","isWebKit","getFrameElement","getDocumentElement","isTopLayer","getNodeName","isOverflowElement","getNodeScroll","getOverflowAncestors","getParentNode","isLastTraversableNode","isContainingBlock","isTableElement","getContainingBlock","getCssDimensions","element","css","width","parseFloat","height","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","contextElement","getScale","domElement","rect","getBoundingClientRect","x","y","Number","isFinite","noOffsets","getVisualOffsets","win","visualViewport","offsetLeft","offsetTop","shouldAddVisualOffsets","isFixed","floatingOffsetParent","includeScale","isFixedStrategy","offsetParent","clientRect","scale","visualOffsets","left","top","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","convertOffsetParentRelativeRectToViewportRelativeRect","_ref","elements","strategy","documentElement","topLayer","floating","scroll","scrollLeft","scrollTop","offsets","isOffsetParentAnElement","offsetRect","getClientRects","Array","from","getWindowScrollBarX","leftScroll","getDocumentRect","html","body","ownerDocument","scrollWidth","clientWidth","scrollHeight","clientHeight","direction","getViewportRect","visualViewportBased","getInnerBoundingClientRect","getClientRectFromClippingAncestor","clippingAncestor","hasFixedPositionAncestor","stopNode","parentNode","position","getClippingElementAncestors","cache","cachedResult","get","result","filter","el","currentContainingBlockComputedStyle","elementIsFixed","currentNode","computedStyle","currentNodeIsContaining","shouldDropCurrentNode","includes","ancestor","set","getClippingRect","boundary","rootBoundary","elementClippingAncestors","_c","concat","clippingAncestors","firstClippingAncestor","clippingRect","reduce","accRect","right","bottom","getDimensions","getRectRelativeToOffsetParent","htmlX","htmlY","htmlRect","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","getOffsetParent","svgOffsetParent","getElementRects","data","getOffsetParentFn","getDimensionsFn","floatingDimensions","reference","isRTL","platform","observeMove","onMove","io","timeoutId","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","insetTop","insetRight","insetBottom","insetLeft","rootMargin","options","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","IntersectionObserver","e","observe","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","frameId","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","Map","mergedOptions","platformWithCache"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,cAAc,IAAIC,gBAA7C,EAA+DC,MAAM,IAAIC,QAAzE,EAAmFC,aAAa,IAAIC,eAApG,EAAqHC,KAAK,IAAIC,OAA9H,EAAuIC,IAAI,IAAIC,MAA/I,EAAuJC,IAAI,IAAIC,MAA/J,EAAuKC,IAAI,IAAIC,MAA/K,EAAuLC,KAAK,IAAIC,OAAhM,EAAyMC,MAAM,IAAIC,QAAnN,EAA6NC,UAAU,IAAIC,YAA3O,EAAyPC,eAAe,IAAIC,iBAA5Q,QAAqS,mBAArS;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,GAA9B,EAAmCC,GAAnC,EAAwCC,KAAxC,QAAqD,oBAArD;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,SAA1C,EAAqDC,SAArD,EAAgEC,QAAhE,EAA0EC,eAA1E,EAA2FC,kBAA3F,EAA+GC,UAA/G,EAA2HC,WAA3H,EAAwIC,iBAAxI,EAA2JC,aAA3J,EAA0KC,oBAA1K,EAAgMC,aAAhM,EAA+MC,qBAA/M,EAAsOC,iBAAtO,EAAyPC,cAAzP,EAAyQC,kBAAzQ,QAAmS,wBAAnS;AACA,SAASL,oBAAT,QAAqC,wBAArC;;AAEA,SAASM,gBAAT,CAA0BC,OAA1B,EAAmC;AACjC,QAAMC,GAAG,GAAGnB,gBAAgB,CAACkB,OAAD,CAA5B,CADiC,CAEjC;AACA;;AACA,MAAIE,KAAK,GAAGC,UAAU,CAACF,GAAG,CAACC,KAAL,CAAV,IAAyB,CAArC;AACA,MAAIE,MAAM,GAAGD,UAAU,CAACF,GAAG,CAACG,MAAL,CAAV,IAA0B,CAAvC;AACA,QAAMC,SAAS,GAAGtB,aAAa,CAACiB,OAAD,CAA/B;AACA,QAAMM,WAAW,GAAGD,SAAS,GAAGL,OAAO,CAACM,WAAX,GAAyBJ,KAAtD;AACA,QAAMK,YAAY,GAAGF,SAAS,GAAGL,OAAO,CAACO,YAAX,GAA0BH,MAAxD;AACA,QAAMI,cAAc,GAAG/B,KAAK,CAACyB,KAAD,CAAL,KAAiBI,WAAjB,IAAgC7B,KAAK,CAAC2B,MAAD,CAAL,KAAkBG,YAAzE;;AACA,MAAIC,cAAJ,EAAoB;AAClBN,IAAAA,KAAK,GAAGI,WAAR;AACAF,IAAAA,MAAM,GAAGG,YAAT;AACD;;AACD,SAAO;AACLL,IAAAA,KADK;AAELE,IAAAA,MAFK;AAGLK,IAAAA,CAAC,EAAED;AAHE,GAAP;AAKD;;AAED,SAASE,aAAT,CAAuBV,OAAvB,EAAgC;AAC9B,SAAO,CAAChB,SAAS,CAACgB,OAAD,CAAV,GAAsBA,OAAO,CAACW,cAA9B,GAA+CX,OAAtD;AACD;;AAED,SAASY,QAAT,CAAkBZ,OAAlB,EAA2B;AACzB,QAAMa,UAAU,GAAGH,aAAa,CAACV,OAAD,CAAhC;;AACA,MAAI,CAACjB,aAAa,CAAC8B,UAAD,CAAlB,EAAgC;AAC9B,WAAOnC,YAAY,CAAC,CAAD,CAAnB;AACD;;AACD,QAAMoC,IAAI,GAAGD,UAAU,CAACE,qBAAX,EAAb;AACA,QAAM;AACJb,IAAAA,KADI;AAEJE,IAAAA,MAFI;AAGJK,IAAAA;AAHI,MAIFV,gBAAgB,CAACc,UAAD,CAJpB;AAKA,MAAIG,CAAC,GAAG,CAACP,CAAC,GAAGhC,KAAK,CAACqC,IAAI,CAACZ,KAAN,CAAR,GAAuBY,IAAI,CAACZ,KAA9B,IAAuCA,KAA/C;AACA,MAAIe,CAAC,GAAG,CAACR,CAAC,GAAGhC,KAAK,CAACqC,IAAI,CAACV,MAAN,CAAR,GAAwBU,IAAI,CAACV,MAA/B,IAAyCA,MAAjD,CAZyB,CAczB;;AAEA,MAAI,CAACY,CAAD,IAAM,CAACE,MAAM,CAACC,QAAP,CAAgBH,CAAhB,CAAX,EAA+B;AAC7BA,IAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,MAAI,CAACC,CAAD,IAAM,CAACC,MAAM,CAACC,QAAP,CAAgBF,CAAhB,CAAX,EAA+B;AAC7BA,IAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,SAAO;AACLD,IAAAA,CADK;AAELC,IAAAA;AAFK,GAAP;AAID;;AAED,MAAMG,SAAS,GAAG,aAAa1C,YAAY,CAAC,CAAD,CAA3C;;AACA,SAAS2C,gBAAT,CAA0BrB,OAA1B,EAAmC;AACjC,QAAMsB,GAAG,GAAGrC,SAAS,CAACe,OAAD,CAArB;;AACA,MAAI,CAACd,QAAQ,EAAT,IAAe,CAACoC,GAAG,CAACC,cAAxB,EAAwC;AACtC,WAAOH,SAAP;AACD;;AACD,SAAO;AACLJ,IAAAA,CAAC,EAAEM,GAAG,CAACC,cAAJ,CAAmBC,UADjB;AAELP,IAAAA,CAAC,EAAEK,GAAG,CAACC,cAAJ,CAAmBE;AAFjB,GAAP;AAID;;AACD,SAASC,sBAAT,CAAgC1B,OAAhC,EAAyC2B,OAAzC,EAAkDC,oBAAlD,EAAwE;AACtE,MAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,KAAV;AACD;;AACD,MAAI,CAACC,oBAAD,IAAyBD,OAAO,IAAIC,oBAAoB,KAAK3C,SAAS,CAACe,OAAD,CAA1E,EAAqF;AACnF,WAAO,KAAP;AACD;;AACD,SAAO2B,OAAP;AACD;;AAED,SAASZ,qBAAT,CAA+Bf,OAA/B,EAAwC6B,YAAxC,EAAsDC,eAAtD,EAAuEC,YAAvE,EAAqF;AACnF,MAAIF,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAC3BA,IAAAA,YAAY,GAAG,KAAf;AACD;;AACD,MAAIC,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAC9BA,IAAAA,eAAe,GAAG,KAAlB;AACD;;AACD,QAAME,UAAU,GAAGhC,OAAO,CAACe,qBAAR,EAAnB;AACA,QAAMF,UAAU,GAAGH,aAAa,CAACV,OAAD,CAAhC;AACA,MAAIiC,KAAK,GAAGvD,YAAY,CAAC,CAAD,CAAxB;;AACA,MAAImD,YAAJ,EAAkB;AAChB,QAAIE,YAAJ,EAAkB;AAChB,UAAI/C,SAAS,CAAC+C,YAAD,CAAb,EAA6B;AAC3BE,QAAAA,KAAK,GAAGrB,QAAQ,CAACmB,YAAD,CAAhB;AACD;AACF,KAJD,MAIO;AACLE,MAAAA,KAAK,GAAGrB,QAAQ,CAACZ,OAAD,CAAhB;AACD;AACF;;AACD,QAAMkC,aAAa,GAAGR,sBAAsB,CAACb,UAAD,EAAaiB,eAAb,EAA8BC,YAA9B,CAAtB,GAAoEV,gBAAgB,CAACR,UAAD,CAApF,GAAmGnC,YAAY,CAAC,CAAD,CAArI;AACA,MAAIsC,CAAC,GAAG,CAACgB,UAAU,CAACG,IAAX,GAAkBD,aAAa,CAAClB,CAAjC,IAAsCiB,KAAK,CAACjB,CAApD;AACA,MAAIC,CAAC,GAAG,CAACe,UAAU,CAACI,GAAX,GAAiBF,aAAa,CAACjB,CAAhC,IAAqCgB,KAAK,CAAChB,CAAnD;AACA,MAAIf,KAAK,GAAG8B,UAAU,CAAC9B,KAAX,GAAmB+B,KAAK,CAACjB,CAArC;AACA,MAAIZ,MAAM,GAAG4B,UAAU,CAAC5B,MAAX,GAAoB6B,KAAK,CAAChB,CAAvC;;AACA,MAAIJ,UAAJ,EAAgB;AACd,UAAMS,GAAG,GAAGrC,SAAS,CAAC4B,UAAD,CAArB;AACA,UAAMwB,SAAS,GAAGN,YAAY,IAAI/C,SAAS,CAAC+C,YAAD,CAAzB,GAA0C9C,SAAS,CAAC8C,YAAD,CAAnD,GAAoEA,YAAtF;AACA,QAAIO,UAAU,GAAGhB,GAAjB;AACA,QAAIiB,aAAa,GAAGpD,eAAe,CAACmD,UAAD,CAAnC;;AACA,WAAOC,aAAa,IAAIR,YAAjB,IAAiCM,SAAS,KAAKC,UAAtD,EAAkE;AAChE,YAAME,WAAW,GAAG5B,QAAQ,CAAC2B,aAAD,CAA5B;AACA,YAAME,UAAU,GAAGF,aAAa,CAACxB,qBAAd,EAAnB;AACA,YAAMd,GAAG,GAAGnB,gBAAgB,CAACyD,aAAD,CAA5B;AACA,YAAMJ,IAAI,GAAGM,UAAU,CAACN,IAAX,GAAkB,CAACI,aAAa,CAACG,UAAd,GAA2BvC,UAAU,CAACF,GAAG,CAAC0C,WAAL,CAAtC,IAA2DH,WAAW,CAACxB,CAAtG;AACA,YAAMoB,GAAG,GAAGK,UAAU,CAACL,GAAX,GAAiB,CAACG,aAAa,CAACK,SAAd,GAA0BzC,UAAU,CAACF,GAAG,CAAC4C,UAAL,CAArC,IAAyDL,WAAW,CAACvB,CAAlG;AACAD,MAAAA,CAAC,IAAIwB,WAAW,CAACxB,CAAjB;AACAC,MAAAA,CAAC,IAAIuB,WAAW,CAACvB,CAAjB;AACAf,MAAAA,KAAK,IAAIsC,WAAW,CAACxB,CAArB;AACAZ,MAAAA,MAAM,IAAIoC,WAAW,CAACvB,CAAtB;AACAD,MAAAA,CAAC,IAAImB,IAAL;AACAlB,MAAAA,CAAC,IAAImB,GAAL;AACAE,MAAAA,UAAU,GAAGrD,SAAS,CAACsD,aAAD,CAAtB;AACAA,MAAAA,aAAa,GAAGpD,eAAe,CAACmD,UAAD,CAA/B;AACD;AACF;;AACD,SAAOpF,gBAAgB,CAAC;AACtBgD,IAAAA,KADsB;AAEtBE,IAAAA,MAFsB;AAGtBY,IAAAA,CAHsB;AAItBC,IAAAA;AAJsB,GAAD,CAAvB;AAMD;;AAED,SAAS6B,qDAAT,CAA+DC,IAA/D,EAAqE;AACnE,MAAI;AACFC,IAAAA,QADE;AAEFlC,IAAAA,IAFE;AAGFiB,IAAAA,YAHE;AAIFkB,IAAAA;AAJE,MAKAF,IALJ;AAMA,QAAMpB,OAAO,GAAGsB,QAAQ,KAAK,OAA7B;AACA,QAAMC,eAAe,GAAG9D,kBAAkB,CAAC2C,YAAD,CAA1C;AACA,QAAMoB,QAAQ,GAAGH,QAAQ,GAAG3D,UAAU,CAAC2D,QAAQ,CAACI,QAAV,CAAb,GAAmC,KAA5D;;AACA,MAAIrB,YAAY,KAAKmB,eAAjB,IAAoCC,QAAQ,IAAIxB,OAApD,EAA6D;AAC3D,WAAOb,IAAP;AACD;;AACD,MAAIuC,MAAM,GAAG;AACXC,IAAAA,UAAU,EAAE,CADD;AAEXC,IAAAA,SAAS,EAAE;AAFA,GAAb;AAIA,MAAItB,KAAK,GAAGvD,YAAY,CAAC,CAAD,CAAxB;AACA,QAAM8E,OAAO,GAAG9E,YAAY,CAAC,CAAD,CAA5B;AACA,QAAM+E,uBAAuB,GAAG1E,aAAa,CAACgD,YAAD,CAA7C;;AACA,MAAI0B,uBAAuB,IAAI,CAACA,uBAAD,IAA4B,CAAC9B,OAA5D,EAAqE;AACnE,QAAIrC,WAAW,CAACyC,YAAD,CAAX,KAA8B,MAA9B,IAAwCxC,iBAAiB,CAAC2D,eAAD,CAA7D,EAAgF;AAC9EG,MAAAA,MAAM,GAAG7D,aAAa,CAACuC,YAAD,CAAtB;AACD;;AACD,QAAIhD,aAAa,CAACgD,YAAD,CAAjB,EAAiC;AAC/B,YAAM2B,UAAU,GAAG3C,qBAAqB,CAACgB,YAAD,CAAxC;AACAE,MAAAA,KAAK,GAAGrB,QAAQ,CAACmB,YAAD,CAAhB;AACAyB,MAAAA,OAAO,CAACxC,CAAR,GAAY0C,UAAU,CAAC1C,CAAX,GAAee,YAAY,CAACW,UAAxC;AACAc,MAAAA,OAAO,CAACvC,CAAR,GAAYyC,UAAU,CAACzC,CAAX,GAAec,YAAY,CAACa,SAAxC;AACD;AACF;;AACD,SAAO;AACL1C,IAAAA,KAAK,EAAEY,IAAI,CAACZ,KAAL,GAAa+B,KAAK,CAACjB,CADrB;AAELZ,IAAAA,MAAM,EAAEU,IAAI,CAACV,MAAL,GAAc6B,KAAK,CAAChB,CAFvB;AAGLD,IAAAA,CAAC,EAAEF,IAAI,CAACE,CAAL,GAASiB,KAAK,CAACjB,CAAf,GAAmBqC,MAAM,CAACC,UAAP,GAAoBrB,KAAK,CAACjB,CAA7C,GAAiDwC,OAAO,CAACxC,CAHvD;AAILC,IAAAA,CAAC,EAAEH,IAAI,CAACG,CAAL,GAASgB,KAAK,CAAChB,CAAf,GAAmBoC,MAAM,CAACE,SAAP,GAAmBtB,KAAK,CAAChB,CAA5C,GAAgDuC,OAAO,CAACvC;AAJtD,GAAP;AAMD;;AAED,SAAS0C,cAAT,CAAwB3D,OAAxB,EAAiC;AAC/B,SAAO4D,KAAK,CAACC,IAAN,CAAW7D,OAAO,CAAC2D,cAAR,EAAX,CAAP;AACD,C,CAED;AACA;;;AACA,SAASG,mBAAT,CAA6B9D,OAA7B,EAAsCc,IAAtC,EAA4C;AAC1C,QAAMiD,UAAU,GAAGvE,aAAa,CAACQ,OAAD,CAAb,CAAuBsD,UAA1C;;AACA,MAAI,CAACxC,IAAL,EAAW;AACT,WAAOC,qBAAqB,CAAC3B,kBAAkB,CAACY,OAAD,CAAnB,CAArB,CAAmDmC,IAAnD,GAA0D4B,UAAjE;AACD;;AACD,SAAOjD,IAAI,CAACqB,IAAL,GAAY4B,UAAnB;AACD,C,CAED;AACA;;;AACA,SAASC,eAAT,CAAyBhE,OAAzB,EAAkC;AAChC,QAAMiE,IAAI,GAAG7E,kBAAkB,CAACY,OAAD,CAA/B;AACA,QAAMqD,MAAM,GAAG7D,aAAa,CAACQ,OAAD,CAA5B;AACA,QAAMkE,IAAI,GAAGlE,OAAO,CAACmE,aAAR,CAAsBD,IAAnC;AACA,QAAMhE,KAAK,GAAGvB,GAAG,CAACsF,IAAI,CAACG,WAAN,EAAmBH,IAAI,CAACI,WAAxB,EAAqCH,IAAI,CAACE,WAA1C,EAAuDF,IAAI,CAACG,WAA5D,CAAjB;AACA,QAAMjE,MAAM,GAAGzB,GAAG,CAACsF,IAAI,CAACK,YAAN,EAAoBL,IAAI,CAACM,YAAzB,EAAuCL,IAAI,CAACI,YAA5C,EAA0DJ,IAAI,CAACK,YAA/D,CAAlB;AACA,MAAIvD,CAAC,GAAG,CAACqC,MAAM,CAACC,UAAR,GAAqBQ,mBAAmB,CAAC9D,OAAD,CAAhD;AACA,QAAMiB,CAAC,GAAG,CAACoC,MAAM,CAACE,SAAlB;;AACA,MAAIzE,gBAAgB,CAACoF,IAAD,CAAhB,CAAuBM,SAAvB,KAAqC,KAAzC,EAAgD;AAC9CxD,IAAAA,CAAC,IAAIrC,GAAG,CAACsF,IAAI,CAACI,WAAN,EAAmBH,IAAI,CAACG,WAAxB,CAAH,GAA0CnE,KAA/C;AACD;;AACD,SAAO;AACLA,IAAAA,KADK;AAELE,IAAAA,MAFK;AAGLY,IAAAA,CAHK;AAILC,IAAAA;AAJK,GAAP;AAMD;;AAED,SAASwD,eAAT,CAAyBzE,OAAzB,EAAkCiD,QAAlC,EAA4C;AAC1C,QAAM3B,GAAG,GAAGrC,SAAS,CAACe,OAAD,CAArB;AACA,QAAMiE,IAAI,GAAG7E,kBAAkB,CAACY,OAAD,CAA/B;AACA,QAAMuB,cAAc,GAAGD,GAAG,CAACC,cAA3B;AACA,MAAIrB,KAAK,GAAG+D,IAAI,CAACI,WAAjB;AACA,MAAIjE,MAAM,GAAG6D,IAAI,CAACM,YAAlB;AACA,MAAIvD,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,MAAIM,cAAJ,EAAoB;AAClBrB,IAAAA,KAAK,GAAGqB,cAAc,CAACrB,KAAvB;AACAE,IAAAA,MAAM,GAAGmB,cAAc,CAACnB,MAAxB;AACA,UAAMsE,mBAAmB,GAAGxF,QAAQ,EAApC;;AACA,QAAI,CAACwF,mBAAD,IAAwBA,mBAAmB,IAAIzB,QAAQ,KAAK,OAAhE,EAAyE;AACvEjC,MAAAA,CAAC,GAAGO,cAAc,CAACC,UAAnB;AACAP,MAAAA,CAAC,GAAGM,cAAc,CAACE,SAAnB;AACD;AACF;;AACD,SAAO;AACLvB,IAAAA,KADK;AAELE,IAAAA,MAFK;AAGLY,IAAAA,CAHK;AAILC,IAAAA;AAJK,GAAP;AAMD,C,CAED;;;AACA,SAAS0D,0BAAT,CAAoC3E,OAApC,EAA6CiD,QAA7C,EAAuD;AACrD,QAAMjB,UAAU,GAAGjB,qBAAqB,CAACf,OAAD,EAAU,IAAV,EAAgBiD,QAAQ,KAAK,OAA7B,CAAxC;AACA,QAAMb,GAAG,GAAGJ,UAAU,CAACI,GAAX,GAAiBpC,OAAO,CAAC4C,SAArC;AACA,QAAMT,IAAI,GAAGH,UAAU,CAACG,IAAX,GAAkBnC,OAAO,CAAC0C,UAAvC;AACA,QAAMT,KAAK,GAAGlD,aAAa,CAACiB,OAAD,CAAb,GAAyBY,QAAQ,CAACZ,OAAD,CAAjC,GAA6CtB,YAAY,CAAC,CAAD,CAAvE;AACA,QAAMwB,KAAK,GAAGF,OAAO,CAACqE,WAAR,GAAsBpC,KAAK,CAACjB,CAA1C;AACA,QAAMZ,MAAM,GAAGJ,OAAO,CAACuE,YAAR,GAAuBtC,KAAK,CAAChB,CAA5C;AACA,QAAMD,CAAC,GAAGmB,IAAI,GAAGF,KAAK,CAACjB,CAAvB;AACA,QAAMC,CAAC,GAAGmB,GAAG,GAAGH,KAAK,CAAChB,CAAtB;AACA,SAAO;AACLf,IAAAA,KADK;AAELE,IAAAA,MAFK;AAGLY,IAAAA,CAHK;AAILC,IAAAA;AAJK,GAAP;AAMD;;AACD,SAAS2D,iCAAT,CAA2C5E,OAA3C,EAAoD6E,gBAApD,EAAsE5B,QAAtE,EAAgF;AAC9E,MAAInC,IAAJ;;AACA,MAAI+D,gBAAgB,KAAK,UAAzB,EAAqC;AACnC/D,IAAAA,IAAI,GAAG2D,eAAe,CAACzE,OAAD,EAAUiD,QAAV,CAAtB;AACD,GAFD,MAEO,IAAI4B,gBAAgB,KAAK,UAAzB,EAAqC;AAC1C/D,IAAAA,IAAI,GAAGkD,eAAe,CAAC5E,kBAAkB,CAACY,OAAD,CAAnB,CAAtB;AACD,GAFM,MAEA,IAAIhB,SAAS,CAAC6F,gBAAD,CAAb,EAAiC;AACtC/D,IAAAA,IAAI,GAAG6D,0BAA0B,CAACE,gBAAD,EAAmB5B,QAAnB,CAAjC;AACD,GAFM,MAEA;AACL,UAAMf,aAAa,GAAGb,gBAAgB,CAACrB,OAAD,CAAtC;AACAc,IAAAA,IAAI,GAAG,EACL,GAAG+D,gBADE;AAEL7D,MAAAA,CAAC,EAAE6D,gBAAgB,CAAC7D,CAAjB,GAAqBkB,aAAa,CAAClB,CAFjC;AAGLC,MAAAA,CAAC,EAAE4D,gBAAgB,CAAC5D,CAAjB,GAAqBiB,aAAa,CAACjB;AAHjC,KAAP;AAKD;;AACD,SAAO/D,gBAAgB,CAAC4D,IAAD,CAAvB;AACD;;AACD,SAASgE,wBAAT,CAAkC9E,OAAlC,EAA2C+E,QAA3C,EAAqD;AACnD,QAAMC,UAAU,GAAGtF,aAAa,CAACM,OAAD,CAAhC;;AACA,MAAIgF,UAAU,KAAKD,QAAf,IAA2B,CAAC/F,SAAS,CAACgG,UAAD,CAArC,IAAqDrF,qBAAqB,CAACqF,UAAD,CAA9E,EAA4F;AAC1F,WAAO,KAAP;AACD;;AACD,SAAOlG,gBAAgB,CAACkG,UAAD,CAAhB,CAA6BC,QAA7B,KAA0C,OAA1C,IAAqDH,wBAAwB,CAACE,UAAD,EAAaD,QAAb,CAApF;AACD,C,CAED;AACA;AACA;;;AACA,SAASG,2BAAT,CAAqClF,OAArC,EAA8CmF,KAA9C,EAAqD;AACnD,QAAMC,YAAY,GAAGD,KAAK,CAACE,GAAN,CAAUrF,OAAV,CAArB;;AACA,MAAIoF,YAAJ,EAAkB;AAChB,WAAOA,YAAP;AACD;;AACD,MAAIE,MAAM,GAAG7F,oBAAoB,CAACO,OAAD,EAAU,EAAV,EAAc,KAAd,CAApB,CAAyCuF,MAAzC,CAAgDC,EAAE,IAAIxG,SAAS,CAACwG,EAAD,CAAT,IAAiBlG,WAAW,CAACkG,EAAD,CAAX,KAAoB,MAA3F,CAAb;AACA,MAAIC,mCAAmC,GAAG,IAA1C;AACA,QAAMC,cAAc,GAAG5G,gBAAgB,CAACkB,OAAD,CAAhB,CAA0BiF,QAA1B,KAAuC,OAA9D;AACA,MAAIU,WAAW,GAAGD,cAAc,GAAGhG,aAAa,CAACM,OAAD,CAAhB,GAA4BA,OAA5D,CARmD,CAUnD;;AACA,SAAOhB,SAAS,CAAC2G,WAAD,CAAT,IAA0B,CAAChG,qBAAqB,CAACgG,WAAD,CAAvD,EAAsE;AACpE,UAAMC,aAAa,GAAG9G,gBAAgB,CAAC6G,WAAD,CAAtC;AACA,UAAME,uBAAuB,GAAGjG,iBAAiB,CAAC+F,WAAD,CAAjD;;AACA,QAAI,CAACE,uBAAD,IAA4BD,aAAa,CAACX,QAAd,KAA2B,OAA3D,EAAoE;AAClEQ,MAAAA,mCAAmC,GAAG,IAAtC;AACD;;AACD,UAAMK,qBAAqB,GAAGJ,cAAc,GAAG,CAACG,uBAAD,IAA4B,CAACJ,mCAAhC,GAAsE,CAACI,uBAAD,IAA4BD,aAAa,CAACX,QAAd,KAA2B,QAAvD,IAAmE,CAAC,CAACQ,mCAArE,IAA4G,CAAC,UAAD,EAAa,OAAb,EAAsBM,QAAtB,CAA+BN,mCAAmC,CAACR,QAAnE,CAA5G,IAA4L1F,iBAAiB,CAACoG,WAAD,CAAjB,IAAkC,CAACE,uBAAnC,IAA8Df,wBAAwB,CAAC9E,OAAD,EAAU2F,WAAV,CAApY;;AACA,QAAIG,qBAAJ,EAA2B;AACzB;AACAR,MAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcS,QAAQ,IAAIA,QAAQ,KAAKL,WAAvC,CAAT;AACD,KAHD,MAGO;AACL;AACAF,MAAAA,mCAAmC,GAAGG,aAAtC;AACD;;AACDD,IAAAA,WAAW,GAAGjG,aAAa,CAACiG,WAAD,CAA3B;AACD;;AACDR,EAAAA,KAAK,CAACc,GAAN,CAAUjG,OAAV,EAAmBsF,MAAnB;AACA,SAAOA,MAAP;AACD,C,CAED;AACA;;;AACA,SAASY,eAAT,CAAyBnD,IAAzB,EAA+B;AAC7B,MAAI;AACF/C,IAAAA,OADE;AAEFmG,IAAAA,QAFE;AAGFC,IAAAA,YAHE;AAIFnD,IAAAA;AAJE,MAKAF,IALJ;AAMA,QAAMsD,wBAAwB,GAAGF,QAAQ,KAAK,mBAAb,GAAmC9G,UAAU,CAACW,OAAD,CAAV,GAAsB,EAAtB,GAA2BkF,2BAA2B,CAAClF,OAAD,EAAU,KAAKsG,EAAf,CAAzF,GAA8G,GAAGC,MAAH,CAAUJ,QAAV,CAA/I;AACA,QAAMK,iBAAiB,GAAG,CAAC,GAAGH,wBAAJ,EAA8BD,YAA9B,CAA1B;AACA,QAAMK,qBAAqB,GAAGD,iBAAiB,CAAC,CAAD,CAA/C;AACA,QAAME,YAAY,GAAGF,iBAAiB,CAACG,MAAlB,CAAyB,CAACC,OAAD,EAAU/B,gBAAV,KAA+B;AAC3E,UAAM/D,IAAI,GAAG8D,iCAAiC,CAAC5E,OAAD,EAAU6E,gBAAV,EAA4B5B,QAA5B,CAA9C;AACA2D,IAAAA,OAAO,CAACxE,GAAR,GAAczD,GAAG,CAACmC,IAAI,CAACsB,GAAN,EAAWwE,OAAO,CAACxE,GAAnB,CAAjB;AACAwE,IAAAA,OAAO,CAACC,KAAR,GAAgBjI,GAAG,CAACkC,IAAI,CAAC+F,KAAN,EAAaD,OAAO,CAACC,KAArB,CAAnB;AACAD,IAAAA,OAAO,CAACE,MAAR,GAAiBlI,GAAG,CAACkC,IAAI,CAACgG,MAAN,EAAcF,OAAO,CAACE,MAAtB,CAApB;AACAF,IAAAA,OAAO,CAACzE,IAAR,GAAexD,GAAG,CAACmC,IAAI,CAACqB,IAAN,EAAYyE,OAAO,CAACzE,IAApB,CAAlB;AACA,WAAOyE,OAAP;AACD,GAPoB,EAOlBhC,iCAAiC,CAAC5E,OAAD,EAAUyG,qBAAV,EAAiCxD,QAAjC,CAPf,CAArB;AAQA,SAAO;AACL/C,IAAAA,KAAK,EAAEwG,YAAY,CAACG,KAAb,GAAqBH,YAAY,CAACvE,IADpC;AAEL/B,IAAAA,MAAM,EAAEsG,YAAY,CAACI,MAAb,GAAsBJ,YAAY,CAACtE,GAFtC;AAGLpB,IAAAA,CAAC,EAAE0F,YAAY,CAACvE,IAHX;AAILlB,IAAAA,CAAC,EAAEyF,YAAY,CAACtE;AAJX,GAAP;AAMD;;AAED,SAAS2E,aAAT,CAAuB/G,OAAvB,EAAgC;AAC9B,QAAM;AACJE,IAAAA,KADI;AAEJE,IAAAA;AAFI,MAGFL,gBAAgB,CAACC,OAAD,CAHpB;AAIA,SAAO;AACLE,IAAAA,KADK;AAELE,IAAAA;AAFK,GAAP;AAID;;AAED,SAAS4G,6BAAT,CAAuChH,OAAvC,EAAgD+B,YAAhD,EAA8DkB,QAA9D,EAAwE;AACtE,QAAMQ,uBAAuB,GAAG1E,aAAa,CAACgD,YAAD,CAA7C;AACA,QAAMmB,eAAe,GAAG9D,kBAAkB,CAAC2C,YAAD,CAA1C;AACA,QAAMJ,OAAO,GAAGsB,QAAQ,KAAK,OAA7B;AACA,QAAMnC,IAAI,GAAGC,qBAAqB,CAACf,OAAD,EAAU,IAAV,EAAgB2B,OAAhB,EAAyBI,YAAzB,CAAlC;AACA,MAAIsB,MAAM,GAAG;AACXC,IAAAA,UAAU,EAAE,CADD;AAEXC,IAAAA,SAAS,EAAE;AAFA,GAAb;AAIA,QAAMC,OAAO,GAAG9E,YAAY,CAAC,CAAD,CAA5B;;AACA,MAAI+E,uBAAuB,IAAI,CAACA,uBAAD,IAA4B,CAAC9B,OAA5D,EAAqE;AACnE,QAAIrC,WAAW,CAACyC,YAAD,CAAX,KAA8B,MAA9B,IAAwCxC,iBAAiB,CAAC2D,eAAD,CAA7D,EAAgF;AAC9EG,MAAAA,MAAM,GAAG7D,aAAa,CAACuC,YAAD,CAAtB;AACD;;AACD,QAAI0B,uBAAJ,EAA6B;AAC3B,YAAMC,UAAU,GAAG3C,qBAAqB,CAACgB,YAAD,EAAe,IAAf,EAAqBJ,OAArB,EAA8BI,YAA9B,CAAxC;AACAyB,MAAAA,OAAO,CAACxC,CAAR,GAAY0C,UAAU,CAAC1C,CAAX,GAAee,YAAY,CAACW,UAAxC;AACAc,MAAAA,OAAO,CAACvC,CAAR,GAAYyC,UAAU,CAACzC,CAAX,GAAec,YAAY,CAACa,SAAxC;AACD,KAJD,MAIO,IAAIM,eAAJ,EAAqB;AAC1B;AACA;AACAM,MAAAA,OAAO,CAACxC,CAAR,GAAY8C,mBAAmB,CAACZ,eAAD,CAA/B;AACD;AACF;;AACD,MAAI+D,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,MAAIhE,eAAe,IAAI,CAACO,uBAApB,IAA+C,CAAC9B,OAApD,EAA6D;AAC3D,UAAMwF,QAAQ,GAAGjE,eAAe,CAACnC,qBAAhB,EAAjB;AACAmG,IAAAA,KAAK,GAAGC,QAAQ,CAAC/E,GAAT,GAAeiB,MAAM,CAACE,SAA9B;AACA0D,IAAAA,KAAK,GAAGE,QAAQ,CAAChF,IAAT,GAAgBkB,MAAM,CAACC,UAAvB,GACR;AACAQ,IAAAA,mBAAmB,CAACZ,eAAD,EAAkBiE,QAAlB,CAFnB;AAGD;;AACD,QAAMnG,CAAC,GAAGF,IAAI,CAACqB,IAAL,GAAYkB,MAAM,CAACC,UAAnB,GAAgCE,OAAO,CAACxC,CAAxC,GAA4CiG,KAAtD;AACA,QAAMhG,CAAC,GAAGH,IAAI,CAACsB,GAAL,GAAWiB,MAAM,CAACE,SAAlB,GAA8BC,OAAO,CAACvC,CAAtC,GAA0CiG,KAApD;AACA,SAAO;AACLlG,IAAAA,CADK;AAELC,IAAAA,CAFK;AAGLf,IAAAA,KAAK,EAAEY,IAAI,CAACZ,KAHP;AAILE,IAAAA,MAAM,EAAEU,IAAI,CAACV;AAJR,GAAP;AAMD;;AAED,SAASgH,kBAAT,CAA4BpH,OAA5B,EAAqC;AACnC,SAAOlB,gBAAgB,CAACkB,OAAD,CAAhB,CAA0BiF,QAA1B,KAAuC,QAA9C;AACD;;AAED,SAASoC,mBAAT,CAA6BrH,OAA7B,EAAsCsH,QAAtC,EAAgD;AAC9C,MAAI,CAACvI,aAAa,CAACiB,OAAD,CAAd,IAA2BlB,gBAAgB,CAACkB,OAAD,CAAhB,CAA0BiF,QAA1B,KAAuC,OAAtE,EAA+E;AAC7E,WAAO,IAAP;AACD;;AACD,MAAIqC,QAAJ,EAAc;AACZ,WAAOA,QAAQ,CAACtH,OAAD,CAAf;AACD;;AACD,MAAIuH,eAAe,GAAGvH,OAAO,CAAC+B,YAA9B,CAP8C,CAS9C;AACA;AACA;AACA;;AACA,MAAI3C,kBAAkB,CAACY,OAAD,CAAlB,KAAgCuH,eAApC,EAAqD;AACnDA,IAAAA,eAAe,GAAGA,eAAe,CAACpD,aAAhB,CAA8BD,IAAhD;AACD;;AACD,SAAOqD,eAAP;AACD,C,CAED;AACA;;;AACA,SAASC,eAAT,CAAyBxH,OAAzB,EAAkCsH,QAAlC,EAA4C;AAC1C,QAAMhG,GAAG,GAAGrC,SAAS,CAACe,OAAD,CAArB;;AACA,MAAIX,UAAU,CAACW,OAAD,CAAd,EAAyB;AACvB,WAAOsB,GAAP;AACD;;AACD,MAAI,CAACvC,aAAa,CAACiB,OAAD,CAAlB,EAA6B;AAC3B,QAAIyH,eAAe,GAAG/H,aAAa,CAACM,OAAD,CAAnC;;AACA,WAAOyH,eAAe,IAAI,CAAC9H,qBAAqB,CAAC8H,eAAD,CAAhD,EAAmE;AACjE,UAAIzI,SAAS,CAACyI,eAAD,CAAT,IAA8B,CAACL,kBAAkB,CAACK,eAAD,CAArD,EAAwE;AACtE,eAAOA,eAAP;AACD;;AACDA,MAAAA,eAAe,GAAG/H,aAAa,CAAC+H,eAAD,CAA/B;AACD;;AACD,WAAOnG,GAAP;AACD;;AACD,MAAIS,YAAY,GAAGsF,mBAAmB,CAACrH,OAAD,EAAUsH,QAAV,CAAtC;;AACA,SAAOvF,YAAY,IAAIlC,cAAc,CAACkC,YAAD,CAA9B,IAAgDqF,kBAAkB,CAACrF,YAAD,CAAzE,EAAyF;AACvFA,IAAAA,YAAY,GAAGsF,mBAAmB,CAACtF,YAAD,EAAeuF,QAAf,CAAlC;AACD;;AACD,MAAIvF,YAAY,IAAIpC,qBAAqB,CAACoC,YAAD,CAArC,IAAuDqF,kBAAkB,CAACrF,YAAD,CAAzE,IAA2F,CAACnC,iBAAiB,CAACmC,YAAD,CAAjH,EAAiI;AAC/H,WAAOT,GAAP;AACD;;AACD,SAAOS,YAAY,IAAIjC,kBAAkB,CAACE,OAAD,CAAlC,IAA+CsB,GAAtD;AACD;;AAED,MAAMoG,eAAe,GAAG,gBAAgBC,IAAhB,EAAsB;AAC5C,QAAMC,iBAAiB,GAAG,KAAKJ,eAAL,IAAwBA,eAAlD;AACA,QAAMK,eAAe,GAAG,KAAKd,aAA7B;AACA,QAAMe,kBAAkB,GAAG,MAAMD,eAAe,CAACF,IAAI,CAACvE,QAAN,CAAhD;AACA,SAAO;AACL2E,IAAAA,SAAS,EAAEf,6BAA6B,CAACW,IAAI,CAACI,SAAN,EAAiB,MAAMH,iBAAiB,CAACD,IAAI,CAACvE,QAAN,CAAxC,EAAyDuE,IAAI,CAAC1E,QAA9D,CADnC;AAELG,IAAAA,QAAQ,EAAE;AACRpC,MAAAA,CAAC,EAAE,CADK;AAERC,MAAAA,CAAC,EAAE,CAFK;AAGRf,MAAAA,KAAK,EAAE4H,kBAAkB,CAAC5H,KAHlB;AAIRE,MAAAA,MAAM,EAAE0H,kBAAkB,CAAC1H;AAJnB;AAFL,GAAP;AASD,CAbD;;AAeA,SAAS4H,KAAT,CAAehI,OAAf,EAAwB;AACtB,SAAOlB,gBAAgB,CAACkB,OAAD,CAAhB,CAA0BwE,SAA1B,KAAwC,KAA/C;AACD;;AAED,MAAMyD,QAAQ,GAAG;AACfnF,EAAAA,qDADe;AAEf1D,EAAAA,kBAFe;AAGf8G,EAAAA,eAHe;AAIfsB,EAAAA,eAJe;AAKfE,EAAAA,eALe;AAMf/D,EAAAA,cANe;AAOfoD,EAAAA,aAPe;AAQfnG,EAAAA,QARe;AASf5B,EAAAA,SATe;AAUfgJ,EAAAA;AAVe,CAAjB,C,CAaA;;AACA,SAASE,WAAT,CAAqBlI,OAArB,EAA8BmI,MAA9B,EAAsC;AACpC,MAAIC,EAAE,GAAG,IAAT;AACA,MAAIC,SAAJ;AACA,QAAMC,IAAI,GAAGlJ,kBAAkB,CAACY,OAAD,CAA/B;;AACA,WAASuI,OAAT,GAAmB;AACjB,QAAIC,GAAJ;;AACAC,IAAAA,YAAY,CAACJ,SAAD,CAAZ;AACA,KAACG,GAAG,GAAGJ,EAAP,KAAc,IAAd,IAAsBI,GAAG,CAACE,UAAJ,EAAtB;AACAN,IAAAA,EAAE,GAAG,IAAL;AACD;;AACD,WAASO,OAAT,CAAiBC,IAAjB,EAAuBC,SAAvB,EAAkC;AAChC,QAAID,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,MAAAA,IAAI,GAAG,KAAP;AACD;;AACD,QAAIC,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACxBA,MAAAA,SAAS,GAAG,CAAZ;AACD;;AACDN,IAAAA,OAAO;AACP,UAAM;AACJpG,MAAAA,IADI;AAEJC,MAAAA,GAFI;AAGJlC,MAAAA,KAHI;AAIJE,MAAAA;AAJI,QAKFJ,OAAO,CAACe,qBAAR,EALJ;;AAMA,QAAI,CAAC6H,IAAL,EAAW;AACTT,MAAAA,MAAM;AACP;;AACD,QAAI,CAACjI,KAAD,IAAU,CAACE,MAAf,EAAuB;AACrB;AACD;;AACD,UAAM0I,QAAQ,GAAGjK,KAAK,CAACuD,GAAD,CAAtB;AACA,UAAM2G,UAAU,GAAGlK,KAAK,CAACyJ,IAAI,CAACjE,WAAL,IAAoBlC,IAAI,GAAGjC,KAA3B,CAAD,CAAxB;AACA,UAAM8I,WAAW,GAAGnK,KAAK,CAACyJ,IAAI,CAAC/D,YAAL,IAAqBnC,GAAG,GAAGhC,MAA3B,CAAD,CAAzB;AACA,UAAM6I,SAAS,GAAGpK,KAAK,CAACsD,IAAD,CAAvB;AACA,UAAM+G,UAAU,GAAG,CAACJ,QAAD,GAAY,KAAZ,GAAoB,CAACC,UAArB,GAAkC,KAAlC,GAA0C,CAACC,WAA3C,GAAyD,KAAzD,GAAiE,CAACC,SAAlE,GAA8E,IAAjG;AACA,UAAME,OAAO,GAAG;AACdD,MAAAA,UADc;AAEdL,MAAAA,SAAS,EAAElK,GAAG,CAAC,CAAD,EAAIC,GAAG,CAAC,CAAD,EAAIiK,SAAJ,CAAP,CAAH,IAA6B;AAF1B,KAAhB;AAIA,QAAIO,aAAa,GAAG,IAApB;;AACA,aAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,YAAMC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAAP,CAAWE,iBAAzB;;AACA,UAAID,KAAK,KAAKV,SAAd,EAAyB;AACvB,YAAI,CAACO,aAAL,EAAoB;AAClB,iBAAOT,OAAO,EAAd;AACD;;AACD,YAAI,CAACY,KAAL,EAAY;AACV;AACA;AACAlB,UAAAA,SAAS,GAAGoB,UAAU,CAAC,MAAM;AAC3Bd,YAAAA,OAAO,CAAC,KAAD,EAAQ,IAAR,CAAP;AACD,WAFqB,EAEnB,IAFmB,CAAtB;AAGD,SAND,MAMO;AACLA,UAAAA,OAAO,CAAC,KAAD,EAAQY,KAAR,CAAP;AACD;AACF;;AACDH,MAAAA,aAAa,GAAG,KAAhB;AACD,KA/C+B,CAiDhC;AACA;;;AACA,QAAI;AACFhB,MAAAA,EAAE,GAAG,IAAIsB,oBAAJ,CAAyBL,aAAzB,EAAwC,EAC3C,GAAGF,OADwC;AAE3C;AACAb,QAAAA,IAAI,EAAEA,IAAI,CAACnE;AAHgC,OAAxC,CAAL;AAKD,KAND,CAME,OAAOwF,CAAP,EAAU;AACVvB,MAAAA,EAAE,GAAG,IAAIsB,oBAAJ,CAAyBL,aAAzB,EAAwCF,OAAxC,CAAL;AACD;;AACDf,IAAAA,EAAE,CAACwB,OAAH,CAAW5J,OAAX;AACD;;AACD2I,EAAAA,OAAO,CAAC,IAAD,CAAP;AACA,SAAOJ,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsB,UAAT,CAAoB9B,SAApB,EAA+B3E,QAA/B,EAAyC0G,MAAzC,EAAiDX,OAAjD,EAA0D;AACxD,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AACD,QAAM;AACJY,IAAAA,cAAc,GAAG,IADb;AAEJC,IAAAA,cAAc,GAAG,IAFb;AAGJC,IAAAA,aAAa,GAAG,OAAOC,cAAP,KAA0B,UAHtC;AAIJC,IAAAA,WAAW,GAAG,OAAOT,oBAAP,KAAgC,UAJ1C;AAKJU,IAAAA,cAAc,GAAG;AALb,MAMFjB,OANJ;AAOA,QAAMkB,WAAW,GAAG3J,aAAa,CAACqH,SAAD,CAAjC;AACA,QAAMuC,SAAS,GAAGP,cAAc,IAAIC,cAAlB,GAAmC,CAAC,IAAIK,WAAW,GAAG5K,oBAAoB,CAAC4K,WAAD,CAAvB,GAAuC,EAAtD,CAAD,EAA4D,GAAG5K,oBAAoB,CAAC2D,QAAD,CAAnF,CAAnC,GAAoI,EAAtJ;AACAkH,EAAAA,SAAS,CAACC,OAAV,CAAkBvE,QAAQ,IAAI;AAC5B+D,IAAAA,cAAc,IAAI/D,QAAQ,CAACwE,gBAAT,CAA0B,QAA1B,EAAoCV,MAApC,EAA4C;AAC5DW,MAAAA,OAAO,EAAE;AADmD,KAA5C,CAAlB;AAGAT,IAAAA,cAAc,IAAIhE,QAAQ,CAACwE,gBAAT,CAA0B,QAA1B,EAAoCV,MAApC,CAAlB;AACD,GALD;AAMA,QAAMY,SAAS,GAAGL,WAAW,IAAIF,WAAf,GAA6BjC,WAAW,CAACmC,WAAD,EAAcP,MAAd,CAAxC,GAAgE,IAAlF;AACA,MAAIa,cAAc,GAAG,CAAC,CAAtB;AACA,MAAIC,cAAc,GAAG,IAArB;;AACA,MAAIX,aAAJ,EAAmB;AACjBW,IAAAA,cAAc,GAAG,IAAIV,cAAJ,CAAmBnH,IAAI,IAAI;AAC1C,UAAI,CAAC8H,UAAD,IAAe9H,IAAnB;;AACA,UAAI8H,UAAU,IAAIA,UAAU,CAACC,MAAX,KAAsBT,WAApC,IAAmDO,cAAvD,EAAuE;AACrE;AACA;AACAA,QAAAA,cAAc,CAACG,SAAf,CAAyB3H,QAAzB;AACA4H,QAAAA,oBAAoB,CAACL,cAAD,CAApB;AACAA,QAAAA,cAAc,GAAGM,qBAAqB,CAAC,MAAM;AAC3C,cAAIC,eAAJ;;AACA,WAACA,eAAe,GAAGN,cAAnB,KAAsC,IAAtC,IAA8CM,eAAe,CAACtB,OAAhB,CAAwBxG,QAAxB,CAA9C;AACD,SAHqC,CAAtC;AAID;;AACD0G,MAAAA,MAAM;AACP,KAbgB,CAAjB;;AAcA,QAAIO,WAAW,IAAI,CAACD,cAApB,EAAoC;AAClCQ,MAAAA,cAAc,CAAChB,OAAf,CAAuBS,WAAvB;AACD;;AACDO,IAAAA,cAAc,CAAChB,OAAf,CAAuBxG,QAAvB;AACD;;AACD,MAAI+H,OAAJ;AACA,MAAIC,WAAW,GAAGhB,cAAc,GAAGrJ,qBAAqB,CAACgH,SAAD,CAAxB,GAAsC,IAAtE;;AACA,MAAIqC,cAAJ,EAAoB;AAClBiB,IAAAA,SAAS;AACV;;AACD,WAASA,SAAT,GAAqB;AACnB,UAAMC,WAAW,GAAGvK,qBAAqB,CAACgH,SAAD,CAAzC;;AACA,QAAIqD,WAAW,KAAKE,WAAW,CAACtK,CAAZ,KAAkBoK,WAAW,CAACpK,CAA9B,IAAmCsK,WAAW,CAACrK,CAAZ,KAAkBmK,WAAW,CAACnK,CAAjE,IAAsEqK,WAAW,CAACpL,KAAZ,KAAsBkL,WAAW,CAAClL,KAAxG,IAAiHoL,WAAW,CAAClL,MAAZ,KAAuBgL,WAAW,CAAChL,MAAzJ,CAAf,EAAiL;AAC/K0J,MAAAA,MAAM;AACP;;AACDsB,IAAAA,WAAW,GAAGE,WAAd;AACAH,IAAAA,OAAO,GAAGF,qBAAqB,CAACI,SAAD,CAA/B;AACD;;AACDvB,EAAAA,MAAM;AACN,SAAO,MAAM;AACX,QAAIyB,gBAAJ;;AACAjB,IAAAA,SAAS,CAACC,OAAV,CAAkBvE,QAAQ,IAAI;AAC5B+D,MAAAA,cAAc,IAAI/D,QAAQ,CAACwF,mBAAT,CAA6B,QAA7B,EAAuC1B,MAAvC,CAAlB;AACAE,MAAAA,cAAc,IAAIhE,QAAQ,CAACwF,mBAAT,CAA6B,QAA7B,EAAuC1B,MAAvC,CAAlB;AACD,KAHD;AAIAY,IAAAA,SAAS,IAAI,IAAb,IAAqBA,SAAS,EAA9B;AACA,KAACa,gBAAgB,GAAGX,cAApB,KAAuC,IAAvC,IAA+CW,gBAAgB,CAAC7C,UAAjB,EAA/C;AACAkC,IAAAA,cAAc,GAAG,IAAjB;;AACA,QAAIR,cAAJ,EAAoB;AAClBY,MAAAA,oBAAoB,CAACG,OAAD,CAApB;AACD;AACF,GAZD;AAaD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMhO,cAAc,GAAGC,gBAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAGC,QAAf;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAGC,eAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGC,OAAd;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAI,GAAGC,MAAb;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAI,GAAGC,MAAb;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAI,GAAGC,MAAb;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGC,OAAd;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAGC,QAAf;AAEA;AACA;AACA;;AACA,MAAMC,UAAU,GAAGC,YAAnB;AAEA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,CAACwJ,SAAD,EAAY3E,QAAZ,EAAsB+F,OAAtB,KAAkC;AACxD;AACA;AACA;AACA,QAAMhE,KAAK,GAAG,IAAIsG,GAAJ,EAAd;AACA,QAAMC,aAAa,GAAG;AACpBzD,IAAAA,QADoB;AAEpB,OAAGkB;AAFiB,GAAtB;AAIA,QAAMwC,iBAAiB,GAAG,EACxB,GAAGD,aAAa,CAACzD,QADO;AAExB3B,IAAAA,EAAE,EAAEnB;AAFoB,GAA1B;AAIA,SAAO3G,iBAAiB,CAACuJ,SAAD,EAAY3E,QAAZ,EAAsB,EAC5C,GAAGsI,aADyC;AAE5CzD,IAAAA,QAAQ,EAAE0D;AAFkC,GAAtB,CAAxB;AAID,CAjBD;;AAmBA,SAAS1N,KAAT,EAAgBV,aAAhB,EAA+BsM,UAA/B,EAA2CtL,eAA3C,EAA4DpB,cAA5D,EAA4EQ,IAA5E,EAAkFI,IAAlF,EAAwFI,MAAxF,EAAgGE,UAAhG,EAA4GhB,MAA5G,EAAoH4K,QAApH,EAA8HxK,KAA9H,EAAqII,IAArI","sourcesContent":["import { rectToClientRect, detectOverflow as detectOverflow$1, offset as offset$1, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n      // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  let htmlX = 0;\n  let htmlY = 0;\n  if (documentElement && !isOffsetParentAnElement && !isFixed) {\n    const htmlRect = documentElement.getBoundingClientRect();\n    htmlY = htmlRect.top + scroll.scrollTop;\n    htmlX = htmlRect.left + scroll.scrollLeft -\n    // RTL <body> scrollbar.\n    getWindowScrollBarX(documentElement, htmlRect);\n  }\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlX;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlY;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n"]},"metadata":{},"sourceType":"module"}