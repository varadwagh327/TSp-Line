{"ast":null,"code":"import PropTypes from 'prop-types';\nimport deepmerge from '@mui/utils/deepmerge';\nimport merge from \"../merge/index.js\";\nimport { isCqShorthand, getContainerQuery } from \"../cssContainerQueries/index.js\"; // The breakpoint **start** at this value.\n// For instance with the first breakpoint xs: [xs, sm[.\n\nexport const values = {\n  xs: 0,\n  // phone\n  sm: 600,\n  // tablet\n  md: 900,\n  // small laptop\n  lg: 1200,\n  // desktop\n  xl: 1536 // large screen\n\n};\nconst defaultBreakpoints = {\n  // Sorted ASC by size. That's important.\n  // It can't be configured as it's used statically for propTypes.\n  keys: ['xs', 'sm', 'md', 'lg', 'xl'],\n  up: key => `@media (min-width:${values[key]}px)`\n};\nconst defaultContainerQueries = {\n  containerQueries: containerName => ({\n    up: key => {\n      let result = typeof key === 'number' ? key : values[key] || key;\n\n      if (typeof result === 'number') {\n        result = `${result}px`;\n      }\n\n      return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;\n    }\n  })\n};\nexport function handleBreakpoints(props, propValue, styleFromPropValue) {\n  const theme = props.theme || {};\n\n  if (Array.isArray(propValue)) {\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    return propValue.reduce((acc, item, index) => {\n      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);\n      return acc;\n    }, {});\n  }\n\n  if (typeof propValue === 'object') {\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    return Object.keys(propValue).reduce((acc, breakpoint) => {\n      if (isCqShorthand(themeBreakpoints.keys, breakpoint)) {\n        const containerKey = getContainerQuery(theme.containerQueries ? theme : defaultContainerQueries, breakpoint);\n\n        if (containerKey) {\n          acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);\n        }\n      } // key is breakpoint\n      else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {\n        const mediaKey = themeBreakpoints.up(breakpoint);\n        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);\n      } else {\n        const cssKey = breakpoint;\n        acc[cssKey] = propValue[cssKey];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  const output = styleFromPropValue(propValue);\n  return output;\n}\n\nfunction breakpoints(styleFunction) {\n  // false positive\n  // eslint-disable-next-line react/function-component-definition\n  const newStyleFunction = props => {\n    const theme = props.theme || {};\n    const base = styleFunction(props);\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    const extended = themeBreakpoints.keys.reduce((acc, key) => {\n      if (props[key]) {\n        acc = acc || {};\n        acc[themeBreakpoints.up(key)] = styleFunction({\n          theme,\n          ...props[key]\n        });\n      }\n\n      return acc;\n    }, null);\n    return merge(base, extended);\n  };\n\n  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? { ...styleFunction.propTypes,\n    xs: PropTypes.object,\n    sm: PropTypes.object,\n    md: PropTypes.object,\n    lg: PropTypes.object,\n    xl: PropTypes.object\n  } : {};\n  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl', ...styleFunction.filterProps];\n  return newStyleFunction;\n}\n\nexport function createEmptyBreakpointObject() {\n  let breakpointsInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key) => {\n    const breakpointStyleKey = breakpointsInput.up(key);\n    acc[breakpointStyleKey] = {};\n    return acc;\n  }, {});\n  return breakpointsInOrder || {};\n}\nexport function removeUnusedBreakpoints(breakpointKeys, style) {\n  return breakpointKeys.reduce((acc, key) => {\n    const breakpointOutput = acc[key];\n    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;\n\n    if (isBreakpointUnused) {\n      delete acc[key];\n    }\n\n    return acc;\n  }, style);\n}\nexport function mergeBreakpointsInOrder(breakpointsInput) {\n  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);\n\n  for (var _len = arguments.length, styles = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    styles[_key - 1] = arguments[_key];\n  }\n\n  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});\n  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);\n} // compute base for responsive values; e.g.,\n// [1,2,3] => {xs: true, sm: true, md: true}\n// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}\n\nexport function computeBreakpointsBase(breakpointValues, themeBreakpoints) {\n  // fixed value\n  if (typeof breakpointValues !== 'object') {\n    return {};\n  }\n\n  const base = {};\n  const breakpointsKeys = Object.keys(themeBreakpoints);\n\n  if (Array.isArray(breakpointValues)) {\n    breakpointsKeys.forEach((breakpoint, i) => {\n      if (i < breakpointValues.length) {\n        base[breakpoint] = true;\n      }\n    });\n  } else {\n    breakpointsKeys.forEach(breakpoint => {\n      if (breakpointValues[breakpoint] != null) {\n        base[breakpoint] = true;\n      }\n    });\n  }\n\n  return base;\n}\nexport function resolveBreakpointValues(_ref) {\n  let {\n    values: breakpointValues,\n    breakpoints: themeBreakpoints,\n    base: customBase\n  } = _ref;\n  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);\n  const keys = Object.keys(base);\n\n  if (keys.length === 0) {\n    return breakpointValues;\n  }\n\n  let previous;\n  return keys.reduce((acc, breakpoint, i) => {\n    if (Array.isArray(breakpointValues)) {\n      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];\n      previous = i;\n    } else if (typeof breakpointValues === 'object') {\n      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];\n      previous = breakpoint;\n    } else {\n      acc[breakpoint] = breakpointValues;\n    }\n\n    return acc;\n  }, {});\n}\nexport default breakpoints;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/system/breakpoints/breakpoints.js"],"names":["PropTypes","deepmerge","merge","isCqShorthand","getContainerQuery","values","xs","sm","md","lg","xl","defaultBreakpoints","keys","up","key","defaultContainerQueries","containerQueries","containerName","result","handleBreakpoints","props","propValue","styleFromPropValue","theme","Array","isArray","themeBreakpoints","breakpoints","reduce","acc","item","index","Object","breakpoint","containerKey","includes","mediaKey","cssKey","output","styleFunction","newStyleFunction","base","extended","propTypes","process","env","NODE_ENV","object","filterProps","createEmptyBreakpointObject","breakpointsInput","breakpointsInOrder","breakpointStyleKey","removeUnusedBreakpoints","breakpointKeys","style","breakpointOutput","isBreakpointUnused","length","mergeBreakpointsInOrder","emptyBreakpoints","styles","mergedOutput","prev","next","computeBreakpointsBase","breakpointValues","breakpointsKeys","forEach","i","resolveBreakpointValues","customBase","previous"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport deepmerge from '@mui/utils/deepmerge';\nimport merge from \"../merge/index.js\";\nimport { isCqShorthand, getContainerQuery } from \"../cssContainerQueries/index.js\";\n\n// The breakpoint **start** at this value.\n// For instance with the first breakpoint xs: [xs, sm[.\nexport const values = {\n  xs: 0,\n  // phone\n  sm: 600,\n  // tablet\n  md: 900,\n  // small laptop\n  lg: 1200,\n  // desktop\n  xl: 1536 // large screen\n};\nconst defaultBreakpoints = {\n  // Sorted ASC by size. That's important.\n  // It can't be configured as it's used statically for propTypes.\n  keys: ['xs', 'sm', 'md', 'lg', 'xl'],\n  up: key => `@media (min-width:${values[key]}px)`\n};\nconst defaultContainerQueries = {\n  containerQueries: containerName => ({\n    up: key => {\n      let result = typeof key === 'number' ? key : values[key] || key;\n      if (typeof result === 'number') {\n        result = `${result}px`;\n      }\n      return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;\n    }\n  })\n};\nexport function handleBreakpoints(props, propValue, styleFromPropValue) {\n  const theme = props.theme || {};\n  if (Array.isArray(propValue)) {\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    return propValue.reduce((acc, item, index) => {\n      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);\n      return acc;\n    }, {});\n  }\n  if (typeof propValue === 'object') {\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    return Object.keys(propValue).reduce((acc, breakpoint) => {\n      if (isCqShorthand(themeBreakpoints.keys, breakpoint)) {\n        const containerKey = getContainerQuery(theme.containerQueries ? theme : defaultContainerQueries, breakpoint);\n        if (containerKey) {\n          acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);\n        }\n      }\n      // key is breakpoint\n      else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {\n        const mediaKey = themeBreakpoints.up(breakpoint);\n        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);\n      } else {\n        const cssKey = breakpoint;\n        acc[cssKey] = propValue[cssKey];\n      }\n      return acc;\n    }, {});\n  }\n  const output = styleFromPropValue(propValue);\n  return output;\n}\nfunction breakpoints(styleFunction) {\n  // false positive\n  // eslint-disable-next-line react/function-component-definition\n  const newStyleFunction = props => {\n    const theme = props.theme || {};\n    const base = styleFunction(props);\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    const extended = themeBreakpoints.keys.reduce((acc, key) => {\n      if (props[key]) {\n        acc = acc || {};\n        acc[themeBreakpoints.up(key)] = styleFunction({\n          theme,\n          ...props[key]\n        });\n      }\n      return acc;\n    }, null);\n    return merge(base, extended);\n  };\n  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? {\n    ...styleFunction.propTypes,\n    xs: PropTypes.object,\n    sm: PropTypes.object,\n    md: PropTypes.object,\n    lg: PropTypes.object,\n    xl: PropTypes.object\n  } : {};\n  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl', ...styleFunction.filterProps];\n  return newStyleFunction;\n}\nexport function createEmptyBreakpointObject(breakpointsInput = {}) {\n  const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key) => {\n    const breakpointStyleKey = breakpointsInput.up(key);\n    acc[breakpointStyleKey] = {};\n    return acc;\n  }, {});\n  return breakpointsInOrder || {};\n}\nexport function removeUnusedBreakpoints(breakpointKeys, style) {\n  return breakpointKeys.reduce((acc, key) => {\n    const breakpointOutput = acc[key];\n    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;\n    if (isBreakpointUnused) {\n      delete acc[key];\n    }\n    return acc;\n  }, style);\n}\nexport function mergeBreakpointsInOrder(breakpointsInput, ...styles) {\n  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);\n  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});\n  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);\n}\n\n// compute base for responsive values; e.g.,\n// [1,2,3] => {xs: true, sm: true, md: true}\n// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}\nexport function computeBreakpointsBase(breakpointValues, themeBreakpoints) {\n  // fixed value\n  if (typeof breakpointValues !== 'object') {\n    return {};\n  }\n  const base = {};\n  const breakpointsKeys = Object.keys(themeBreakpoints);\n  if (Array.isArray(breakpointValues)) {\n    breakpointsKeys.forEach((breakpoint, i) => {\n      if (i < breakpointValues.length) {\n        base[breakpoint] = true;\n      }\n    });\n  } else {\n    breakpointsKeys.forEach(breakpoint => {\n      if (breakpointValues[breakpoint] != null) {\n        base[breakpoint] = true;\n      }\n    });\n  }\n  return base;\n}\nexport function resolveBreakpointValues({\n  values: breakpointValues,\n  breakpoints: themeBreakpoints,\n  base: customBase\n}) {\n  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);\n  const keys = Object.keys(base);\n  if (keys.length === 0) {\n    return breakpointValues;\n  }\n  let previous;\n  return keys.reduce((acc, breakpoint, i) => {\n    if (Array.isArray(breakpointValues)) {\n      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];\n      previous = i;\n    } else if (typeof breakpointValues === 'object') {\n      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];\n      previous = breakpoint;\n    } else {\n      acc[breakpoint] = breakpointValues;\n    }\n    return acc;\n  }, {});\n}\nexport default breakpoints;"]},"metadata":{},"sourceType":"module"}