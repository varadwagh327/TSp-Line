{"ast":null,"code":"import { isPlainObject } from '@mui/utils/deepmerge';\nimport defaultSxConfig from \"./defaultSxConfig.js\";\n\nconst splitProps = props => {\n  const result = {\n    systemProps: {},\n    otherProps: {}\n  };\n  const config = props?.theme?.unstable_sxConfig ?? defaultSxConfig;\n  Object.keys(props).forEach(prop => {\n    if (config[prop]) {\n      result.systemProps[prop] = props[prop];\n    } else {\n      result.otherProps[prop] = props[prop];\n    }\n  });\n  return result;\n};\n\nexport default function extendSxProp(props) {\n  const {\n    sx: inSx,\n    ...other\n  } = props;\n  const {\n    systemProps,\n    otherProps\n  } = splitProps(other);\n  let finalSx;\n\n  if (Array.isArray(inSx)) {\n    finalSx = [systemProps, ...inSx];\n  } else if (typeof inSx === 'function') {\n    finalSx = function () {\n      const result = inSx(...arguments);\n\n      if (!isPlainObject(result)) {\n        return systemProps;\n      }\n\n      return { ...systemProps,\n        ...result\n      };\n    };\n  } else {\n    finalSx = { ...systemProps,\n      ...inSx\n    };\n  }\n\n  return { ...otherProps,\n    sx: finalSx\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/system/styleFunctionSx/extendSxProp.js"],"names":["isPlainObject","defaultSxConfig","splitProps","props","result","systemProps","otherProps","config","theme","unstable_sxConfig","Object","keys","forEach","prop","extendSxProp","sx","inSx","other","finalSx","Array","isArray"],"mappings":"AAAA,SAASA,aAAT,QAA8B,sBAA9B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,QAAMC,MAAM,GAAG;AACbC,IAAAA,WAAW,EAAE,EADA;AAEbC,IAAAA,UAAU,EAAE;AAFC,GAAf;AAIA,QAAMC,MAAM,GAAGJ,KAAK,EAAEK,KAAP,EAAcC,iBAAd,IAAmCR,eAAlD;AACAS,EAAAA,MAAM,CAACC,IAAP,CAAYR,KAAZ,EAAmBS,OAAnB,CAA2BC,IAAI,IAAI;AACjC,QAAIN,MAAM,CAACM,IAAD,CAAV,EAAkB;AAChBT,MAAAA,MAAM,CAACC,WAAP,CAAmBQ,IAAnB,IAA2BV,KAAK,CAACU,IAAD,CAAhC;AACD,KAFD,MAEO;AACLT,MAAAA,MAAM,CAACE,UAAP,CAAkBO,IAAlB,IAA0BV,KAAK,CAACU,IAAD,CAA/B;AACD;AACF,GAND;AAOA,SAAOT,MAAP;AACD,CAdD;;AAeA,eAAe,SAASU,YAAT,CAAsBX,KAAtB,EAA6B;AAC1C,QAAM;AACJY,IAAAA,EAAE,EAAEC,IADA;AAEJ,OAAGC;AAFC,MAGFd,KAHJ;AAIA,QAAM;AACJE,IAAAA,WADI;AAEJC,IAAAA;AAFI,MAGFJ,UAAU,CAACe,KAAD,CAHd;AAIA,MAAIC,OAAJ;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAJ,EAAyB;AACvBE,IAAAA,OAAO,GAAG,CAACb,WAAD,EAAc,GAAGW,IAAjB,CAAV;AACD,GAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AACrCE,IAAAA,OAAO,GAAG,YAAa;AACrB,YAAMd,MAAM,GAAGY,IAAI,CAAC,YAAD,CAAnB;;AACA,UAAI,CAAChB,aAAa,CAACI,MAAD,CAAlB,EAA4B;AAC1B,eAAOC,WAAP;AACD;;AACD,aAAO,EACL,GAAGA,WADE;AAEL,WAAGD;AAFE,OAAP;AAID,KATD;AAUD,GAXM,MAWA;AACLc,IAAAA,OAAO,GAAG,EACR,GAAGb,WADK;AAER,SAAGW;AAFK,KAAV;AAID;;AACD,SAAO,EACL,GAAGV,UADE;AAELS,IAAAA,EAAE,EAAEG;AAFC,GAAP;AAID","sourcesContent":["import { isPlainObject } from '@mui/utils/deepmerge';\nimport defaultSxConfig from \"./defaultSxConfig.js\";\nconst splitProps = props => {\n  const result = {\n    systemProps: {},\n    otherProps: {}\n  };\n  const config = props?.theme?.unstable_sxConfig ?? defaultSxConfig;\n  Object.keys(props).forEach(prop => {\n    if (config[prop]) {\n      result.systemProps[prop] = props[prop];\n    } else {\n      result.otherProps[prop] = props[prop];\n    }\n  });\n  return result;\n};\nexport default function extendSxProp(props) {\n  const {\n    sx: inSx,\n    ...other\n  } = props;\n  const {\n    systemProps,\n    otherProps\n  } = splitProps(other);\n  let finalSx;\n  if (Array.isArray(inSx)) {\n    finalSx = [systemProps, ...inSx];\n  } else if (typeof inSx === 'function') {\n    finalSx = (...args) => {\n      const result = inSx(...args);\n      if (!isPlainObject(result)) {\n        return systemProps;\n      }\n      return {\n        ...systemProps,\n        ...result\n      };\n    };\n  } else {\n    finalSx = {\n      ...systemProps,\n      ...inSx\n    };\n  }\n  return {\n    ...otherProps,\n    sx: finalSx\n  };\n}"]},"metadata":{},"sourceType":"module"}