{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport createTheme from \"./createTheme.js\";\nimport createTypography from \"./createTypography.js\";\nimport THEME_ID from \"./identifier.js\";\nimport { defaultConfig } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst {\n  CssVarsProvider: InternalCssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript: deprecatedGetInitColorSchemeScript\n} = createCssVarsProvider({\n  themeId: THEME_ID,\n  // @ts-ignore ignore module augmentation tests\n  theme: () => createTheme({\n    cssVariables: true\n  }),\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\n  modeStorageKey: defaultConfig.modeStorageKey,\n  defaultColorScheme: {\n    light: defaultConfig.defaultLightColorScheme,\n    dark: defaultConfig.defaultDarkColorScheme\n  },\n  resolveTheme: theme => {\n    const newTheme = { ...theme,\n      typography: createTypography(theme.palette, theme.typography)\n    };\n\n    newTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx({\n        sx: props,\n        theme: this\n      });\n    };\n\n    return newTheme;\n  }\n});\nlet warnedOnce = false; // TODO: remove in v7\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction Experimental_CssVarsProvider(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      console.warn(['MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.', '', \"You should use `import { ThemeProvider } from '@mui/material/styles'` instead.\", 'For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/'].join('\\n'));\n      warnedOnce = true;\n    }\n  }\n\n  return /*#__PURE__*/_jsx(InternalCssVarsProvider, { ...props\n  });\n}\n\nlet warnedInitScriptOnce = false; // TODO: remove in v7\n\nconst getInitColorSchemeScript = params => {\n  if (!warnedInitScriptOnce) {\n    console.warn(['MUI: The getInitColorSchemeScript function has been deprecated.', '', \"You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`\", 'and replace the function call with `<InitColorSchemeScript />` instead.'].join('\\n'));\n    warnedInitScriptOnce = true;\n  }\n\n  return deprecatedGetInitColorSchemeScript(params);\n};\n/**\n * TODO: remove this export in v7\n * @deprecated\n * The `CssVarsProvider` component has been deprecated and ported into `ThemeProvider`.\n *\n * You should use `ThemeProvider` and `createTheme` instead:\n *\n * ```diff\n * - import { CssVarsProvider, extendTheme } from '@mui/material/styles';\n * + import { ThemeProvider, createTheme } from '@mui/material/styles';\n *\n * - const theme = extendTheme();\n * + const theme = createTheme({\n * +   cssVariables: true,\n * +   colorSchemes: { light: true, dark: true },\n * + });\n *\n * - <CssVarsProvider theme={theme}>\n * + <ThemeProvider theme={theme}>\n * ```\n *\n * To see the full documentation, check out https://mui.com/material-ui/customization/css-theme-variables/usage/.\n */\n\n\nexport const CssVarsProvider = InternalCssVarsProvider;\nexport { useColorScheme, getInitColorSchemeScript, Experimental_CssVarsProvider };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/styles/ThemeProviderWithVars.js"],"names":["React","styleFunctionSx","unstable_createCssVarsProvider","createCssVarsProvider","createTheme","createTypography","THEME_ID","defaultConfig","jsx","_jsx","CssVarsProvider","InternalCssVarsProvider","useColorScheme","getInitColorSchemeScript","deprecatedGetInitColorSchemeScript","themeId","theme","cssVariables","colorSchemeStorageKey","modeStorageKey","defaultColorScheme","light","defaultLightColorScheme","dark","defaultDarkColorScheme","resolveTheme","newTheme","typography","palette","unstable_sx","sx","props","warnedOnce","Experimental_CssVarsProvider","process","env","NODE_ENV","console","warn","join","warnedInitScriptOnce","params"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,SAASC,8BAA8B,IAAIC,qBAA3C,QAAwE,aAAxE;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAM;AACJC,EAAAA,eAAe,EAAEC,uBADb;AAEJC,EAAAA,cAFI;AAGJC,EAAAA,wBAAwB,EAAEC;AAHtB,IAIFX,qBAAqB,CAAC;AACxBY,EAAAA,OAAO,EAAET,QADe;AAExB;AACAU,EAAAA,KAAK,EAAE,MAAMZ,WAAW,CAAC;AACvBa,IAAAA,YAAY,EAAE;AADS,GAAD,CAHA;AAMxBC,EAAAA,qBAAqB,EAAEX,aAAa,CAACW,qBANb;AAOxBC,EAAAA,cAAc,EAAEZ,aAAa,CAACY,cAPN;AAQxBC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,KAAK,EAAEd,aAAa,CAACe,uBADH;AAElBC,IAAAA,IAAI,EAAEhB,aAAa,CAACiB;AAFF,GARI;AAYxBC,EAAAA,YAAY,EAAET,KAAK,IAAI;AACrB,UAAMU,QAAQ,GAAG,EACf,GAAGV,KADY;AAEfW,MAAAA,UAAU,EAAEtB,gBAAgB,CAACW,KAAK,CAACY,OAAP,EAAgBZ,KAAK,CAACW,UAAtB;AAFb,KAAjB;;AAIAD,IAAAA,QAAQ,CAACG,WAAT,GAAuB,SAASC,EAAT,CAAYC,KAAZ,EAAmB;AACxC,aAAO9B,eAAe,CAAC;AACrB6B,QAAAA,EAAE,EAAEC,KADiB;AAErBf,QAAAA,KAAK,EAAE;AAFc,OAAD,CAAtB;AAID,KALD;;AAMA,WAAOU,QAAP;AACD;AAxBuB,CAAD,CAJzB;AA8BA,IAAIM,UAAU,GAAG,KAAjB,C,CAEA;AACA;;AACA,SAASC,4BAAT,CAAsCF,KAAtC,EAA6C;AAC3C,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,CAACJ,UAAL,EAAiB;AACfK,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAC,qFAAD,EAAwF,EAAxF,EAA4F,gFAA5F,EAA8K,kGAA9K,EAAkRC,IAAlR,CAAuR,IAAvR,CAAb;AACAP,MAAAA,UAAU,GAAG,IAAb;AACD;AACF;;AACD,SAAO,aAAavB,IAAI,CAACE,uBAAD,EAA0B,EAChD,GAAGoB;AAD6C,GAA1B,CAAxB;AAGD;;AACD,IAAIS,oBAAoB,GAAG,KAA3B,C,CAEA;;AACA,MAAM3B,wBAAwB,GAAG4B,MAAM,IAAI;AACzC,MAAI,CAACD,oBAAL,EAA2B;AACzBH,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAC,iEAAD,EAAoE,EAApE,EAAwE,0FAAxE,EAAoK,yEAApK,EAA+OC,IAA/O,CAAoP,IAApP,CAAb;AACAC,IAAAA,oBAAoB,GAAG,IAAvB;AACD;;AACD,SAAO1B,kCAAkC,CAAC2B,MAAD,CAAzC;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAM/B,eAAe,GAAGC,uBAAxB;AACP,SAASC,cAAT,EAAyBC,wBAAzB,EAAmDoB,4BAAnD","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport createTheme from \"./createTheme.js\";\nimport createTypography from \"./createTypography.js\";\nimport THEME_ID from \"./identifier.js\";\nimport { defaultConfig } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst {\n  CssVarsProvider: InternalCssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript: deprecatedGetInitColorSchemeScript\n} = createCssVarsProvider({\n  themeId: THEME_ID,\n  // @ts-ignore ignore module augmentation tests\n  theme: () => createTheme({\n    cssVariables: true\n  }),\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\n  modeStorageKey: defaultConfig.modeStorageKey,\n  defaultColorScheme: {\n    light: defaultConfig.defaultLightColorScheme,\n    dark: defaultConfig.defaultDarkColorScheme\n  },\n  resolveTheme: theme => {\n    const newTheme = {\n      ...theme,\n      typography: createTypography(theme.palette, theme.typography)\n    };\n    newTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx({\n        sx: props,\n        theme: this\n      });\n    };\n    return newTheme;\n  }\n});\nlet warnedOnce = false;\n\n// TODO: remove in v7\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction Experimental_CssVarsProvider(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      console.warn(['MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.', '', \"You should use `import { ThemeProvider } from '@mui/material/styles'` instead.\", 'For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/'].join('\\n'));\n      warnedOnce = true;\n    }\n  }\n  return /*#__PURE__*/_jsx(InternalCssVarsProvider, {\n    ...props\n  });\n}\nlet warnedInitScriptOnce = false;\n\n// TODO: remove in v7\nconst getInitColorSchemeScript = params => {\n  if (!warnedInitScriptOnce) {\n    console.warn(['MUI: The getInitColorSchemeScript function has been deprecated.', '', \"You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`\", 'and replace the function call with `<InitColorSchemeScript />` instead.'].join('\\n'));\n    warnedInitScriptOnce = true;\n  }\n  return deprecatedGetInitColorSchemeScript(params);\n};\n\n/**\n * TODO: remove this export in v7\n * @deprecated\n * The `CssVarsProvider` component has been deprecated and ported into `ThemeProvider`.\n *\n * You should use `ThemeProvider` and `createTheme` instead:\n *\n * ```diff\n * - import { CssVarsProvider, extendTheme } from '@mui/material/styles';\n * + import { ThemeProvider, createTheme } from '@mui/material/styles';\n *\n * - const theme = extendTheme();\n * + const theme = createTheme({\n * +   cssVariables: true,\n * +   colorSchemes: { light: true, dark: true },\n * + });\n *\n * - <CssVarsProvider theme={theme}>\n * + <ThemeProvider theme={theme}>\n * ```\n *\n * To see the full documentation, check out https://mui.com/material-ui/customization/css-theme-variables/usage/.\n */\nexport const CssVarsProvider = InternalCssVarsProvider;\nexport { useColorScheme, getInitColorSchemeScript, Experimental_CssVarsProvider };"]},"metadata":{},"sourceType":"module"}