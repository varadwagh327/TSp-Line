{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getTabUtilityClass } from './tabClasses';\nimport { useTab } from '../useTab';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    selected,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [Tab API](https://mui.com/base-ui/react-tabs/components-api/#tab)\n */\n\n\nconst Tab = /*#__PURE__*/React.forwardRef(function Tab(props, forwardedRef) {\n  const {\n    action,\n    children,\n    disabled = false,\n    onChange,\n    onClick,\n    onFocus,\n    slotProps = {},\n    slots = {},\n    value,\n    ...other\n  } = props;\n  const tabRef = React.useRef(null);\n  const handleRef = useForkRef(tabRef, forwardedRef);\n  const {\n    active,\n    highlighted,\n    selected,\n    getRootProps\n  } = useTab({ ...props,\n    rootRef: handleRef,\n    value\n  });\n  const ownerState = { ...props,\n    active,\n    disabled,\n    highlighted,\n    selected\n  };\n  const classes = useUtilityClasses(ownerState);\n  const TabRoot = slots.root ?? 'button';\n  const tabRootProps = useSlotProps({\n    elementType: TabRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabRoot, { ...tabRootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Tab.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the Tab.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Tab.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * You can provide your own value. Otherwise, it falls back to the child position index.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport { Tab };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Tab/Tab.js"],"names":["React","PropTypes","unstable_useForkRef","useForkRef","unstable_composeClasses","composeClasses","getTabUtilityClass","useTab","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","selected","disabled","slots","root","Tab","forwardRef","props","forwardedRef","action","children","onChange","onClick","onFocus","slotProps","value","other","tabRef","useRef","handleRef","active","highlighted","getRootProps","rootRef","classes","TabRoot","tabRootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","additionalProps","ref","className","process","env","NODE_ENV","propTypes","oneOfType","func","shape","current","focusVisible","isRequired","node","bool","object","number","string"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getTabUtilityClass } from './tabClasses';\nimport { useTab } from '../useTab';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    selected,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [Tab API](https://mui.com/base-ui/react-tabs/components-api/#tab)\n */\nconst Tab = /*#__PURE__*/React.forwardRef(function Tab(props, forwardedRef) {\n  const {\n    action,\n    children,\n    disabled = false,\n    onChange,\n    onClick,\n    onFocus,\n    slotProps = {},\n    slots = {},\n    value,\n    ...other\n  } = props;\n  const tabRef = React.useRef(null);\n  const handleRef = useForkRef(tabRef, forwardedRef);\n  const {\n    active,\n    highlighted,\n    selected,\n    getRootProps\n  } = useTab({\n    ...props,\n    rootRef: handleRef,\n    value\n  });\n  const ownerState = {\n    ...props,\n    active,\n    disabled,\n    highlighted,\n    selected\n  };\n  const classes = useUtilityClasses(ownerState);\n  const TabRoot = slots.root ?? 'button';\n  const tabRootProps = useSlotProps({\n    elementType: TabRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabRoot, {\n    ...tabRootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Tab.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The props used for each slot inside the Tab.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Tab.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * You can provide your own value. Otherwise, it falls back to the child position index.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport { Tab };"]},"metadata":{},"sourceType":"module"}