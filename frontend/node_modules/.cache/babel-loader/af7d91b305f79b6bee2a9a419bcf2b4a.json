{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_isFocusVisible as isFocusVisible } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useRootElementName } from '../utils/useRootElementName';\n/**\n *\n * Demos:\n *\n * - [Button](https://next.mui.com/base-ui/react-button/#hook)\n *\n * API:\n *\n * - [useButton API](https://next.mui.com/base-ui/react-button/hooks-api/#use-button)\n */\n\nexport function useButton() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    href,\n    rootRef: externalRef,\n    tabIndex,\n    to,\n    type,\n    rootElementName: rootElementNameProp\n  } = parameters;\n  const buttonRef = React.useRef(null);\n  const [active, setActive] = React.useState(false);\n  const [focusVisible, setFocusVisible] = React.useState(false);\n\n  if (disabled && !focusableWhenDisabled && focusVisible) {\n    setFocusVisible(false);\n  }\n\n  const [rootElementName, updateRootElementName] = useRootElementName({\n    rootElementName: rootElementNameProp ?? (href || to ? 'a' : undefined),\n    componentName: 'Button'\n  });\n\n  const createHandleMouseLeave = otherHandlers => event => {\n    if (focusVisible) {\n      event.preventDefault();\n    }\n\n    otherHandlers.onMouseLeave?.(event);\n  };\n\n  const createHandleBlur = otherHandlers => event => {\n    if (!isFocusVisible(event.target)) {\n      setFocusVisible(false);\n    }\n\n    otherHandlers.onBlur?.(event);\n  };\n\n  const createHandleFocus = otherHandlers => event => {\n    // Fix for https://github.com/facebook/react/issues/7769\n    if (!buttonRef.current) {\n      buttonRef.current = event.currentTarget;\n    }\n\n    if (isFocusVisible(event.target)) {\n      setFocusVisible(true);\n      otherHandlers.onFocusVisible?.(event);\n    }\n\n    otherHandlers.onFocus?.(event);\n  };\n\n  const isNativeButton = () => {\n    const button = buttonRef.current;\n    return rootElementName === 'BUTTON' || rootElementName === 'INPUT' && ['button', 'submit', 'reset'].includes(button?.type) || rootElementName === 'A' && button?.href;\n  };\n\n  const createHandleClick = otherHandlers => event => {\n    if (!disabled) {\n      otherHandlers.onClick?.(event);\n    }\n  };\n\n  const createHandleMouseDown = otherHandlers => event => {\n    if (!disabled) {\n      setActive(true);\n      document.addEventListener('mouseup', () => {\n        setActive(false);\n      }, {\n        once: true\n      });\n    }\n\n    otherHandlers.onMouseDown?.(event);\n  };\n\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (event.target === event.currentTarget && !isNativeButton() && event.key === ' ') {\n      event.preventDefault();\n    }\n\n    if (event.target === event.currentTarget && event.key === ' ' && !disabled) {\n      setActive(true);\n    } // Keyboard accessibility for non interactive elements\n\n\n    if (event.target === event.currentTarget && !isNativeButton() && event.key === 'Enter' && !disabled) {\n      otherHandlers.onClick?.(event);\n      event.preventDefault();\n    }\n  };\n\n  const createHandleKeyUp = otherHandlers => event => {\n    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed\n    // https://codesandbox.io/p/sandbox/button-keyup-preventdefault-dn7f0\n    if (event.target === event.currentTarget) {\n      setActive(false);\n    }\n\n    otherHandlers.onKeyUp?.(event); // Keyboard accessibility for non interactive elements\n\n    if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === ' ' && !event.defaultMuiPrevented) {\n      otherHandlers.onClick?.(event);\n    }\n  };\n\n  const handleRef = useForkRef(updateRootElementName, externalRef, buttonRef);\n  const buttonProps = {};\n\n  if (tabIndex !== undefined) {\n    buttonProps.tabIndex = tabIndex;\n  }\n\n  if (rootElementName === 'BUTTON') {\n    buttonProps.type = type ?? 'button';\n\n    if (focusableWhenDisabled) {\n      buttonProps['aria-disabled'] = disabled;\n    } else {\n      buttonProps.disabled = disabled;\n    }\n  } else if (rootElementName === 'INPUT') {\n    if (type && ['button', 'submit', 'reset'].includes(type)) {\n      if (focusableWhenDisabled) {\n        buttonProps['aria-disabled'] = disabled;\n      } else {\n        buttonProps.disabled = disabled;\n      }\n    }\n  } else if (rootElementName !== '') {\n    if (!href && !to) {\n      buttonProps.role = 'button';\n      buttonProps.tabIndex = tabIndex ?? 0;\n    }\n\n    if (disabled) {\n      buttonProps['aria-disabled'] = disabled;\n      buttonProps.tabIndex = focusableWhenDisabled ? tabIndex ?? 0 : -1;\n    }\n  }\n\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = { ...extractEventHandlers(parameters),\n      ...extractEventHandlers(externalProps)\n    };\n    const props = {\n      type,\n      ...externalEventHandlers,\n      ...buttonProps,\n      ...externalProps,\n      onBlur: createHandleBlur(externalEventHandlers),\n      onClick: createHandleClick(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\n      onKeyUp: createHandleKeyUp(externalEventHandlers),\n      onMouseDown: createHandleMouseDown(externalEventHandlers),\n      onMouseLeave: createHandleMouseLeave(externalEventHandlers),\n      ref: handleRef\n    }; // onFocusVisible can be present on the props or parameters,\n    // but it's not a valid React event handler so it must not be forwarded to the inner component.\n    // If present, it will be handled by the focus handler.\n\n    delete props.onFocusVisible;\n    return props;\n  };\n\n  return {\n    getRootProps,\n    focusVisible,\n    setFocusVisible,\n    active,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useButton/useButton.js"],"names":["React","unstable_useForkRef","useForkRef","unstable_isFocusVisible","isFocusVisible","extractEventHandlers","useRootElementName","useButton","parameters","disabled","focusableWhenDisabled","href","rootRef","externalRef","tabIndex","to","type","rootElementName","rootElementNameProp","buttonRef","useRef","active","setActive","useState","focusVisible","setFocusVisible","updateRootElementName","undefined","componentName","createHandleMouseLeave","otherHandlers","event","preventDefault","onMouseLeave","createHandleBlur","target","onBlur","createHandleFocus","current","currentTarget","onFocusVisible","onFocus","isNativeButton","button","includes","createHandleClick","onClick","createHandleMouseDown","document","addEventListener","once","onMouseDown","createHandleKeyDown","onKeyDown","defaultMuiPrevented","key","createHandleKeyUp","onKeyUp","handleRef","buttonProps","role","getRootProps","externalProps","externalEventHandlers","props","ref"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_isFocusVisible as isFocusVisible } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useRootElementName } from '../utils/useRootElementName';\n/**\n *\n * Demos:\n *\n * - [Button](https://next.mui.com/base-ui/react-button/#hook)\n *\n * API:\n *\n * - [useButton API](https://next.mui.com/base-ui/react-button/hooks-api/#use-button)\n */\nexport function useButton(parameters = {}) {\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    href,\n    rootRef: externalRef,\n    tabIndex,\n    to,\n    type,\n    rootElementName: rootElementNameProp\n  } = parameters;\n  const buttonRef = React.useRef(null);\n  const [active, setActive] = React.useState(false);\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  if (disabled && !focusableWhenDisabled && focusVisible) {\n    setFocusVisible(false);\n  }\n  const [rootElementName, updateRootElementName] = useRootElementName({\n    rootElementName: rootElementNameProp ?? (href || to ? 'a' : undefined),\n    componentName: 'Button'\n  });\n  const createHandleMouseLeave = otherHandlers => event => {\n    if (focusVisible) {\n      event.preventDefault();\n    }\n    otherHandlers.onMouseLeave?.(event);\n  };\n  const createHandleBlur = otherHandlers => event => {\n    if (!isFocusVisible(event.target)) {\n      setFocusVisible(false);\n    }\n    otherHandlers.onBlur?.(event);\n  };\n  const createHandleFocus = otherHandlers => event => {\n    // Fix for https://github.com/facebook/react/issues/7769\n    if (!buttonRef.current) {\n      buttonRef.current = event.currentTarget;\n    }\n    if (isFocusVisible(event.target)) {\n      setFocusVisible(true);\n      otherHandlers.onFocusVisible?.(event);\n    }\n    otherHandlers.onFocus?.(event);\n  };\n  const isNativeButton = () => {\n    const button = buttonRef.current;\n    return rootElementName === 'BUTTON' || rootElementName === 'INPUT' && ['button', 'submit', 'reset'].includes(button?.type) || rootElementName === 'A' && button?.href;\n  };\n  const createHandleClick = otherHandlers => event => {\n    if (!disabled) {\n      otherHandlers.onClick?.(event);\n    }\n  };\n  const createHandleMouseDown = otherHandlers => event => {\n    if (!disabled) {\n      setActive(true);\n      document.addEventListener('mouseup', () => {\n        setActive(false);\n      }, {\n        once: true\n      });\n    }\n    otherHandlers.onMouseDown?.(event);\n  };\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.target === event.currentTarget && !isNativeButton() && event.key === ' ') {\n      event.preventDefault();\n    }\n    if (event.target === event.currentTarget && event.key === ' ' && !disabled) {\n      setActive(true);\n    }\n\n    // Keyboard accessibility for non interactive elements\n    if (event.target === event.currentTarget && !isNativeButton() && event.key === 'Enter' && !disabled) {\n      otherHandlers.onClick?.(event);\n      event.preventDefault();\n    }\n  };\n  const createHandleKeyUp = otherHandlers => event => {\n    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed\n    // https://codesandbox.io/p/sandbox/button-keyup-preventdefault-dn7f0\n\n    if (event.target === event.currentTarget) {\n      setActive(false);\n    }\n    otherHandlers.onKeyUp?.(event);\n\n    // Keyboard accessibility for non interactive elements\n    if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === ' ' && !event.defaultMuiPrevented) {\n      otherHandlers.onClick?.(event);\n    }\n  };\n  const handleRef = useForkRef(updateRootElementName, externalRef, buttonRef);\n  const buttonProps = {};\n  if (tabIndex !== undefined) {\n    buttonProps.tabIndex = tabIndex;\n  }\n  if (rootElementName === 'BUTTON') {\n    buttonProps.type = type ?? 'button';\n    if (focusableWhenDisabled) {\n      buttonProps['aria-disabled'] = disabled;\n    } else {\n      buttonProps.disabled = disabled;\n    }\n  } else if (rootElementName === 'INPUT') {\n    if (type && ['button', 'submit', 'reset'].includes(type)) {\n      if (focusableWhenDisabled) {\n        buttonProps['aria-disabled'] = disabled;\n      } else {\n        buttonProps.disabled = disabled;\n      }\n    }\n  } else if (rootElementName !== '') {\n    if (!href && !to) {\n      buttonProps.role = 'button';\n      buttonProps.tabIndex = tabIndex ?? 0;\n    }\n    if (disabled) {\n      buttonProps['aria-disabled'] = disabled;\n      buttonProps.tabIndex = focusableWhenDisabled ? tabIndex ?? 0 : -1;\n    }\n  }\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = {\n      ...extractEventHandlers(parameters),\n      ...extractEventHandlers(externalProps)\n    };\n    const props = {\n      type,\n      ...externalEventHandlers,\n      ...buttonProps,\n      ...externalProps,\n      onBlur: createHandleBlur(externalEventHandlers),\n      onClick: createHandleClick(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\n      onKeyUp: createHandleKeyUp(externalEventHandlers),\n      onMouseDown: createHandleMouseDown(externalEventHandlers),\n      onMouseLeave: createHandleMouseLeave(externalEventHandlers),\n      ref: handleRef\n    };\n\n    // onFocusVisible can be present on the props or parameters,\n    // but it's not a valid React event handler so it must not be forwarded to the inner component.\n    // If present, it will be handled by the focus handler.\n    delete props.onFocusVisible;\n    return props;\n  };\n  return {\n    getRootProps,\n    focusVisible,\n    setFocusVisible,\n    active,\n    rootRef: handleRef\n  };\n}"]},"metadata":{},"sourceType":"module"}