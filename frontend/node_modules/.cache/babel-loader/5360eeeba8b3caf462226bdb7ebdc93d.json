{"ast":null,"code":"import _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\n/**\n * For using in `sx` prop to sort the breakpoint from low to high.\n * Note: this function does not work and will not support multiple units.\n *       e.g. input: { '@container (min-width:300px)': '1rem', '@container (min-width:40rem)': '2rem' }\n *            output: { '@container (min-width:40rem)': '2rem', '@container (min-width:300px)': '1rem' } // since 40 < 300 eventhough 40rem > 300px\n */\n\nexport function sortContainerQueries(theme, css) {\n  if (!theme.containerQueries) {\n    return css;\n  }\n\n  const sorted = Object.keys(css).filter(key => key.startsWith('@container')).sort((a, b) => {\n    const regex = /min-width:\\s*([0-9.]+)/;\n    return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);\n  });\n\n  if (!sorted.length) {\n    return css;\n  }\n\n  return sorted.reduce((acc, key) => {\n    const value = css[key];\n    delete acc[key];\n    acc[key] = value;\n    return acc;\n  }, { ...css\n  });\n}\nexport function isCqShorthand(breakpointKeys, value) {\n  return value === '@' || value.startsWith('@') && (breakpointKeys.some(key => value.startsWith(`@${key}`)) || !!value.match(/^@\\d/));\n}\nexport function getContainerQuery(theme, shorthand) {\n  const matches = shorthand.match(/^@([^/]+)?\\/?(.+)?$/);\n\n  if (!matches) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \\`@<breakpoint | number>\\` or \\`@<breakpoint | number>/<container>\\`.\nFor example, \\`@sm\\` or \\`@600\\` or \\`@40rem/sidebar\\`.` : _formatMuiErrorMessage(18, `(${shorthand})`));\n    }\n\n    return null;\n  }\n\n  const [, containerQuery, containerName] = matches;\n  const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;\n  return theme.containerQueries(containerName).up(value);\n}\nexport default function cssContainerQueries(themeInput) {\n  const toContainerQuery = (mediaQuery, name) => mediaQuery.replace('@media', name ? `@container ${name}` : '@container');\n\n  function attachCq(node, name) {\n    node.up = function () {\n      return toContainerQuery(themeInput.breakpoints.up(...arguments), name);\n    };\n\n    node.down = function () {\n      return toContainerQuery(themeInput.breakpoints.down(...arguments), name);\n    };\n\n    node.between = function () {\n      return toContainerQuery(themeInput.breakpoints.between(...arguments), name);\n    };\n\n    node.only = function () {\n      return toContainerQuery(themeInput.breakpoints.only(...arguments), name);\n    };\n\n    node.not = function () {\n      const result = toContainerQuery(themeInput.breakpoints.not(...arguments), name);\n\n      if (result.includes('not all and')) {\n        // `@container` does not work with `not all and`, so need to invert the logic\n        return result.replace('not all and ', '').replace('min-width:', 'width<').replace('max-width:', 'width>').replace('and', 'or');\n      }\n\n      return result;\n    };\n  }\n\n  const node = {};\n\n  const containerQueries = name => {\n    attachCq(node, name);\n    return node;\n  };\n\n  attachCq(containerQueries);\n  return { ...themeInput,\n    containerQueries\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/system/cssContainerQueries/cssContainerQueries.js"],"names":["_formatMuiErrorMessage","sortContainerQueries","theme","css","containerQueries","sorted","Object","keys","filter","key","startsWith","sort","a","b","regex","match","length","reduce","acc","value","isCqShorthand","breakpointKeys","some","getContainerQuery","shorthand","matches","process","env","NODE_ENV","Error","containerQuery","containerName","Number","isNaN","up","cssContainerQueries","themeInput","toContainerQuery","mediaQuery","name","replace","attachCq","node","breakpoints","down","between","only","not","result","includes"],"mappings":"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","sourcesContent":["import _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\n/**\n * For using in `sx` prop to sort the breakpoint from low to high.\n * Note: this function does not work and will not support multiple units.\n *       e.g. input: { '@container (min-width:300px)': '1rem', '@container (min-width:40rem)': '2rem' }\n *            output: { '@container (min-width:40rem)': '2rem', '@container (min-width:300px)': '1rem' } // since 40 < 300 eventhough 40rem > 300px\n */\nexport function sortContainerQueries(theme, css) {\n  if (!theme.containerQueries) {\n    return css;\n  }\n  const sorted = Object.keys(css).filter(key => key.startsWith('@container')).sort((a, b) => {\n    const regex = /min-width:\\s*([0-9.]+)/;\n    return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);\n  });\n  if (!sorted.length) {\n    return css;\n  }\n  return sorted.reduce((acc, key) => {\n    const value = css[key];\n    delete acc[key];\n    acc[key] = value;\n    return acc;\n  }, {\n    ...css\n  });\n}\nexport function isCqShorthand(breakpointKeys, value) {\n  return value === '@' || value.startsWith('@') && (breakpointKeys.some(key => value.startsWith(`@${key}`)) || !!value.match(/^@\\d/));\n}\nexport function getContainerQuery(theme, shorthand) {\n  const matches = shorthand.match(/^@([^/]+)?\\/?(.+)?$/);\n  if (!matches) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \\`@<breakpoint | number>\\` or \\`@<breakpoint | number>/<container>\\`.\nFor example, \\`@sm\\` or \\`@600\\` or \\`@40rem/sidebar\\`.` : _formatMuiErrorMessage(18, `(${shorthand})`));\n    }\n    return null;\n  }\n  const [, containerQuery, containerName] = matches;\n  const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;\n  return theme.containerQueries(containerName).up(value);\n}\nexport default function cssContainerQueries(themeInput) {\n  const toContainerQuery = (mediaQuery, name) => mediaQuery.replace('@media', name ? `@container ${name}` : '@container');\n  function attachCq(node, name) {\n    node.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);\n    node.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);\n    node.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);\n    node.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);\n    node.not = (...args) => {\n      const result = toContainerQuery(themeInput.breakpoints.not(...args), name);\n      if (result.includes('not all and')) {\n        // `@container` does not work with `not all and`, so need to invert the logic\n        return result.replace('not all and ', '').replace('min-width:', 'width<').replace('max-width:', 'width>').replace('and', 'or');\n      }\n      return result;\n    };\n  }\n  const node = {};\n  const containerQueries = name => {\n    attachCq(node, name);\n    return node;\n  };\n  attachCq(containerQueries);\n  return {\n    ...themeInput,\n    containerQueries\n  };\n}"]},"metadata":{},"sourceType":"module"}