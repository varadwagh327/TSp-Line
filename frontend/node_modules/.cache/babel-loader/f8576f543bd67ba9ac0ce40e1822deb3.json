{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect, visuallyHidden as visuallyHiddenStyle } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n\n  if (selectedOption?.value == null) {\n    return '';\n  }\n\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n\n  return JSON.stringify(selectedOption.value);\n}\n/**\n *\n * Demos:\n *\n * - [Select](https://next.mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://next.mui.com/base-ui/react-select/hooks-api/#use-select)\n */\n\n\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n\n      return valueProp == null ? [] : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    return option?.disabled ?? false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => options.get(itemValue)?.id, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange?.(event, newValues);\n    } else {\n      onChange?.(event, newValues[0] ?? null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange?.(event, newValue ?? null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange?.(fieldValue);\n\n      if (fieldValue === false && event?.type !== 'blur') {\n        buttonRef.current?.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    if (itemId == null) {\n      return null;\n    }\n\n    return subitems.get(itemId)?.ref.current ?? null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => ({\n      highlightedValue: null,\n      selectedValues: defaultValue ?? [],\n      open: defaultOpen\n    }),\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters); // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      const optionRef = getOptionByValue(highlightedOption)?.ref;\n\n      if (!listboxRef.current || !optionRef?.current) {\n        return;\n      }\n\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n\n  const createHandleButtonClick = externalEventHandlers => event => {\n    externalEventHandlers?.onClick?.(event);\n\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n\n  const getButtonOwnRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onClick: createHandleButtonClick(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    };\n  };\n\n  const getSelectTriggerProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return { ...otherHandlers,\n      ...getButtonOwnRootProps(otherHandlers),\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    };\n  };\n\n  const getButtonProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);\n    return { ...externalProps,\n      ...combinedProps(externalEventHandlers)\n    };\n  };\n\n  const createListboxHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (listboxRef.current?.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const getOwnListboxHandlers = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onBlur: createListboxHandleBlur(otherHandlers)\n    };\n  };\n\n  const getListboxProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ...externalProps,\n      ...getCombinedRootProps(externalEventHandlers)\n    };\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({ ...listContextValue,\n    ...compoundComponentContextValue\n  }), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  let selectedOptionsMetadata;\n\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    selectedOptionsMetadata = getOptionMetadata(selectValue) ?? null;\n  }\n\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    externalEventHandlers?.onChange?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    const option = options.get(event.target.value); // support autofill\n\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n\n  const getHiddenInputProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return {\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle,\n      ...externalProps,\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    };\n  };\n\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n\nexport { useSelect };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useSelect/useSelect.js"],"names":["React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","visuallyHidden","visuallyHiddenStyle","useButton","SelectActionTypes","ListActionTypes","useList","defaultOptionStringifier","useCompoundParent","extractEventHandlers","selectReducer","combineHooksSlotProps","defaultFormValueProvider","selectedOption","Array","isArray","length","JSON","stringify","map","o","value","useSelect","props","areOptionsEqual","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","name","required","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","getOptionAsString","getSerializedValue","valueProp","componentName","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","option","index","label","ref","createRef","id","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","rootRef","mergedButtonRef","optionValues","from","keys","getOptionByValue","useCallback","valueToGet","similarValue","find","optionValue","get","isItemDisabled","valueToCheck","stringifyOption","controlledState","selectedValues","getItemId","itemValue","handleSelectionChange","event","newValues","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","current","focus","getItemDomElement","itemId","useListParameters","getInitialState","highlightedValue","controlledProps","focusManagement","itemComparer","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","isInitiallyOpen","optionRef","preventScroll","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","createHandleButtonClick","externalEventHandlers","onClick","defaultMuiPrevented","action","buttonClick","createHandleButtonKeyDown","otherHandlers","onKeyDown","key","preventDefault","keyDown","getButtonOwnRootProps","getSelectTriggerProps","role","getButtonProps","externalProps","combinedProps","createListboxHandleBlur","onBlur","contains","relatedTarget","getOwnListboxHandlers","getListboxProps","getCombinedRootProps","useDebugValue","selectValue","selectedOptionsMetadata","v","filter","createHandleHiddenInputChange","target","clearSelection","browserAutoFill","item","getHiddenInputProps","tabIndex","style"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect, visuallyHidden as visuallyHiddenStyle } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n  if (selectedOption?.value == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://next.mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://next.mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    return option?.disabled ?? false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => options.get(itemValue)?.id, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange?.(event, newValues);\n    } else {\n      onChange?.(event, newValues[0] ?? null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange?.(event, newValue ?? null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange?.(fieldValue);\n      if (fieldValue === false && event?.type !== 'blur') {\n        buttonRef.current?.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    if (itemId == null) {\n      return null;\n    }\n    return subitems.get(itemId)?.ref.current ?? null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => ({\n      highlightedValue: null,\n      selectedValues: defaultValue ?? [],\n      open: defaultOpen\n    }),\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n\n  // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      const optionRef = getOptionByValue(highlightedOption)?.ref;\n      if (!listboxRef.current || !optionRef?.current) {\n        return;\n      }\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const createHandleButtonClick = externalEventHandlers => event => {\n    externalEventHandlers?.onClick?.(event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const getButtonOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleButtonClick(otherHandlers),\n    onKeyDown: createHandleButtonKeyDown(otherHandlers)\n  });\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return {\n      ...otherHandlers,\n      ...getButtonOwnRootProps(otherHandlers),\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    };\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);\n    return {\n      ...externalProps,\n      ...combinedProps(externalEventHandlers)\n    };\n  };\n  const createListboxHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (listboxRef.current?.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createListboxHandleBlur(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ...externalProps,\n      ...getCombinedRootProps(externalEventHandlers)\n    };\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    ...listContextValue,\n    ...compoundComponentContextValue\n  }), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    selectedOptionsMetadata = getOptionMetadata(selectValue) ?? null;\n  }\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    externalEventHandlers?.onChange?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n\n    // support autofill\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return {\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle,\n      ...externalProps,\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    };\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport { useSelect };"]},"metadata":{},"sourceType":"module"}