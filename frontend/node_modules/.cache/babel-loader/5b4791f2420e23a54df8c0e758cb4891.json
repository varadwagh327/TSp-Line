{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useTimeout as useTimeout } from '@mui/utils';\nimport extractEventHandlers from '@mui/utils/extractEventHandlers';\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\n\nfunction useSnackbar() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = useTimeout();\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n\n\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        if (nativeEvent.key === 'Escape') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose?.(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback((event, reason) => {\n    onClose?.(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    timerAutoHide.start(autoHideDurationParam, () => {\n      handleClose(null, 'timeout');\n    });\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return timerAutoHide.clear;\n  }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);\n\n  const handleClickAway = event => {\n    onClose?.(event, 'clickaway');\n  }; // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n\n\n  const handlePause = timerAutoHide.clear; // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback?.(event);\n    handleResume();\n  };\n\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback?.(event);\n    handlePause();\n  };\n\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback?.(event);\n    handlePause();\n  };\n\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback?.(event);\n    handleResume();\n  };\n\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, open, handleResume, handlePause]);\n\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = { ...extractEventHandlers(parameters),\n      ...extractEventHandlers(externalProps)\n    };\n    return {\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation',\n      ...externalProps,\n      ...externalEventHandlers,\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    };\n  };\n\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}\n\nexport default useSnackbar;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/Snackbar/useSnackbar.js"],"names":["React","unstable_useEventCallback","useEventCallback","unstable_useTimeout","useTimeout","extractEventHandlers","useSnackbar","parameters","autoHideDuration","disableWindowBlurListener","onClose","open","resumeHideDuration","timerAutoHide","useEffect","undefined","handleKeyDown","nativeEvent","defaultPrevented","key","document","addEventListener","removeEventListener","handleClose","event","reason","setAutoHideTimer","autoHideDurationParam","start","clear","handleClickAway","handlePause","handleResume","useCallback","createHandleBlur","otherHandlers","onBlurCallback","onBlur","createHandleFocus","onFocusCallback","onFocus","createMouseEnter","onMouseEnterCallback","onMouseEnter","createMouseLeave","onMouseLeaveCallback","onMouseLeave","window","getRootProps","externalProps","externalEventHandlers","role","onClickAway"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,yBAAyB,IAAIC,gBAAtC,EAAwDC,mBAAmB,IAAIC,UAA/E,QAAiG,YAAjG;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,GAAsC;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;AACpC,QAAM;AACJC,IAAAA,gBAAgB,GAAG,IADf;AAEJC,IAAAA,yBAAyB,GAAG,KAFxB;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA;AALI,MAMFL,UANJ;AAOA,QAAMM,aAAa,GAAGT,UAAU,EAAhC;AACAJ,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACH,IAAL,EAAW;AACT,aAAOI,SAAP;AACD;AAED;AACJ;AACA;;;AACI,aAASC,aAAT,CAAuBC,WAAvB,EAAoC;AAClC,UAAI,CAACA,WAAW,CAACC,gBAAjB,EAAmC;AACjC,YAAID,WAAW,CAACE,GAAZ,KAAoB,QAAxB,EAAkC;AAChC;AACAT,UAAAA,OAAO,GAAGO,WAAH,EAAgB,eAAhB,CAAP;AACD;AACF;AACF;;AACDG,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCL,aAArC;AACA,WAAO,MAAM;AACXI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCN,aAAxC;AACD,KAFD;AAGD,GApBD,EAoBG,CAACL,IAAD,EAAOD,OAAP,CApBH;AAqBA,QAAMa,WAAW,GAAGrB,gBAAgB,CAAC,CAACsB,KAAD,EAAQC,MAAR,KAAmB;AACtDf,IAAAA,OAAO,GAAGc,KAAH,EAAUC,MAAV,CAAP;AACD,GAFmC,CAApC;AAGA,QAAMC,gBAAgB,GAAGxB,gBAAgB,CAACyB,qBAAqB,IAAI;AACjE,QAAI,CAACjB,OAAD,IAAYiB,qBAAqB,IAAI,IAAzC,EAA+C;AAC7C;AACD;;AACDd,IAAAA,aAAa,CAACe,KAAd,CAAoBD,qBAApB,EAA2C,MAAM;AAC/CJ,MAAAA,WAAW,CAAC,IAAD,EAAO,SAAP,CAAX;AACD,KAFD;AAGD,GAPwC,CAAzC;AAQAvB,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpB,QAAIH,IAAJ,EAAU;AACRe,MAAAA,gBAAgB,CAAClB,gBAAD,CAAhB;AACD;;AACD,WAAOK,aAAa,CAACgB,KAArB;AACD,GALD,EAKG,CAAClB,IAAD,EAAOH,gBAAP,EAAyBkB,gBAAzB,EAA2Cb,aAA3C,CALH;;AAMA,QAAMiB,eAAe,GAAGN,KAAK,IAAI;AAC/Bd,IAAAA,OAAO,GAAGc,KAAH,EAAU,WAAV,CAAP;AACD,GAFD,CA/CoC,CAmDpC;AACA;;;AACA,QAAMO,WAAW,GAAGlB,aAAa,CAACgB,KAAlC,CArDoC,CAuDpC;AACA;;AACA,QAAMG,YAAY,GAAGhC,KAAK,CAACiC,WAAN,CAAkB,MAAM;AAC3C,QAAIzB,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BkB,MAAAA,gBAAgB,CAACd,kBAAkB,IAAI,IAAtB,GAA6BA,kBAA7B,GAAkDJ,gBAAgB,GAAG,GAAtE,CAAhB;AACD;AACF,GAJoB,EAIlB,CAACA,gBAAD,EAAmBI,kBAAnB,EAAuCc,gBAAvC,CAJkB,CAArB;;AAKA,QAAMQ,gBAAgB,GAAGC,aAAa,IAAIX,KAAK,IAAI;AACjD,UAAMY,cAAc,GAAGD,aAAa,CAACE,MAArC;AACAD,IAAAA,cAAc,GAAGZ,KAAH,CAAd;AACAQ,IAAAA,YAAY;AACb,GAJD;;AAKA,QAAMM,iBAAiB,GAAGH,aAAa,IAAIX,KAAK,IAAI;AAClD,UAAMe,eAAe,GAAGJ,aAAa,CAACK,OAAtC;AACAD,IAAAA,eAAe,GAAGf,KAAH,CAAf;AACAO,IAAAA,WAAW;AACZ,GAJD;;AAKA,QAAMU,gBAAgB,GAAGN,aAAa,IAAIX,KAAK,IAAI;AACjD,UAAMkB,oBAAoB,GAAGP,aAAa,CAACQ,YAA3C;AACAD,IAAAA,oBAAoB,GAAGlB,KAAH,CAApB;AACAO,IAAAA,WAAW;AACZ,GAJD;;AAKA,QAAMa,gBAAgB,GAAGT,aAAa,IAAIX,KAAK,IAAI;AACjD,UAAMqB,oBAAoB,GAAGV,aAAa,CAACW,YAA3C;AACAD,IAAAA,oBAAoB,GAAGrB,KAAH,CAApB;AACAQ,IAAAA,YAAY;AACb,GAJD;;AAKAhC,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpB;AACA,QAAI,CAACL,yBAAD,IAA8BE,IAAlC,EAAwC;AACtCoC,MAAAA,MAAM,CAAC1B,gBAAP,CAAwB,OAAxB,EAAiCW,YAAjC;AACAe,MAAAA,MAAM,CAAC1B,gBAAP,CAAwB,MAAxB,EAAgCU,WAAhC;AACA,aAAO,MAAM;AACXgB,QAAAA,MAAM,CAACzB,mBAAP,CAA2B,OAA3B,EAAoCU,YAApC;AACAe,QAAAA,MAAM,CAACzB,mBAAP,CAA2B,MAA3B,EAAmCS,WAAnC;AACD,OAHD;AAID;;AACD,WAAOhB,SAAP;AACD,GAXD,EAWG,CAACN,yBAAD,EAA4BE,IAA5B,EAAkCqB,YAAlC,EAAgDD,WAAhD,CAXH;;AAYA,QAAMiB,YAAY,GAAG,YAAwB;AAAA,QAAvBC,aAAuB,uEAAP,EAAO;AAC3C,UAAMC,qBAAqB,GAAG,EAC5B,GAAG7C,oBAAoB,CAACE,UAAD,CADK;AAE5B,SAAGF,oBAAoB,CAAC4C,aAAD;AAFK,KAA9B;AAIA,WAAO;AACL;AACA;AACAE,MAAAA,IAAI,EAAE,cAHD;AAIL,SAAGF,aAJE;AAKL,SAAGC,qBALE;AAMLb,MAAAA,MAAM,EAAEH,gBAAgB,CAACgB,qBAAD,CANnB;AAOLV,MAAAA,OAAO,EAAEF,iBAAiB,CAACY,qBAAD,CAPrB;AAQLP,MAAAA,YAAY,EAAEF,gBAAgB,CAACS,qBAAD,CARzB;AASLJ,MAAAA,YAAY,EAAEF,gBAAgB,CAACM,qBAAD;AATzB,KAAP;AAWD,GAhBD;;AAiBA,SAAO;AACLF,IAAAA,YADK;AAELI,IAAAA,WAAW,EAAEtB;AAFR,GAAP;AAID;;AACD,eAAexB,WAAf","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useTimeout as useTimeout } from '@mui/utils';\nimport extractEventHandlers from '@mui/utils/extractEventHandlers';\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\nfunction useSnackbar(parameters = {}) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = useTimeout();\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        if (nativeEvent.key === 'Escape') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose?.(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback((event, reason) => {\n    onClose?.(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n    timerAutoHide.start(autoHideDurationParam, () => {\n      handleClose(null, 'timeout');\n    });\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n    return timerAutoHide.clear;\n  }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);\n  const handleClickAway = event => {\n    onClose?.(event, 'clickaway');\n  };\n\n  // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n  const handlePause = timerAutoHide.clear;\n\n  // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback?.(event);\n    handleResume();\n  };\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback?.(event);\n    handlePause();\n  };\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback?.(event);\n    handlePause();\n  };\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback?.(event);\n    handleResume();\n  };\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n    return undefined;\n  }, [disableWindowBlurListener, open, handleResume, handlePause]);\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = {\n      ...extractEventHandlers(parameters),\n      ...extractEventHandlers(externalProps)\n    };\n    return {\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation',\n      ...externalProps,\n      ...externalEventHandlers,\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    };\n  };\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}\nexport default useSnackbar;"]},"metadata":{},"sourceType":"module"}