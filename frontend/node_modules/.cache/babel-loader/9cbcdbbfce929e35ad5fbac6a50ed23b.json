{"ast":null,"code":"import { ListActionTypes, listReducer } from '../useList';\nexport function menuReducer(state, action) {\n  if (action.type === ListActionTypes.itemHover) {\n    return { ...state,\n      highlightedValue: action.item\n    };\n  }\n\n  const newState = listReducer(state, action); // make sure an item is always highlighted\n\n  if (newState.highlightedValue === null && action.context.items.length > 0) {\n    return { ...newState,\n      highlightedValue: action.context.items[0]\n    };\n  }\n\n  if (action.type === ListActionTypes.keyDown) {\n    if (action.event.key === 'Escape') {\n      return { ...newState,\n        open: false\n      };\n    }\n  }\n\n  if (action.type === ListActionTypes.blur) {\n    if (!action.context.listboxRef.current?.contains(action.event.relatedTarget)) {\n      // To prevent the menu from closing when the focus leaves the menu to the button.\n      // For more details, see https://github.com/mui/material-ui/pull/36917#issuecomment-1566992698\n      const listboxId = action.context.listboxRef.current?.getAttribute('id');\n      const controlledBy = action.event.relatedTarget?.getAttribute('aria-controls');\n\n      if (listboxId && controlledBy && listboxId === controlledBy) {\n        return newState;\n      }\n\n      return { ...newState,\n        open: false,\n        highlightedValue: action.context.items[0]\n      };\n    }\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useMenu/menuReducer.js"],"names":["ListActionTypes","listReducer","menuReducer","state","action","type","itemHover","highlightedValue","item","newState","context","items","length","keyDown","event","key","open","blur","listboxRef","current","contains","relatedTarget","listboxId","getAttribute","controlledBy"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,YAA7C;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AACzC,MAAIA,MAAM,CAACC,IAAP,KAAgBL,eAAe,CAACM,SAApC,EAA+C;AAC7C,WAAO,EACL,GAAGH,KADE;AAELI,MAAAA,gBAAgB,EAAEH,MAAM,CAACI;AAFpB,KAAP;AAID;;AACD,QAAMC,QAAQ,GAAGR,WAAW,CAACE,KAAD,EAAQC,MAAR,CAA5B,CAPyC,CASzC;;AACA,MAAIK,QAAQ,CAACF,gBAAT,KAA8B,IAA9B,IAAsCH,MAAM,CAACM,OAAP,CAAeC,KAAf,CAAqBC,MAArB,GAA8B,CAAxE,EAA2E;AACzE,WAAO,EACL,GAAGH,QADE;AAELF,MAAAA,gBAAgB,EAAEH,MAAM,CAACM,OAAP,CAAeC,KAAf,CAAqB,CAArB;AAFb,KAAP;AAID;;AACD,MAAIP,MAAM,CAACC,IAAP,KAAgBL,eAAe,CAACa,OAApC,EAA6C;AAC3C,QAAIT,MAAM,CAACU,KAAP,CAAaC,GAAb,KAAqB,QAAzB,EAAmC;AACjC,aAAO,EACL,GAAGN,QADE;AAELO,QAAAA,IAAI,EAAE;AAFD,OAAP;AAID;AACF;;AACD,MAAIZ,MAAM,CAACC,IAAP,KAAgBL,eAAe,CAACiB,IAApC,EAA0C;AACxC,QAAI,CAACb,MAAM,CAACM,OAAP,CAAeQ,UAAf,CAA0BC,OAA1B,EAAmCC,QAAnC,CAA4ChB,MAAM,CAACU,KAAP,CAAaO,aAAzD,CAAL,EAA8E;AAC5E;AACA;AACA,YAAMC,SAAS,GAAGlB,MAAM,CAACM,OAAP,CAAeQ,UAAf,CAA0BC,OAA1B,EAAmCI,YAAnC,CAAgD,IAAhD,CAAlB;AACA,YAAMC,YAAY,GAAGpB,MAAM,CAACU,KAAP,CAAaO,aAAb,EAA4BE,YAA5B,CAAyC,eAAzC,CAArB;;AACA,UAAID,SAAS,IAAIE,YAAb,IAA6BF,SAAS,KAAKE,YAA/C,EAA6D;AAC3D,eAAOf,QAAP;AACD;;AACD,aAAO,EACL,GAAGA,QADE;AAELO,QAAAA,IAAI,EAAE,KAFD;AAGLT,QAAAA,gBAAgB,EAAEH,MAAM,CAACM,OAAP,CAAeC,KAAf,CAAqB,CAArB;AAHb,OAAP;AAKD;AACF;;AACD,SAAOF,QAAP;AACD","sourcesContent":["import { ListActionTypes, listReducer } from '../useList';\nexport function menuReducer(state, action) {\n  if (action.type === ListActionTypes.itemHover) {\n    return {\n      ...state,\n      highlightedValue: action.item\n    };\n  }\n  const newState = listReducer(state, action);\n\n  // make sure an item is always highlighted\n  if (newState.highlightedValue === null && action.context.items.length > 0) {\n    return {\n      ...newState,\n      highlightedValue: action.context.items[0]\n    };\n  }\n  if (action.type === ListActionTypes.keyDown) {\n    if (action.event.key === 'Escape') {\n      return {\n        ...newState,\n        open: false\n      };\n    }\n  }\n  if (action.type === ListActionTypes.blur) {\n    if (!action.context.listboxRef.current?.contains(action.event.relatedTarget)) {\n      // To prevent the menu from closing when the focus leaves the menu to the button.\n      // For more details, see https://github.com/mui/material-ui/pull/36917#issuecomment-1566992698\n      const listboxId = action.context.listboxRef.current?.getAttribute('id');\n      const controlledBy = action.event.relatedTarget?.getAttribute('aria-controls');\n      if (listboxId && controlledBy && listboxId === controlledBy) {\n        return newState;\n      }\n      return {\n        ...newState,\n        open: false,\n        highlightedValue: action.context.items[0]\n      };\n    }\n  }\n  return newState;\n}"]},"metadata":{},"sourceType":"module"}