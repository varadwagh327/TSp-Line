{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - do not document.\n *\n * Use this function determine the host element correctly on the server (in a SSR context, for example Next.js)\n */\n\nexport function useRootElementName(parameters) {\n  const {\n    rootElementName: rootElementNameProp = '',\n    componentName\n  } = parameters;\n  const [rootElementName, setRootElementName] = React.useState(rootElementNameProp.toUpperCase());\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (rootElementNameProp && rootElementName !== rootElementNameProp.toUpperCase()) {\n        console.error(`useRootElementName: the \\`rootElementName\\` prop of ${componentName ? `the ${componentName} component` : 'a component'} expected the '${rootElementNameProp}' element, but a '${rootElementName.toLowerCase()}' was rendered instead`, 'This may cause hydration issues in an SSR context, for example in a Next.js app');\n      }\n    }, [rootElementNameProp, rootElementName, componentName]);\n  }\n\n  const updateRootElementName = React.useCallback(instance => {\n    setRootElementName(instance?.tagName ?? '');\n  }, []);\n  return [rootElementName, updateRootElementName];\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/utils/useRootElementName.js"],"names":["React","useRootElementName","parameters","rootElementName","rootElementNameProp","componentName","setRootElementName","useState","toUpperCase","process","env","NODE_ENV","useEffect","console","error","toLowerCase","updateRootElementName","useCallback","instance","tagName"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;AAC7C,QAAM;AACJC,IAAAA,eAAe,EAAEC,mBAAmB,GAAG,EADnC;AAEJC,IAAAA;AAFI,MAGFH,UAHJ;AAIA,QAAM,CAACC,eAAD,EAAkBG,kBAAlB,IAAwCN,KAAK,CAACO,QAAN,CAAeH,mBAAmB,CAACI,WAApB,EAAf,CAA9C;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAX,IAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,UAAIR,mBAAmB,IAAID,eAAe,KAAKC,mBAAmB,CAACI,WAApB,EAA/C,EAAkF;AAChFK,QAAAA,OAAO,CAACC,KAAR,CAAe,uDAAsDT,aAAa,GAAI,OAAMA,aAAc,YAAxB,GAAsC,aAAc,kBAAiBD,mBAAoB,qBAAoBD,eAAe,CAACY,WAAhB,EAA8B,wBAA7N,EAAsP,iFAAtP;AACD;AACF,KAJD,EAIG,CAACX,mBAAD,EAAsBD,eAAtB,EAAuCE,aAAvC,CAJH;AAKD;;AACD,QAAMW,qBAAqB,GAAGhB,KAAK,CAACiB,WAAN,CAAkBC,QAAQ,IAAI;AAC1DZ,IAAAA,kBAAkB,CAACY,QAAQ,EAAEC,OAAV,IAAqB,EAAtB,CAAlB;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAGA,SAAO,CAAChB,eAAD,EAAkBa,qBAAlB,CAAP;AACD","sourcesContent":["'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - do not document.\n *\n * Use this function determine the host element correctly on the server (in a SSR context, for example Next.js)\n */\nexport function useRootElementName(parameters) {\n  const {\n    rootElementName: rootElementNameProp = '',\n    componentName\n  } = parameters;\n  const [rootElementName, setRootElementName] = React.useState(rootElementNameProp.toUpperCase());\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (rootElementNameProp && rootElementName !== rootElementNameProp.toUpperCase()) {\n        console.error(`useRootElementName: the \\`rootElementName\\` prop of ${componentName ? `the ${componentName} component` : 'a component'} expected the '${rootElementNameProp}' element, but a '${rootElementName.toLowerCase()}' was rendered instead`, 'This may cause hydration issues in an SSR context, for example in a Next.js app');\n      }\n    }, [rootElementNameProp, rootElementName, componentName]);\n  }\n  const updateRootElementName = React.useCallback(instance => {\n    setRootElementName(instance?.tagName ?? '');\n  }, []);\n  return [rootElementName, updateRootElementName];\n}"]},"metadata":{},"sourceType":"module"}