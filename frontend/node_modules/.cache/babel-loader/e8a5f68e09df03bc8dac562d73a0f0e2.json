{"ast":null,"code":"'use client'; // A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport requirePropFactory from \"../utils/requirePropFactory.js\";\nimport styled from \"../styles/styled.js\";\nimport useThemeProps from \"../styles/useThemeProps.js\";\nimport useTheme from \"../styles/useTheme.js\";\nimport GridContext from \"./GridContext.js\";\nimport gridClasses, { getGridUtilityClass } from \"./gridClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function generateGrid(_ref) {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n\n    if (!size) {\n      return globalStyles;\n    }\n\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      } // Keep 7 significant numbers.\n\n\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${themeSpacing})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      } // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n\n      styles = {\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width,\n        ...more\n      };\n    } // No need for a media query for the first size.\n\n\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection(_ref2) {\n  let {\n    theme,\n    ownerState\n  } = _ref2;\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n\n    if (propValue.startsWith('column')) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n\n    return output;\n  });\n}\n/**\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\n * @returns [xs, sm]\n */\n\nfunction extractZeroValueBreakpointKeys(_ref3) {\n  let {\n    breakpoints,\n    values\n  } = _ref3;\n  let nonZeroKey = '';\n  Object.keys(values).forEach(key => {\n    if (nonZeroKey !== '') {\n      return;\n    }\n\n    if (values[key] !== 0) {\n      nonZeroKey = key;\n    }\n  });\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\n    return breakpoints[a] - breakpoints[b];\n  });\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\n}\n\nexport function generateRowGap(_ref4) {\n  let {\n    theme,\n    ownerState\n  } = _ref4;\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n\n    if (typeof rowSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: rowSpacingValues\n      });\n    }\n\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: theme.spacing(-propValue),\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: themeSpacing\n          }\n        };\n      }\n\n      if (zeroValueBreakpointKeys?.includes(breakpoint)) {\n        return {};\n      }\n\n      return {\n        marginTop: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingTop: 0\n        }\n      };\n    });\n  }\n\n  return styles;\n}\nexport function generateColumnGap(_ref5) {\n  let {\n    theme,\n    ownerState\n  } = _ref5;\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n\n    if (typeof columnSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: columnSpacingValues\n      });\n    }\n\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        const negativeValue = theme.spacing(-propValue);\n        return {\n          width: `calc(100% + ${themeSpacing})`,\n          marginLeft: negativeValue,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: themeSpacing\n          }\n        };\n      }\n\n      if (zeroValueBreakpointKeys?.includes(breakpoint)) {\n        return {};\n      }\n\n      return {\n        width: '100%',\n        marginLeft: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingLeft: 0\n        }\n      };\n    });\n  }\n\n  return styles;\n}\nexport function resolveSpacingStyles(spacing, breakpoints) {\n  let styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  } // in case of string/number `spacing`\n\n\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`]];\n  } // in case of object `spacing`\n\n\n  const spacingStyles = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n\n    if (Number(value) > 0) {\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\n    }\n  });\n  return spacingStyles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      container,\n      direction,\n      item,\n      spacing,\n      wrap,\n      zeroMinWidth,\n      breakpoints\n    } = ownerState;\n    let spacingStyles = []; // in case of grid item\n\n    if (container) {\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\n    }\n\n    const breakpointsStyles = [];\n    breakpoints.forEach(breakpoint => {\n      const value = ownerState[breakpoint];\n\n      if (value) {\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\n      }\n    });\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\n  }\n})( // FIXME(romgrk): Can't use memoTheme here\n_ref6 => {\n  let {\n    ownerState\n  } = _ref6;\n  return {\n    boxSizing: 'border-box',\n    ...(ownerState.container && {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '100%'\n    }),\n    ...(ownerState.item && {\n      margin: 0 // For instance, it's useful when used with a `figure` element.\n\n    }),\n    ...(ownerState.zeroMinWidth && {\n      minWidth: 0\n    }),\n    ...(ownerState.wrap !== 'wrap' && {\n      flexWrap: ownerState.wrap\n    })\n  };\n}, generateDirection, generateRowGap, generateColumnGap, generateGrid);\nexport function resolveSpacingClasses(spacing, breakpoints) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  } // in case of string/number `spacing`\n\n\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [`spacing-xs-${String(spacing)}`];\n  } // in case of object `spacing`\n\n\n  const classes = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n\n    if (Number(value) > 0) {\n      const className = `spacing-${breakpoint}-${String(value)}`;\n      classes.push(className);\n    }\n  });\n  return classes;\n}\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    breakpoints\n  } = ownerState;\n  let spacingClasses = []; // in case of grid item\n\n  if (container) {\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\n  }\n\n  const breakpointsClasses = [];\n  breakpoints.forEach(breakpoint => {\n    const value = ownerState[breakpoint];\n\n    if (value) {\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\n    }\n  });\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n/**\n * @deprecated Use the [`Grid2`](https://mui.com/material-ui/react-grid2/) component instead.\n */\n\n\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const props = extendSxProp(themeProps);\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    rowSpacing: rowSpacingProp,\n    spacing = 0,\n    wrap = 'wrap',\n    zeroMinWidth = false,\n    ...other\n  } = props;\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext); // columns set with default breakpoint unit of 12\n\n  const columns = container ? columnsProp || 12 : columnsContext;\n  const breakpointsValues = {};\n  const otherFiltered = { ...other\n  };\n  breakpoints.keys.forEach(breakpoint => {\n    if (other[breakpoint] != null) {\n      breakpointsValues[breakpoint] = other[breakpoint];\n      delete otherFiltered[breakpoint];\n    }\n  });\n  const ownerState = { ...props,\n    columns,\n    container,\n    direction,\n    item,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    zeroMinWidth,\n    spacing,\n    ...breakpointsValues,\n    breakpoints: breakpoints.keys\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref,\n      ...otherFiltered\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat\n\n  Grid['propTypes' + ''] = { // eslint-disable-next-line react/forbid-foreign-prop-types\n    ...Grid.propTypes,\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  };\n}\n\nexport default Grid;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/Grid/Grid.js"],"names":["React","PropTypes","clsx","handleBreakpoints","unstable_resolveBreakpointValues","resolveBreakpointValues","extendSxProp","composeClasses","requirePropFactory","styled","useThemeProps","useTheme","GridContext","gridClasses","getGridUtilityClass","jsx","_jsx","generateGrid","theme","ownerState","size","breakpoints","keys","reduce","globalStyles","breakpoint","styles","flexBasis","flexGrow","maxWidth","flexShrink","width","columnsBreakpointValues","values","columns","columnValue","undefined","Math","round","more","container","item","columnSpacing","themeSpacing","spacing","fullWidth","Object","assign","up","generateDirection","directionValues","direction","propValue","output","flexDirection","startsWith","extractZeroValueBreakpointKeys","nonZeroKey","forEach","key","sortedBreakpointKeysByValue","sort","a","b","slice","indexOf","generateRowGap","rowSpacing","rowSpacingValues","zeroValueBreakpointKeys","marginTop","paddingTop","includes","generateColumnGap","columnSpacingValues","negativeValue","marginLeft","paddingLeft","resolveSpacingStyles","Number","isNaN","String","spacingStyles","value","push","GridRoot","name","slot","overridesResolver","props","wrap","zeroMinWidth","breakpointsStyles","root","boxSizing","display","flexWrap","margin","minWidth","resolveSpacingClasses","classes","className","useUtilityClasses","spacingClasses","breakpointsClasses","slots","Grid","forwardRef","inProps","ref","themeProps","columnsProp","columnSpacingProp","component","rowSpacingProp","other","columnsContext","useContext","breakpointsValues","otherFiltered","Provider","children","as","process","env","NODE_ENV","propTypes","node","object","string","oneOfType","arrayOf","number","elementType","bool","oneOf","lg","md","sm","sx","func","xl","xs","requireProp"],"mappings":"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","sourcesContent":["'use client';\n\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport requirePropFactory from \"../utils/requirePropFactory.js\";\nimport styled from \"../styles/styled.js\";\nimport useThemeProps from \"../styles/useThemeProps.js\";\nimport useTheme from \"../styles/useTheme.js\";\nimport GridContext from \"./GridContext.js\";\nimport gridClasses, { getGridUtilityClass } from \"./gridClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n    if (!size) {\n      return globalStyles;\n    }\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      }\n      // Keep 7 significant numbers.\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${themeSpacing})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      }\n\n      // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n      styles = {\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width,\n        ...more\n      };\n    }\n\n    // No need for a media query for the first size.\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n    if (propValue.startsWith('column')) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n    return output;\n  });\n}\n\n/**\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\n * @returns [xs, sm]\n */\nfunction extractZeroValueBreakpointKeys({\n  breakpoints,\n  values\n}) {\n  let nonZeroKey = '';\n  Object.keys(values).forEach(key => {\n    if (nonZeroKey !== '') {\n      return;\n    }\n    if (values[key] !== 0) {\n      nonZeroKey = key;\n    }\n  });\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\n    return breakpoints[a] - breakpoints[b];\n  });\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\n}\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof rowSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: rowSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: theme.spacing(-propValue),\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: themeSpacing\n          }\n        };\n      }\n      if (zeroValueBreakpointKeys?.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        marginTop: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingTop: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof columnSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: columnSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        const negativeValue = theme.spacing(-propValue);\n        return {\n          width: `calc(100% + ${themeSpacing})`,\n          marginLeft: negativeValue,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: themeSpacing\n          }\n        };\n      }\n      if (zeroValueBreakpointKeys?.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        width: '100%',\n        marginLeft: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingLeft: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function resolveSpacingStyles(spacing, breakpoints, styles = {}) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`]];\n  }\n  // in case of object `spacing`\n  const spacingStyles = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\n    }\n  });\n  return spacingStyles;\n}\n\n// Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      container,\n      direction,\n      item,\n      spacing,\n      wrap,\n      zeroMinWidth,\n      breakpoints\n    } = ownerState;\n    let spacingStyles = [];\n\n    // in case of grid item\n    if (container) {\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\n    }\n    const breakpointsStyles = [];\n    breakpoints.forEach(breakpoint => {\n      const value = ownerState[breakpoint];\n      if (value) {\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\n      }\n    });\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\n  }\n})(\n// FIXME(romgrk): Can't use memoTheme here\n({\n  ownerState\n}) => ({\n  boxSizing: 'border-box',\n  ...(ownerState.container && {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%'\n  }),\n  ...(ownerState.item && {\n    margin: 0 // For instance, it's useful when used with a `figure` element.\n  }),\n  ...(ownerState.zeroMinWidth && {\n    minWidth: 0\n  }),\n  ...(ownerState.wrap !== 'wrap' && {\n    flexWrap: ownerState.wrap\n  })\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\nexport function resolveSpacingClasses(spacing, breakpoints) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [`spacing-xs-${String(spacing)}`];\n  }\n  // in case of object `spacing`\n  const classes = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      const className = `spacing-${breakpoint}-${String(value)}`;\n      classes.push(className);\n    }\n  });\n  return classes;\n}\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    breakpoints\n  } = ownerState;\n  let spacingClasses = [];\n\n  // in case of grid item\n  if (container) {\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\n  }\n  const breakpointsClasses = [];\n  breakpoints.forEach(breakpoint => {\n    const value = ownerState[breakpoint];\n    if (value) {\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\n    }\n  });\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n\n/**\n * @deprecated Use the [`Grid2`](https://mui.com/material-ui/react-grid2/) component instead.\n */\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const props = extendSxProp(themeProps);\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    rowSpacing: rowSpacingProp,\n    spacing = 0,\n    wrap = 'wrap',\n    zeroMinWidth = false,\n    ...other\n  } = props;\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext);\n\n  // columns set with default breakpoint unit of 12\n  const columns = container ? columnsProp || 12 : columnsContext;\n  const breakpointsValues = {};\n  const otherFiltered = {\n    ...other\n  };\n  breakpoints.keys.forEach(breakpoint => {\n    if (other[breakpoint] != null) {\n      breakpointsValues[breakpoint] = other[breakpoint];\n      delete otherFiltered[breakpoint];\n    }\n  });\n  const ownerState = {\n    ...props,\n    columns,\n    container,\n    direction,\n    item,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    zeroMinWidth,\n    spacing,\n    ...breakpointsValues,\n    breakpoints: breakpoints.keys\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref,\n      ...otherFiltered\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid);\n  // eslint-disable-next-line no-useless-concat\n  Grid['propTypes' + ''] = {\n    // eslint-disable-next-line react/forbid-foreign-prop-types\n    ...Grid.propTypes,\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  };\n}\nexport default Grid;"]},"metadata":{},"sourceType":"module"}