{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\n\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  let value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch {// Unsupported\n  }\n\n  return value || defaultValue;\n}\n\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  }); // This could be improved with `React.useSyncExternalStore` in the future.\n\n  const [, setHasMounted] = React.useState(false);\n  const hasMounted = React.useRef(false);\n  React.useEffect(() => {\n    if (isMultiSchemes) {\n      setHasMounted(true); // to rerender the component after hydration\n    }\n\n    hasMounted.current = true;\n  }, [isMultiSchemes]);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n\n      const newMode = mode ?? defaultMode;\n\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch {// Unsupported\n      }\n\n      return { ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch {// Unsupported\n        }\n\n        return { ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = { ...currentState\n          };\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch {// Unsupported\n            }\n\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = { ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {// Unsupported\n            }\n          }\n        }\n\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {// Unsupported\n            }\n          }\n        }\n\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event?.matches ? 'dark' : 'light'; // Early exit, nothing changed.\n\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n\n        return { ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n\n    const handler = function () {\n      return mediaListener.current(...arguments);\n    }; // Always listen to System preference\n\n\n    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]); // Handle when localStorage has changed\n\n  React.useEffect(() => {\n    if (storageWindow && isMultiSchemes) {\n      const handleStorage = event => {\n        const value = event.newValue;\n\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      }; // For syncing color-scheme changes between iframes\n\n\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes]);\n  return { ...state,\n    mode: hasMounted.current || !isMultiSchemes ? state.mode : undefined,\n    systemMode: hasMounted.current || !isMultiSchemes ? state.systemMode : undefined,\n    colorScheme: hasMounted.current || !isMultiSchemes ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/system/cssVars/useCurrentColorScheme.js"],"names":["React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","getSystemMode","mode","window","matchMedia","mql","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","initializeValue","key","defaultValue","value","localStorage","getItem","setItem","useCurrentColorScheme","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","modeStorageKey","colorSchemeStorageKey","storageWindow","joinedColorSchemes","join","isMultiSchemes","length","setState","useState","initialMode","setHasMounted","hasMounted","useRef","useEffect","current","colorScheme","setMode","useCallback","currentState","newMode","setColorScheme","includes","console","error","newState","newLightColorScheme","light","newDarkColorScheme","dark","handleMediaQuery","event","mediaListener","handler","media","addListener","removeListener","handleStorage","newValue","startsWith","match","endsWith","addEventListener","removeEventListener"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,wBAAT,EAAmCC,gCAAnC,QAA2E,mDAA3E;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,UAAd,KAA6B,UAA9D,IAA4EF,IAAI,KAAK,QAAzF,EAAmG;AACjG,UAAMG,GAAG,GAAGF,MAAM,CAACC,UAAP,CAAkB,8BAAlB,CAAZ;;AACA,QAAIC,GAAG,CAACC,OAAR,EAAiB;AACf,aAAO,MAAP;AACD;;AACD,WAAO,OAAP;AACD;;AACD,SAAOC,SAAP;AACD;;AACD,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AACrC,MAAID,KAAK,CAACP,IAAN,KAAe,OAAf,IAA0BO,KAAK,CAACP,IAAN,KAAe,QAAf,IAA2BO,KAAK,CAACE,UAAN,KAAqB,OAA9E,EAAuF;AACrF,WAAOD,QAAQ,CAAC,OAAD,CAAf;AACD;;AACD,MAAID,KAAK,CAACP,IAAN,KAAe,MAAf,IAAyBO,KAAK,CAACP,IAAN,KAAe,QAAf,IAA2BO,KAAK,CAACE,UAAN,KAAqB,MAA7E,EAAqF;AACnF,WAAOD,QAAQ,CAAC,MAAD,CAAf;AACD;;AACD,SAAOH,SAAP;AACD;;AACD,OAAO,SAASK,cAAT,CAAwBH,KAAxB,EAA+B;AACpC,SAAOD,YAAY,CAACC,KAAD,EAAQP,IAAI,IAAI;AACjC,QAAIA,IAAI,KAAK,OAAb,EAAsB;AACpB,aAAOO,KAAK,CAACI,gBAAb;AACD;;AACD,QAAIX,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAOO,KAAK,CAACK,eAAb;AACD;;AACD,WAAOP,SAAP;AACD,GARkB,CAAnB;AASD;;AACD,SAASQ,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAC1C,MAAI,OAAOd,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOI,SAAP;AACD;;AACD,MAAIW,KAAJ;;AACA,MAAI;AACFA,IAAAA,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,KAA6BT,SAArC;;AACA,QAAI,CAACW,KAAL,EAAY;AACV;AACAC,MAAAA,YAAY,CAACE,OAAb,CAAqBL,GAArB,EAA0BC,YAA1B;AACD;AACF,GAND,CAME,MAAM,CACN;AACD;;AACD,SAAOC,KAAK,IAAID,YAAhB;AACD;;AACD,eAAe,SAASK,qBAAT,CAA+BC,OAA/B,EAAwC;AACrD,QAAM;AACJC,IAAAA,WAAW,GAAG,OADV;AAEJC,IAAAA,uBAFI;AAGJC,IAAAA,sBAHI;AAIJC,IAAAA,qBAAqB,GAAG,EAJpB;AAKJC,IAAAA,cAAc,GAAG7B,wBALb;AAMJ8B,IAAAA,qBAAqB,GAAG7B,gCANpB;AAOJ8B,IAAAA,aAAa,GAAG,OAAO3B,MAAP,KAAkB,WAAlB,GAAgCI,SAAhC,GAA4CJ;AAPxD,MAQFoB,OARJ;AASA,QAAMQ,kBAAkB,GAAGJ,qBAAqB,CAACK,IAAtB,CAA2B,GAA3B,CAA3B;AACA,QAAMC,cAAc,GAAGN,qBAAqB,CAACO,MAAtB,GAA+B,CAAtD;AACA,QAAM,CAACzB,KAAD,EAAQ0B,QAAR,IAAoBrC,KAAK,CAACsC,QAAN,CAAe,MAAM;AAC7C,UAAMC,WAAW,GAAGtB,eAAe,CAACa,cAAD,EAAiBJ,WAAjB,CAAnC;AACA,UAAMX,gBAAgB,GAAGE,eAAe,CAAE,GAAEc,qBAAsB,QAA1B,EAAmCJ,uBAAnC,CAAxC;AACA,UAAMX,eAAe,GAAGC,eAAe,CAAE,GAAEc,qBAAsB,OAA1B,EAAkCH,sBAAlC,CAAvC;AACA,WAAO;AACLxB,MAAAA,IAAI,EAAEmC,WADD;AAEL1B,MAAAA,UAAU,EAAEV,aAAa,CAACoC,WAAD,CAFpB;AAGLxB,MAAAA,gBAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GAVyB,CAA1B,CAZqD,CAuBrD;;AACA,QAAM,GAAGwB,aAAH,IAAoBxC,KAAK,CAACsC,QAAN,CAAe,KAAf,CAA1B;AACA,QAAMG,UAAU,GAAGzC,KAAK,CAAC0C,MAAN,CAAa,KAAb,CAAnB;AACA1C,EAAAA,KAAK,CAAC2C,SAAN,CAAgB,MAAM;AACpB,QAAIR,cAAJ,EAAoB;AAClBK,MAAAA,aAAa,CAAC,IAAD,CAAb,CADkB,CACG;AACtB;;AACDC,IAAAA,UAAU,CAACG,OAAX,GAAqB,IAArB;AACD,GALD,EAKG,CAACT,cAAD,CALH;AAMA,QAAMU,WAAW,GAAG/B,cAAc,CAACH,KAAD,CAAlC;AACA,QAAMmC,OAAO,GAAG9C,KAAK,CAAC+C,WAAN,CAAkB3C,IAAI,IAAI;AACxCiC,IAAAA,QAAQ,CAACW,YAAY,IAAI;AACvB,UAAI5C,IAAI,KAAK4C,YAAY,CAAC5C,IAA1B,EAAgC;AAC9B;AACA,eAAO4C,YAAP;AACD;;AACD,YAAMC,OAAO,GAAG7C,IAAI,IAAIsB,WAAxB;;AACA,UAAI;AACFL,QAAAA,YAAY,CAACE,OAAb,CAAqBO,cAArB,EAAqCmB,OAArC;AACD,OAFD,CAEE,MAAM,CACN;AACD;;AACD,aAAO,EACL,GAAGD,YADE;AAEL5C,QAAAA,IAAI,EAAE6C,OAFD;AAGLpC,QAAAA,UAAU,EAAEV,aAAa,CAAC8C,OAAD;AAHpB,OAAP;AAKD,KAhBO,CAAR;AAiBD,GAlBe,EAkBb,CAACnB,cAAD,EAAiBJ,WAAjB,CAlBa,CAAhB;AAmBA,QAAMwB,cAAc,GAAGlD,KAAK,CAAC+C,WAAN,CAAkB3B,KAAK,IAAI;AAChD,QAAI,CAACA,KAAL,EAAY;AACViB,MAAAA,QAAQ,CAACW,YAAY,IAAI;AACvB,YAAI;AACF3B,UAAAA,YAAY,CAACE,OAAb,CAAsB,GAAEQ,qBAAsB,QAA9C,EAAuDJ,uBAAvD;AACAN,UAAAA,YAAY,CAACE,OAAb,CAAsB,GAAEQ,qBAAsB,OAA9C,EAAsDH,sBAAtD;AACD,SAHD,CAGE,MAAM,CACN;AACD;;AACD,eAAO,EACL,GAAGoB,YADE;AAELjC,UAAAA,gBAAgB,EAAEY,uBAFb;AAGLX,UAAAA,eAAe,EAAEY;AAHZ,SAAP;AAKD,OAZO,CAAR;AAaD,KAdD,MAcO,IAAI,OAAOR,KAAP,KAAiB,QAArB,EAA+B;AACpC,UAAIA,KAAK,IAAI,CAACa,kBAAkB,CAACkB,QAAnB,CAA4B/B,KAA5B,CAAd,EAAkD;AAChDgC,QAAAA,OAAO,CAACC,KAAR,CAAe,KAAIjC,KAAM,8CAAzB;AACD,OAFD,MAEO;AACLiB,QAAAA,QAAQ,CAACW,YAAY,IAAI;AACvB,gBAAMM,QAAQ,GAAG,EACf,GAAGN;AADY,WAAjB;AAGAtC,UAAAA,YAAY,CAACsC,YAAD,EAAe5C,IAAI,IAAI;AACjC,gBAAI;AACFiB,cAAAA,YAAY,CAACE,OAAb,CAAsB,GAAEQ,qBAAsB,IAAG3B,IAAK,EAAtD,EAAyDgB,KAAzD;AACD,aAFD,CAEE,MAAM,CACN;AACD;;AACD,gBAAIhB,IAAI,KAAK,OAAb,EAAsB;AACpBkD,cAAAA,QAAQ,CAACvC,gBAAT,GAA4BK,KAA5B;AACD;;AACD,gBAAIhB,IAAI,KAAK,MAAb,EAAqB;AACnBkD,cAAAA,QAAQ,CAACtC,eAAT,GAA2BI,KAA3B;AACD;AACF,WAZW,CAAZ;AAaA,iBAAOkC,QAAP;AACD,SAlBO,CAAR;AAmBD;AACF,KAxBM,MAwBA;AACLjB,MAAAA,QAAQ,CAACW,YAAY,IAAI;AACvB,cAAMM,QAAQ,GAAG,EACf,GAAGN;AADY,SAAjB;AAGA,cAAMO,mBAAmB,GAAGnC,KAAK,CAACoC,KAAN,KAAgB,IAAhB,GAAuB7B,uBAAvB,GAAiDP,KAAK,CAACoC,KAAnF;AACA,cAAMC,kBAAkB,GAAGrC,KAAK,CAACsC,IAAN,KAAe,IAAf,GAAsB9B,sBAAtB,GAA+CR,KAAK,CAACsC,IAAhF;;AACA,YAAIH,mBAAJ,EAAyB;AACvB,cAAI,CAACtB,kBAAkB,CAACkB,QAAnB,CAA4BI,mBAA5B,CAAL,EAAuD;AACrDH,YAAAA,OAAO,CAACC,KAAR,CAAe,KAAIE,mBAAoB,8CAAvC;AACD,WAFD,MAEO;AACLD,YAAAA,QAAQ,CAACvC,gBAAT,GAA4BwC,mBAA5B;;AACA,gBAAI;AACFlC,cAAAA,YAAY,CAACE,OAAb,CAAsB,GAAEQ,qBAAsB,QAA9C,EAAuDwB,mBAAvD;AACD,aAFD,CAEE,OAAOF,KAAP,EAAc,CACd;AACD;AACF;AACF;;AACD,YAAII,kBAAJ,EAAwB;AACtB,cAAI,CAACxB,kBAAkB,CAACkB,QAAnB,CAA4BM,kBAA5B,CAAL,EAAsD;AACpDL,YAAAA,OAAO,CAACC,KAAR,CAAe,KAAII,kBAAmB,8CAAtC;AACD,WAFD,MAEO;AACLH,YAAAA,QAAQ,CAACtC,eAAT,GAA2ByC,kBAA3B;;AACA,gBAAI;AACFpC,cAAAA,YAAY,CAACE,OAAb,CAAsB,GAAEQ,qBAAsB,OAA9C,EAAsD0B,kBAAtD;AACD,aAFD,CAEE,OAAOJ,KAAP,EAAc,CACd;AACD;AACF;AACF;;AACD,eAAOC,QAAP;AACD,OA/BO,CAAR;AAgCD;AACF,GAzEsB,EAyEpB,CAACrB,kBAAD,EAAqBF,qBAArB,EAA4CJ,uBAA5C,EAAqEC,sBAArE,CAzEoB,CAAvB;AA0EA,QAAM+B,gBAAgB,GAAG3D,KAAK,CAAC+C,WAAN,CAAkBa,KAAK,IAAI;AAClD,QAAIjD,KAAK,CAACP,IAAN,KAAe,QAAnB,EAA6B;AAC3BiC,MAAAA,QAAQ,CAACW,YAAY,IAAI;AACvB,cAAMnC,UAAU,GAAG+C,KAAK,EAAEpD,OAAP,GAAiB,MAAjB,GAA0B,OAA7C,CADuB,CAGvB;;AACA,YAAIwC,YAAY,CAACnC,UAAb,KAA4BA,UAAhC,EAA4C;AAC1C,iBAAOmC,YAAP;AACD;;AACD,eAAO,EACL,GAAGA,YADE;AAELnC,UAAAA;AAFK,SAAP;AAID,OAXO,CAAR;AAYD;AACF,GAfwB,EAetB,CAACF,KAAK,CAACP,IAAP,CAfsB,CAAzB,CA9HqD,CA+IrD;;AACA,QAAMyD,aAAa,GAAG7D,KAAK,CAAC0C,MAAN,CAAaiB,gBAAb,CAAtB;AACAE,EAAAA,aAAa,CAACjB,OAAd,GAAwBe,gBAAxB;AACA3D,EAAAA,KAAK,CAAC2C,SAAN,CAAgB,MAAM;AACpB,QAAI,OAAOtC,MAAM,CAACC,UAAd,KAA6B,UAA7B,IAA2C,CAAC6B,cAAhD,EAAgE;AAC9D,aAAO1B,SAAP;AACD;;AACD,UAAMqD,OAAO,GAAG;AAAA,aAAaD,aAAa,CAACjB,OAAd,CAAsB,YAAtB,CAAb;AAAA,KAAhB,CAJoB,CAMpB;;;AACA,UAAMmB,KAAK,GAAG1D,MAAM,CAACC,UAAP,CAAkB,8BAAlB,CAAd,CAPoB,CASpB;;AACAyD,IAAAA,KAAK,CAACC,WAAN,CAAkBF,OAAlB;AACAA,IAAAA,OAAO,CAACC,KAAD,CAAP;AACA,WAAO,MAAM;AACXA,MAAAA,KAAK,CAACE,cAAN,CAAqBH,OAArB;AACD,KAFD;AAGD,GAfD,EAeG,CAAC3B,cAAD,CAfH,EAlJqD,CAmKrD;;AACAnC,EAAAA,KAAK,CAAC2C,SAAN,CAAgB,MAAM;AACpB,QAAIX,aAAa,IAAIG,cAArB,EAAqC;AACnC,YAAM+B,aAAa,GAAGN,KAAK,IAAI;AAC7B,cAAMxC,KAAK,GAAGwC,KAAK,CAACO,QAApB;;AACA,YAAI,OAAOP,KAAK,CAAC1C,GAAb,KAAqB,QAArB,IAAiC0C,KAAK,CAAC1C,GAAN,CAAUkD,UAAV,CAAqBrC,qBAArB,CAAjC,KAAiF,CAACX,KAAD,IAAUa,kBAAkB,CAACoC,KAAnB,CAAyBjD,KAAzB,CAA3F,CAAJ,EAAiI;AAC/H;AACA,cAAIwC,KAAK,CAAC1C,GAAN,CAAUoD,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC/BpB,YAAAA,cAAc,CAAC;AACbM,cAAAA,KAAK,EAAEpC;AADM,aAAD,CAAd;AAGD;;AACD,cAAIwC,KAAK,CAAC1C,GAAN,CAAUoD,QAAV,CAAmB,MAAnB,CAAJ,EAAgC;AAC9BpB,YAAAA,cAAc,CAAC;AACbQ,cAAAA,IAAI,EAAEtC;AADO,aAAD,CAAd;AAGD;AACF;;AACD,YAAIwC,KAAK,CAAC1C,GAAN,KAAcY,cAAd,KAAiC,CAACV,KAAD,IAAU,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B+B,QAA5B,CAAqC/B,KAArC,CAA3C,CAAJ,EAA6F;AAC3F0B,UAAAA,OAAO,CAAC1B,KAAK,IAAIM,WAAV,CAAP;AACD;AACF,OAlBD,CADmC,CAoBnC;;;AACAM,MAAAA,aAAa,CAACuC,gBAAd,CAA+B,SAA/B,EAA0CL,aAA1C;AACA,aAAO,MAAM;AACXlC,QAAAA,aAAa,CAACwC,mBAAd,CAAkC,SAAlC,EAA6CN,aAA7C;AACD,OAFD;AAGD;;AACD,WAAOzD,SAAP;AACD,GA5BD,EA4BG,CAACyC,cAAD,EAAiBJ,OAAjB,EAA0BhB,cAA1B,EAA0CC,qBAA1C,EAAiEE,kBAAjE,EAAqFP,WAArF,EAAkGM,aAAlG,EAAiHG,cAAjH,CA5BH;AA6BA,SAAO,EACL,GAAGxB,KADE;AAELP,IAAAA,IAAI,EAAEqC,UAAU,CAACG,OAAX,IAAsB,CAACT,cAAvB,GAAwCxB,KAAK,CAACP,IAA9C,GAAqDK,SAFtD;AAGLI,IAAAA,UAAU,EAAE4B,UAAU,CAACG,OAAX,IAAsB,CAACT,cAAvB,GAAwCxB,KAAK,CAACE,UAA9C,GAA2DJ,SAHlE;AAILoC,IAAAA,WAAW,EAAEJ,UAAU,CAACG,OAAX,IAAsB,CAACT,cAAvB,GAAwCU,WAAxC,GAAsDpC,SAJ9D;AAKLqC,IAAAA,OALK;AAMLI,IAAAA;AANK,GAAP;AAQD","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  let value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  // This could be improved with `React.useSyncExternalStore` in the future.\n  const [, setHasMounted] = React.useState(false);\n  const hasMounted = React.useRef(false);\n  React.useEffect(() => {\n    if (isMultiSchemes) {\n      setHasMounted(true); // to rerender the component after hydration\n    }\n    hasMounted.current = true;\n  }, [isMultiSchemes]);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = mode ?? defaultMode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch {\n        // Unsupported\n      }\n      return {\n        ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch {\n          // Unsupported\n        }\n        return {\n          ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = {\n            ...currentState\n          };\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = {\n          ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event?.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return {\n          ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n    const handler = (...args) => mediaListener.current(...args);\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    if (storageWindow && isMultiSchemes) {\n      const handleStorage = event => {\n        const value = event.newValue;\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      };\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes]);\n  return {\n    ...state,\n    mode: hasMounted.current || !isMultiSchemes ? state.mode : undefined,\n    systemMode: hasMounted.current || !isMultiSchemes ? state.systemMode : undefined,\n    colorScheme: hasMounted.current || !isMultiSchemes ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}"]},"metadata":{},"sourceType":"module"}