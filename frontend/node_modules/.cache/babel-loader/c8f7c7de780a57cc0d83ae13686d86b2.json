{"ast":null,"code":"'use client';\n\nvar _span;\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useSelect } from '../useSelect';\nimport { useSlotProps } from '../utils';\nimport { Popup } from '../Unstable_Popup/Popup';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getSelectUtilityClass } from './selectClasses';\nimport { defaultOptionStringifier } from '../useSelect/defaultOptionStringifier';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { SelectProvider } from '../useSelect/SelectProvider';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderValue(selectedOptions) {\n  if (Array.isArray(selectedOptions)) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: selectedOptions.map(o => o.label).join(', ')\n    });\n  }\n\n  return selectedOptions?.label ?? null;\n}\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popup: ['popup']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSelectUtilityClass));\n}\n/**\n * The foundation for building custom-styled select components.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/)\n *\n * API:\n *\n * - [Select API](https://mui.com/base-ui/react-select/components-api/#select)\n */\n\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(props, forwardedRef) {\n  const {\n    areOptionsEqual,\n    autoComplete,\n    autoFocus,\n    children,\n    defaultValue,\n    defaultListboxOpen = false,\n    disabled: disabledProp,\n    getSerializedValue,\n    listboxId,\n    listboxOpen: listboxOpenProp,\n    multiple = false,\n    name,\n    required = false,\n    onChange,\n    onListboxOpenChange,\n    getOptionAsString = defaultOptionStringifier,\n    renderValue: renderValueProp,\n    placeholder,\n    slotProps = {},\n    slots = {},\n    value: valueProp,\n    ...other\n  } = props;\n  const renderValue = renderValueProp ?? defaultRenderValue;\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = slots.root ?? 'button';\n  const ListboxRoot = slots.listbox ?? 'ul';\n  const PopupComponent = slots.popup ?? 'div';\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    contextValue,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getHiddenInputProps,\n    getOptionMetadata,\n    value,\n    open\n  } = useSelect({\n    name,\n    required,\n    getSerializedValue,\n    areOptionsEqual,\n    buttonRef: handleButtonRef,\n    defaultOpen: defaultListboxOpen,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple,\n    open: listboxOpenProp,\n    onChange,\n    onOpenChange: onListboxOpenChange,\n    getOptionAsString,\n    value: valueProp,\n    componentName: 'Select'\n  });\n  const ownerState = { ...props,\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open,\n    multiple,\n    renderValue,\n    value\n  };\n  const classes = useUtilityClasses(ownerState);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popupProps = useSlotProps({\n    elementType: PopupComponent,\n    externalSlotProps: slotProps.popup,\n    additionalProps: {\n      anchor: buttonRef.current,\n      keepMounted: true,\n      open,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popup\n  });\n  let selectedOptionsMetadata;\n\n  if (multiple) {\n    selectedOptionsMetadata = value.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    selectedOptionsMetadata = getOptionMetadata(value) ?? null;\n  }\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, { ...buttonProps,\n      children: renderValue(selectedOptionsMetadata) ?? placeholder ?? ( // fall back to a zero-width space to prevent layout shift\n      // from https://github.com/mui/material-ui/pull/24563\n      _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n        className: \"notranslate\",\n        children: \"\\u200B\"\n      })))\n    }), buttonDefined && /*#__PURE__*/_jsx(Popup, {\n      slots: {\n        root: PopupComponent\n      },\n      ...popupProps,\n      children: /*#__PURE__*/_jsx(ListboxRoot, { ...listboxProps,\n        children: /*#__PURE__*/_jsx(SelectProvider, {\n          value: contextValue,\n          children: children\n        })\n      })\n    }), /*#__PURE__*/_jsx(\"input\", { ...getHiddenInputProps(),\n      autoComplete: autoComplete\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * A function used to determine if two options' values are equal.\n   * By default, reference equality is used.\n   *\n   * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).\n   * Therefore, it's recommented to use the default reference equality comparison whenever possible.\n   */\n  areOptionsEqual: PropTypes.func,\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  getOptionAsString: PropTypes.func,\n\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * If `true`, selecting multiple values is allowed.\n   * This affects the type of the `value`, `defaultValue`, and `onChange` props.\n   *\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * Text to show when there is no selected value.\n   */\n  placeholder: PropTypes.node,\n\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * If `true`, the Select cannot be empty when submitting form.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popup: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    listbox: PropTypes.elementType,\n    popup: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { Select };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Select/Select.js"],"names":["_span","React","PropTypes","unstable_useForkRef","useForkRef","useSelect","useSlotProps","Popup","unstable_composeClasses","composeClasses","getSelectUtilityClass","defaultOptionStringifier","useClassNamesOverride","SelectProvider","jsx","_jsx","jsxs","_jsxs","defaultRenderValue","selectedOptions","Array","isArray","Fragment","children","map","o","label","join","useUtilityClasses","ownerState","active","disabled","open","focusVisible","slots","root","listbox","popup","Select","forwardRef","props","forwardedRef","areOptionsEqual","autoComplete","autoFocus","defaultValue","defaultListboxOpen","disabledProp","getSerializedValue","listboxId","listboxOpen","listboxOpenProp","multiple","name","required","onChange","onListboxOpenChange","getOptionAsString","renderValue","renderValueProp","placeholder","slotProps","value","valueProp","other","buttonDefined","setButtonDefined","useState","buttonRef","useRef","listboxRef","Button","ListboxRoot","PopupComponent","handleButtonRefChange","useCallback","element","handleButtonRef","useEffect","current","focus","buttonActive","buttonFocusVisible","contextValue","getButtonProps","getListboxProps","getHiddenInputProps","getOptionMetadata","defaultOpen","onOpenChange","componentName","classes","buttonProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","listboxProps","additionalProps","ref","popupProps","anchor","keepMounted","placement","role","undefined","selectedOptionsMetadata","v","filter","process","env","NODE_ENV","propTypes","func","string","bool","node","any","shape","oneOfType","object"],"mappings":"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","sourcesContent":["'use client';\n\nvar _span;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useSelect } from '../useSelect';\nimport { useSlotProps } from '../utils';\nimport { Popup } from '../Unstable_Popup/Popup';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getSelectUtilityClass } from './selectClasses';\nimport { defaultOptionStringifier } from '../useSelect/defaultOptionStringifier';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { SelectProvider } from '../useSelect/SelectProvider';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction defaultRenderValue(selectedOptions) {\n  if (Array.isArray(selectedOptions)) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: selectedOptions.map(o => o.label).join(', ')\n    });\n  }\n  return selectedOptions?.label ?? null;\n}\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popup: ['popup']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSelectUtilityClass));\n}\n\n/**\n * The foundation for building custom-styled select components.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/)\n *\n * API:\n *\n * - [Select API](https://mui.com/base-ui/react-select/components-api/#select)\n */\nconst Select = /*#__PURE__*/React.forwardRef(function Select(props, forwardedRef) {\n  const {\n    areOptionsEqual,\n    autoComplete,\n    autoFocus,\n    children,\n    defaultValue,\n    defaultListboxOpen = false,\n    disabled: disabledProp,\n    getSerializedValue,\n    listboxId,\n    listboxOpen: listboxOpenProp,\n    multiple = false,\n    name,\n    required = false,\n    onChange,\n    onListboxOpenChange,\n    getOptionAsString = defaultOptionStringifier,\n    renderValue: renderValueProp,\n    placeholder,\n    slotProps = {},\n    slots = {},\n    value: valueProp,\n    ...other\n  } = props;\n  const renderValue = renderValueProp ?? defaultRenderValue;\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = slots.root ?? 'button';\n  const ListboxRoot = slots.listbox ?? 'ul';\n  const PopupComponent = slots.popup ?? 'div';\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    contextValue,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getHiddenInputProps,\n    getOptionMetadata,\n    value,\n    open\n  } = useSelect({\n    name,\n    required,\n    getSerializedValue,\n    areOptionsEqual,\n    buttonRef: handleButtonRef,\n    defaultOpen: defaultListboxOpen,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple,\n    open: listboxOpenProp,\n    onChange,\n    onOpenChange: onListboxOpenChange,\n    getOptionAsString,\n    value: valueProp,\n    componentName: 'Select'\n  });\n  const ownerState = {\n    ...props,\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open,\n    multiple,\n    renderValue,\n    value\n  };\n  const classes = useUtilityClasses(ownerState);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popupProps = useSlotProps({\n    elementType: PopupComponent,\n    externalSlotProps: slotProps.popup,\n    additionalProps: {\n      anchor: buttonRef.current,\n      keepMounted: true,\n      open,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popup\n  });\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = value.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    selectedOptionsMetadata = getOptionMetadata(value) ?? null;\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, {\n      ...buttonProps,\n      children: renderValue(selectedOptionsMetadata) ?? placeholder ?? ( // fall back to a zero-width space to prevent layout shift\n      // from https://github.com/mui/material-ui/pull/24563\n      _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n        className: \"notranslate\",\n        children: \"\\u200B\"\n      })))\n    }), buttonDefined && /*#__PURE__*/_jsx(Popup, {\n      slots: {\n        root: PopupComponent\n      },\n      ...popupProps,\n      children: /*#__PURE__*/_jsx(ListboxRoot, {\n        ...listboxProps,\n        children: /*#__PURE__*/_jsx(SelectProvider, {\n          value: contextValue,\n          children: children\n        })\n      })\n    }), /*#__PURE__*/_jsx(\"input\", {\n      ...getHiddenInputProps(),\n      autoComplete: autoComplete\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A function used to determine if two options' values are equal.\n   * By default, reference equality is used.\n   *\n   * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).\n   * Therefore, it's recommented to use the default reference equality comparison whenever possible.\n   */\n  areOptionsEqual: PropTypes.func,\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  getOptionAsString: PropTypes.func,\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n  /**\n   * `id` attribute of the listbox element.\n   */\n  listboxId: PropTypes.string,\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n  /**\n   * If `true`, selecting multiple values is allowed.\n   * This affects the type of the `value`, `defaultValue`, and `onChange` props.\n   *\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n  /**\n   * Text to show when there is no selected value.\n   */\n  placeholder: PropTypes.node,\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: PropTypes.func,\n  /**\n   * If `true`, the Select cannot be empty when submitting form.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popup: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    listbox: PropTypes.elementType,\n    popup: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { Select };"]},"metadata":{},"sourceType":"module"}