{"ast":null,"code":"'use client';\n/* eslint-disable jsx-a11y/aria-role */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport KeyboardArrowLeft from \"../internal/svg-icons/KeyboardArrowLeft.js\";\nimport KeyboardArrowRight from \"../internal/svg-icons/KeyboardArrowRight.js\";\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport tabScrollButtonClasses, { getTabScrollButtonUtilityClass } from \"./tabScrollButtonClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    orientation,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation, disabled && 'disabled']\n  };\n  return composeClasses(slots, getTabScrollButtonUtilityClass, classes);\n};\n\nconst TabScrollButtonRoot = styled(ButtonBase, {\n  name: 'MuiTabScrollButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.orientation && styles[ownerState.orientation]];\n  }\n})({\n  width: 40,\n  flexShrink: 0,\n  opacity: 0.8,\n  [`&.${tabScrollButtonClasses.disabled}`]: {\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      orientation: 'vertical'\n    },\n    style: {\n      width: '100%',\n      height: 40,\n      '& svg': {\n        transform: 'var(--TabScrollButton-svgRotate)'\n      }\n    }\n  }]\n});\nconst TabScrollButton = /*#__PURE__*/React.forwardRef(function TabScrollButton(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTabScrollButton'\n  });\n  const {\n    className,\n    slots = {},\n    slotProps = {},\n    direction,\n    orientation,\n    disabled,\n    ...other\n  } = props;\n  const isRtl = useRtl();\n  const ownerState = {\n    isRtl,\n    ...props\n  };\n  const classes = useUtilityClasses(ownerState);\n  const StartButtonIcon = slots.StartScrollButtonIcon ?? KeyboardArrowLeft;\n  const EndButtonIcon = slots.EndScrollButtonIcon ?? KeyboardArrowRight;\n  const startButtonIconProps = useSlotProps({\n    elementType: StartButtonIcon,\n    externalSlotProps: slotProps.startScrollButtonIcon,\n    additionalProps: {\n      fontSize: 'small'\n    },\n    ownerState\n  });\n  const endButtonIconProps = useSlotProps({\n    elementType: EndButtonIcon,\n    externalSlotProps: slotProps.endScrollButtonIcon,\n    additionalProps: {\n      fontSize: 'small'\n    },\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(TabScrollButtonRoot, {\n    component: \"div\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: null,\n    ownerState: ownerState,\n    tabIndex: null,\n    ...other,\n    style: { ...other.style,\n      ...(orientation === 'vertical' && {\n        '--TabScrollButton-svgRotate': `rotate(${isRtl ? -90 : 90}deg)`\n      })\n    },\n    children: direction === 'left' ? /*#__PURE__*/_jsx(StartButtonIcon, { ...startButtonIconProps\n    }) : /*#__PURE__*/_jsx(EndButtonIcon, { ...endButtonIconProps\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TabScrollButton.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The direction the button should indicate.\n   */\n  direction: PropTypes.oneOf(['left', 'right']).isRequired,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The component orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    endScrollButtonIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startScrollButtonIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    EndScrollButtonIcon: PropTypes.elementType,\n    StartScrollButtonIcon: PropTypes.elementType\n  }),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TabScrollButton;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/TabScrollButton/TabScrollButton.js"],"names":["React","PropTypes","clsx","composeClasses","useRtl","useSlotProps","KeyboardArrowLeft","KeyboardArrowRight","ButtonBase","styled","useDefaultProps","tabScrollButtonClasses","getTabScrollButtonUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","classes","orientation","disabled","slots","root","TabScrollButtonRoot","name","slot","overridesResolver","props","styles","width","flexShrink","opacity","variants","style","height","transform","TabScrollButton","forwardRef","inProps","ref","className","slotProps","direction","other","isRtl","StartButtonIcon","StartScrollButtonIcon","EndButtonIcon","EndScrollButtonIcon","startButtonIconProps","elementType","externalSlotProps","startScrollButtonIcon","additionalProps","fontSize","endButtonIconProps","endScrollButtonIcon","component","role","tabIndex","children","process","env","NODE_ENV","propTypes","node","object","string","oneOf","isRequired","bool","shape","oneOfType","func","sx","arrayOf"],"mappings":"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","sourcesContent":["'use client';\n\n/* eslint-disable jsx-a11y/aria-role */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport KeyboardArrowLeft from \"../internal/svg-icons/KeyboardArrowLeft.js\";\nimport KeyboardArrowRight from \"../internal/svg-icons/KeyboardArrowRight.js\";\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport tabScrollButtonClasses, { getTabScrollButtonUtilityClass } from \"./tabScrollButtonClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    orientation,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation, disabled && 'disabled']\n  };\n  return composeClasses(slots, getTabScrollButtonUtilityClass, classes);\n};\nconst TabScrollButtonRoot = styled(ButtonBase, {\n  name: 'MuiTabScrollButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.orientation && styles[ownerState.orientation]];\n  }\n})({\n  width: 40,\n  flexShrink: 0,\n  opacity: 0.8,\n  [`&.${tabScrollButtonClasses.disabled}`]: {\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      orientation: 'vertical'\n    },\n    style: {\n      width: '100%',\n      height: 40,\n      '& svg': {\n        transform: 'var(--TabScrollButton-svgRotate)'\n      }\n    }\n  }]\n});\nconst TabScrollButton = /*#__PURE__*/React.forwardRef(function TabScrollButton(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTabScrollButton'\n  });\n  const {\n    className,\n    slots = {},\n    slotProps = {},\n    direction,\n    orientation,\n    disabled,\n    ...other\n  } = props;\n  const isRtl = useRtl();\n  const ownerState = {\n    isRtl,\n    ...props\n  };\n  const classes = useUtilityClasses(ownerState);\n  const StartButtonIcon = slots.StartScrollButtonIcon ?? KeyboardArrowLeft;\n  const EndButtonIcon = slots.EndScrollButtonIcon ?? KeyboardArrowRight;\n  const startButtonIconProps = useSlotProps({\n    elementType: StartButtonIcon,\n    externalSlotProps: slotProps.startScrollButtonIcon,\n    additionalProps: {\n      fontSize: 'small'\n    },\n    ownerState\n  });\n  const endButtonIconProps = useSlotProps({\n    elementType: EndButtonIcon,\n    externalSlotProps: slotProps.endScrollButtonIcon,\n    additionalProps: {\n      fontSize: 'small'\n    },\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(TabScrollButtonRoot, {\n    component: \"div\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: null,\n    ownerState: ownerState,\n    tabIndex: null,\n    ...other,\n    style: {\n      ...other.style,\n      ...(orientation === 'vertical' && {\n        '--TabScrollButton-svgRotate': `rotate(${isRtl ? -90 : 90}deg)`\n      })\n    },\n    children: direction === 'left' ? /*#__PURE__*/_jsx(StartButtonIcon, {\n      ...startButtonIconProps\n    }) : /*#__PURE__*/_jsx(EndButtonIcon, {\n      ...endButtonIconProps\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TabScrollButton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The direction the button should indicate.\n   */\n  direction: PropTypes.oneOf(['left', 'right']).isRequired,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The component orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    endScrollButtonIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startScrollButtonIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    EndScrollButtonIcon: PropTypes.elementType,\n    StartScrollButtonIcon: PropTypes.elementType\n  }),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TabScrollButton;"]},"metadata":{},"sourceType":"module"}