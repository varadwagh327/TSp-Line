{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\n/**\n * Lazy initialization container for the Ripple instance. This improves\n * performance by delaying mounting the ripple until it's needed.\n */\n\nexport class LazyRipple {\n  /** React ref to the ripple instance */\n\n  /** If the ripple component should be mounted */\n\n  /** Promise that resolves when the ripple component is mounted */\n\n  /** If the ripple component has been mounted */\n\n  /** React state hook setter */\n  static create() {\n    return new LazyRipple();\n  }\n\n  static use() {\n    /* eslint-disable */\n    const ripple = useLazyRef(LazyRipple.create).current;\n    const [shouldMount, setShouldMount] = React.useState(false);\n    ripple.shouldMount = shouldMount;\n    ripple.setShouldMount = setShouldMount;\n    React.useEffect(ripple.mountEffect, [shouldMount]);\n    /* eslint-enable */\n\n    return ripple;\n  }\n\n  constructor() {\n    this.ref = {\n      current: null\n    };\n    this.mounted = null;\n    this.didMount = false;\n    this.shouldMount = false;\n    this.setShouldMount = null;\n  }\n\n  mount() {\n    if (!this.mounted) {\n      this.mounted = createControlledPromise();\n      this.shouldMount = true;\n      this.setShouldMount(this.shouldMount);\n    }\n\n    return this.mounted;\n  }\n\n  mountEffect = () => {\n    if (this.shouldMount && !this.didMount) {\n      if (this.ref.current !== null) {\n        this.didMount = true;\n        this.mounted.resolve();\n      }\n    }\n  };\n  /* Ripple API */\n\n  start() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this.mount().then(() => this.ref.current?.start(...args));\n  }\n\n  stop() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this.mount().then(() => this.ref.current?.stop(...args));\n  }\n\n  pulsate() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this.mount().then(() => this.ref.current?.pulsate(...args));\n  }\n\n}\nexport default function useLazyRipple() {\n  return LazyRipple.use();\n}\n\nfunction createControlledPromise() {\n  let resolve;\n  let reject;\n  const p = new Promise((resolveFn, rejectFn) => {\n    resolve = resolveFn;\n    reject = rejectFn;\n  });\n  p.resolve = resolve;\n  p.reject = reject;\n  return p;\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/useLazyRipple/useLazyRipple.js"],"names":["React","useLazyRef","LazyRipple","create","use","ripple","current","shouldMount","setShouldMount","useState","useEffect","mountEffect","constructor","ref","mounted","didMount","mount","createControlledPromise","resolve","start","args","then","stop","pulsate","useLazyRipple","reject","p","Promise","resolveFn","rejectFn"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAN,CAAiB;AACtB;;AAEA;;AAEA;;AAEA;;AAEA;AAEa,SAANC,MAAM,GAAG;AACd,WAAO,IAAID,UAAJ,EAAP;AACD;;AACS,SAAHE,GAAG,GAAG;AACX;AACA,UAAMC,MAAM,GAAGJ,UAAU,CAACC,UAAU,CAACC,MAAZ,CAAV,CAA8BG,OAA7C;AACA,UAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,KAAK,CAACS,QAAN,CAAe,KAAf,CAAtC;AACAJ,IAAAA,MAAM,CAACE,WAAP,GAAqBA,WAArB;AACAF,IAAAA,MAAM,CAACG,cAAP,GAAwBA,cAAxB;AACAR,IAAAA,KAAK,CAACU,SAAN,CAAgBL,MAAM,CAACM,WAAvB,EAAoC,CAACJ,WAAD,CAApC;AACA;;AAEA,WAAOF,MAAP;AACD;;AACDO,EAAAA,WAAW,GAAG;AACZ,SAAKC,GAAL,GAAW;AACTP,MAAAA,OAAO,EAAE;AADA,KAAX;AAGA,SAAKQ,OAAL,GAAe,IAAf;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKR,WAAL,GAAmB,KAAnB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACD;;AACDQ,EAAAA,KAAK,GAAG;AACN,QAAI,CAAC,KAAKF,OAAV,EAAmB;AACjB,WAAKA,OAAL,GAAeG,uBAAuB,EAAtC;AACA,WAAKV,WAAL,GAAmB,IAAnB;AACA,WAAKC,cAAL,CAAoB,KAAKD,WAAzB;AACD;;AACD,WAAO,KAAKO,OAAZ;AACD;;AACDH,EAAAA,WAAW,GAAG,MAAM;AAClB,QAAI,KAAKJ,WAAL,IAAoB,CAAC,KAAKQ,QAA9B,EAAwC;AACtC,UAAI,KAAKF,GAAL,CAASP,OAAT,KAAqB,IAAzB,EAA+B;AAC7B,aAAKS,QAAL,GAAgB,IAAhB;AACA,aAAKD,OAAL,CAAaI,OAAb;AACD;AACF;AACF,GAPU;AASX;;AAEAC,EAAAA,KAAK,GAAU;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACb,SAAKJ,KAAL,GAAaK,IAAb,CAAkB,MAAM,KAAKR,GAAL,CAASP,OAAT,EAAkBa,KAAlB,CAAwB,GAAGC,IAA3B,CAAxB;AACD;;AACDE,EAAAA,IAAI,GAAU;AAAA,uCAANF,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACZ,SAAKJ,KAAL,GAAaK,IAAb,CAAkB,MAAM,KAAKR,GAAL,CAASP,OAAT,EAAkBgB,IAAlB,CAAuB,GAAGF,IAA1B,CAAxB;AACD;;AACDG,EAAAA,OAAO,GAAU;AAAA,uCAANH,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACf,SAAKJ,KAAL,GAAaK,IAAb,CAAkB,MAAM,KAAKR,GAAL,CAASP,OAAT,EAAkBiB,OAAlB,CAA0B,GAAGH,IAA7B,CAAxB;AACD;;AA7DqB;AA+DxB,eAAe,SAASI,aAAT,GAAyB;AACtC,SAAOtB,UAAU,CAACE,GAAX,EAAP;AACD;;AACD,SAASa,uBAAT,GAAmC;AACjC,MAAIC,OAAJ;AACA,MAAIO,MAAJ;AACA,QAAMC,CAAC,GAAG,IAAIC,OAAJ,CAAY,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAC7CX,IAAAA,OAAO,GAAGU,SAAV;AACAH,IAAAA,MAAM,GAAGI,QAAT;AACD,GAHS,CAAV;AAIAH,EAAAA,CAAC,CAACR,OAAF,GAAYA,OAAZ;AACAQ,EAAAA,CAAC,CAACD,MAAF,GAAWA,MAAX;AACA,SAAOC,CAAP;AACD","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\n/**\n * Lazy initialization container for the Ripple instance. This improves\n * performance by delaying mounting the ripple until it's needed.\n */\nexport class LazyRipple {\n  /** React ref to the ripple instance */\n\n  /** If the ripple component should be mounted */\n\n  /** Promise that resolves when the ripple component is mounted */\n\n  /** If the ripple component has been mounted */\n\n  /** React state hook setter */\n\n  static create() {\n    return new LazyRipple();\n  }\n  static use() {\n    /* eslint-disable */\n    const ripple = useLazyRef(LazyRipple.create).current;\n    const [shouldMount, setShouldMount] = React.useState(false);\n    ripple.shouldMount = shouldMount;\n    ripple.setShouldMount = setShouldMount;\n    React.useEffect(ripple.mountEffect, [shouldMount]);\n    /* eslint-enable */\n\n    return ripple;\n  }\n  constructor() {\n    this.ref = {\n      current: null\n    };\n    this.mounted = null;\n    this.didMount = false;\n    this.shouldMount = false;\n    this.setShouldMount = null;\n  }\n  mount() {\n    if (!this.mounted) {\n      this.mounted = createControlledPromise();\n      this.shouldMount = true;\n      this.setShouldMount(this.shouldMount);\n    }\n    return this.mounted;\n  }\n  mountEffect = () => {\n    if (this.shouldMount && !this.didMount) {\n      if (this.ref.current !== null) {\n        this.didMount = true;\n        this.mounted.resolve();\n      }\n    }\n  };\n\n  /* Ripple API */\n\n  start(...args) {\n    this.mount().then(() => this.ref.current?.start(...args));\n  }\n  stop(...args) {\n    this.mount().then(() => this.ref.current?.stop(...args));\n  }\n  pulsate(...args) {\n    this.mount().then(() => this.ref.current?.pulsate(...args));\n  }\n}\nexport default function useLazyRipple() {\n  return LazyRipple.use();\n}\nfunction createControlledPromise() {\n  let resolve;\n  let reject;\n  const p = new Promise((resolveFn, rejectFn) => {\n    resolve = resolveFn;\n    reject = rejectFn;\n  });\n  p.resolve = resolve;\n  p.reject = reject;\n  return p;\n}"]},"metadata":{},"sourceType":"module"}