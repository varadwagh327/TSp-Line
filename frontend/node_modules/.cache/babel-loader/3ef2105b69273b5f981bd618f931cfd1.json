{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { globalCss } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\"; // to determine if the global styles are static or dynamic\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst isDynamicSupport = typeof globalCss({}) === 'function';\nexport const html = (theme, enableColorScheme) => ({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%',\n  // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.\n  ...(enableColorScheme && !theme.vars && {\n    colorScheme: theme.palette.mode\n  })\n});\nexport const body = theme => ({\n  color: (theme.vars || theme).palette.text.primary,\n  ...theme.typography.body1,\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = function (theme) {\n  let enableColorScheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const colorSchemeStyles = {};\n\n  if (enableColorScheme && theme.colorSchemes && typeof theme.getColorSchemeSelector === 'function') {\n    Object.entries(theme.colorSchemes).forEach(_ref => {\n      let [key, scheme] = _ref;\n      const selector = theme.getColorSchemeSelector(key);\n\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        colorSchemeStyles[selector] = {\n          ':root': {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        colorSchemeStyles[selector.replace(/\\s*&/, '')] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n\n  let defaultStyles = {\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: {\n      margin: 0,\n      // Remove the margin in all browsers.\n      ...body(theme),\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    },\n    ...colorSchemeStyles\n  };\n  const themeOverrides = theme.components?.MuiCssBaseline?.styleOverrides;\n\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n\n  return defaultStyles;\n}; // `ecs` stands for enableColorScheme. This is internal logic to make it work with Pigment CSS, so shorter is better.\n\nconst SELECTOR = 'mui-ecs';\n\nconst staticStyles = theme => {\n  const result = styles(theme, false);\n  const baseStyles = Array.isArray(result) ? result[0] : result;\n\n  if (!theme.vars && baseStyles) {\n    baseStyles.html[`:root:has(${SELECTOR})`] = {\n      colorScheme: theme.palette.mode\n    };\n  }\n\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const selector = theme.getColorSchemeSelector(key);\n\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        baseStyles[selector] = {\n          [`:root:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        baseStyles[selector.replace(/\\s*&/, '')] = {\n          [`&:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      }\n    });\n  }\n\n  return result;\n};\n\nconst GlobalStyles = globalCss(isDynamicSupport ? _ref3 => {\n  let {\n    theme,\n    enableColorScheme\n  } = _ref3;\n  return styles(theme, enableColorScheme);\n} : _ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return staticStyles(theme);\n});\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\n\nfunction CssBaseline(inProps) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [isDynamicSupport && /*#__PURE__*/_jsx(GlobalStyles, {\n      enableColorScheme: enableColorScheme\n    }), !isDynamicSupport && !enableColorScheme && /*#__PURE__*/_jsx(\"span\", {\n      className: SELECTOR,\n      style: {\n        display: 'none'\n      }\n    }), children]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/CssBaseline/CssBaseline.js"],"names":["React","PropTypes","globalCss","useDefaultProps","jsx","_jsx","jsxs","_jsxs","isDynamicSupport","html","theme","enableColorScheme","WebkitFontSmoothing","MozOsxFontSmoothing","boxSizing","WebkitTextSizeAdjust","vars","colorScheme","palette","mode","body","color","text","primary","typography","body1","backgroundColor","background","default","common","white","styles","colorSchemeStyles","colorSchemes","getColorSchemeSelector","Object","entries","forEach","key","scheme","selector","startsWith","replace","defaultStyles","fontWeight","fontWeightBold","margin","themeOverrides","components","MuiCssBaseline","styleOverrides","SELECTOR","staticStyles","result","baseStyles","Array","isArray","GlobalStyles","CssBaseline","inProps","props","name","children","Fragment","className","style","display","process","env","NODE_ENV","propTypes","node","bool"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { globalCss } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\n\n// to determine if the global styles are static or dynamic\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst isDynamicSupport = typeof globalCss({}) === 'function';\nexport const html = (theme, enableColorScheme) => ({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%',\n  // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.\n  ...(enableColorScheme && !theme.vars && {\n    colorScheme: theme.palette.mode\n  })\n});\nexport const body = theme => ({\n  color: (theme.vars || theme).palette.text.primary,\n  ...theme.typography.body1,\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = (theme, enableColorScheme = false) => {\n  const colorSchemeStyles = {};\n  if (enableColorScheme && theme.colorSchemes && typeof theme.getColorSchemeSelector === 'function') {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        colorSchemeStyles[selector] = {\n          ':root': {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        colorSchemeStyles[selector.replace(/\\s*&/, '')] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n  let defaultStyles = {\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: {\n      margin: 0,\n      // Remove the margin in all browsers.\n      ...body(theme),\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    },\n    ...colorSchemeStyles\n  };\n  const themeOverrides = theme.components?.MuiCssBaseline?.styleOverrides;\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n  return defaultStyles;\n};\n\n// `ecs` stands for enableColorScheme. This is internal logic to make it work with Pigment CSS, so shorter is better.\nconst SELECTOR = 'mui-ecs';\nconst staticStyles = theme => {\n  const result = styles(theme, false);\n  const baseStyles = Array.isArray(result) ? result[0] : result;\n  if (!theme.vars && baseStyles) {\n    baseStyles.html[`:root:has(${SELECTOR})`] = {\n      colorScheme: theme.palette.mode\n    };\n  }\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        baseStyles[selector] = {\n          [`:root:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        baseStyles[selector.replace(/\\s*&/, '')] = {\n          [`&:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      }\n    });\n  }\n  return result;\n};\nconst GlobalStyles = globalCss(isDynamicSupport ? ({\n  theme,\n  enableColorScheme\n}) => styles(theme, enableColorScheme) : ({\n  theme\n}) => staticStyles(theme));\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\nfunction CssBaseline(inProps) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [isDynamicSupport && /*#__PURE__*/_jsx(GlobalStyles, {\n      enableColorScheme: enableColorScheme\n    }), !isDynamicSupport && !enableColorScheme && /*#__PURE__*/_jsx(\"span\", {\n      className: SELECTOR,\n      style: {\n        display: 'none'\n      }\n    }), children]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;"]},"metadata":{},"sourceType":"module"}