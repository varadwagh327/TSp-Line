{"ast":null,"code":"import * as React from 'react';\n/**\n * Returns the ref of a React node handling differences between React 19 and older versions.\n * It will return null if the node is not a valid React element.\n *\n * @param element React.ReactNode\n * @returns React.Ref<any> | null\n */\n\nexport default function getReactNodeRef(element) {\n  if (!element || ! /*#__PURE__*/React.isValidElement(element)) {\n    return null;\n  } // 'ref' is passed as prop in React 19, whereas 'ref' is directly attached to children in older versions\n\n\n  return element.props.propertyIsEnumerable('ref') ? element.props.ref : // @ts-expect-error element.ref is not included in the ReactElement type\n  // We cannot check for it, but isValidElement is true at this point\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/70189\n  element.ref;\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/node_modules/@mui/utils/esm/getReactNodeRef/getReactNodeRef.js"],"names":["React","getReactNodeRef","element","isValidElement","props","propertyIsEnumerable","ref"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAC/C,MAAI,CAACA,OAAD,IAAY,EAAE,aAAaF,KAAK,CAACG,cAAN,CAAqBD,OAArB,CAA/B,EAA8D;AAC5D,WAAO,IAAP;AACD,GAH8C,CAK/C;;;AACA,SAAOA,OAAO,CAACE,KAAR,CAAcC,oBAAd,CAAmC,KAAnC,IAA4CH,OAAO,CAACE,KAAR,CAAcE,GAA1D,GACP;AACA;AACA;AACAJ,EAAAA,OAAO,CAACI,GAJR;AAKD","sourcesContent":["import * as React from 'react';\n\n/**\n * Returns the ref of a React node handling differences between React 19 and older versions.\n * It will return null if the node is not a valid React element.\n *\n * @param element React.ReactNode\n * @returns React.Ref<any> | null\n */\nexport default function getReactNodeRef(element) {\n  if (!element || ! /*#__PURE__*/React.isValidElement(element)) {\n    return null;\n  }\n\n  // 'ref' is passed as prop in React 19, whereas 'ref' is directly attached to children in older versions\n  return element.props.propertyIsEnumerable('ref') ? element.props.ref :\n  // @ts-expect-error element.ref is not included in the ReactElement type\n  // We cannot check for it, but isValidElement is true at this point\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/70189\n  element.ref;\n}"]},"metadata":{},"sourceType":"module"}