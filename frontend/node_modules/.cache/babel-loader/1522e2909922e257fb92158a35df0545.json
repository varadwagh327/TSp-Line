{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, exactProp, unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback, unstable_getReactNodeRef as getReactNodeRef } from '@mui/utils'; // TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n *\n * Demos:\n *\n * - [Click-Away Listener](https://mui.com/base-ui/react-click-away-listener/)\n *\n * API:\n *\n * - [ClickAwayListener API](https://mui.com/base-ui/react-click-away-listener/components-api/#click-away-listener)\n */\n\n\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = 'onClick',\n    onClickAway,\n    touchEvent = 'onTouchEnd'\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []);\n  const handleRef = useForkRef(getReactNodeRef(children), nodeRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  const handleClickAway = useEventCallback(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target) || nodeRef.current.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  const createHandleSynthetic = handlerName => event => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  const childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(children, childrenProps)\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   * @default false\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   * @default 'onClick'\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   * @default 'onTouchEnd'\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport { ClickAwayListener };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js"],"names":["React","PropTypes","elementAcceptingRef","exactProp","unstable_ownerDocument","ownerDocument","unstable_useForkRef","useForkRef","unstable_useEventCallback","useEventCallback","unstable_getReactNodeRef","getReactNodeRef","jsx","_jsx","mapEventPropToEvent","eventProp","substring","toLowerCase","clickedRootScrollbar","event","doc","documentElement","clientWidth","clientX","clientHeight","clientY","ClickAwayListener","props","children","disableReactTree","mouseEvent","onClickAway","touchEvent","movedRef","useRef","nodeRef","activatedRef","syntheticEventRef","useEffect","setTimeout","current","handleRef","handleClickAway","insideReactTree","insideDOM","composedPath","indexOf","contains","target","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","ref","mappedTouchEvent","handleTouchMove","addEventListener","removeEventListener","undefined","mappedMouseEvent","Fragment","cloneElement","process","env","NODE_ENV","propTypes","isRequired","bool","oneOf","func"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, exactProp, unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback, unstable_getReactNodeRef as getReactNodeRef } from '@mui/utils';\n\n// TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n *\n * Demos:\n *\n * - [Click-Away Listener](https://mui.com/base-ui/react-click-away-listener/)\n *\n * API:\n *\n * - [ClickAwayListener API](https://mui.com/base-ui/react-click-away-listener/components-api/#click-away-listener)\n */\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = 'onClick',\n    onClickAway,\n    touchEvent = 'onTouchEnd'\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []);\n  const handleRef = useForkRef(getReactNodeRef(children), nodeRef);\n\n  // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n  const handleClickAway = useEventCallback(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current);\n\n    // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    }\n\n    // Do not act if user performed touchmove\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n    let insideDOM;\n\n    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains(\n      // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target) || nodeRef.current.contains(\n      // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target);\n    }\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  });\n\n  // Keep track of mouse/touch events that bubbled up through the portal.\n  const createHandleSynthetic = handlerName => event => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const childrenProps = {\n    ref: handleRef\n  };\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(children, childrenProps)\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   * @default false\n   */\n  disableReactTree: PropTypes.bool,\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   * @default 'onClick'\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   * @default 'onTouchEnd'\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\nexport { ClickAwayListener };"]},"metadata":{},"sourceType":"module"}