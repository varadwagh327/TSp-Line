{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { html, body } from \"../CssBaseline/CssBaseline.js\";\nimport { getScopedCssBaselineUtilityClass } from \"./scopedCssBaselineClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getScopedCssBaselineUtilityClass, classes);\n};\n\nconst ScopedCssBaselineRoot = styled('div', {\n  name: 'MuiScopedCssBaseline',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(memoTheme(_ref => {\n  let {\n    theme\n  } = _ref;\n  const colorSchemeStyles = {};\n\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const selector = theme.getColorSchemeSelector(key);\n\n      if (selector.startsWith('@')) {\n        colorSchemeStyles[selector] = {\n          colorScheme: scheme.palette?.mode\n        };\n      } else {\n        colorSchemeStyles[`&${selector.replace(/\\s*&/, '')}`] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n\n  return { ...html(theme, false),\n    ...body(theme),\n    '& *, & *::before, & *::after': {\n      boxSizing: 'inherit'\n    },\n    '& strong, & b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    variants: [{\n      props: {\n        enableColorScheme: true\n      },\n      style: theme.vars ? colorSchemeStyles : {\n        colorScheme: theme.palette.mode\n      }\n    }]\n  };\n}));\nconst ScopedCssBaseline = /*#__PURE__*/React.forwardRef(function ScopedCssBaseline(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiScopedCssBaseline'\n  });\n  const {\n    className,\n    component = 'div',\n    enableColorScheme,\n    ...other\n  } = props;\n  const ownerState = { ...props,\n    component\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ScopedCssBaselineRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ScopedCssBaseline.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   */\n  enableColorScheme: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ScopedCssBaseline;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.js"],"names":["React","PropTypes","clsx","composeClasses","styled","memoTheme","useDefaultProps","html","body","getScopedCssBaselineUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","ScopedCssBaselineRoot","name","slot","overridesResolver","props","styles","theme","colorSchemeStyles","colorSchemes","Object","entries","forEach","key","scheme","selector","getColorSchemeSelector","startsWith","colorScheme","palette","mode","replace","boxSizing","fontWeight","typography","fontWeightBold","variants","enableColorScheme","style","vars","ScopedCssBaseline","forwardRef","inProps","ref","className","component","other","as","process","env","NODE_ENV","propTypes","children","node","object","string","elementType","bool","sx","oneOfType","arrayOf","func"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { html, body } from \"../CssBaseline/CssBaseline.js\";\nimport { getScopedCssBaselineUtilityClass } from \"./scopedCssBaselineClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getScopedCssBaselineUtilityClass, classes);\n};\nconst ScopedCssBaselineRoot = styled('div', {\n  name: 'MuiScopedCssBaseline',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(memoTheme(({\n  theme\n}) => {\n  const colorSchemeStyles = {};\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        colorSchemeStyles[selector] = {\n          colorScheme: scheme.palette?.mode\n        };\n      } else {\n        colorSchemeStyles[`&${selector.replace(/\\s*&/, '')}`] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n  return {\n    ...html(theme, false),\n    ...body(theme),\n    '& *, & *::before, & *::after': {\n      boxSizing: 'inherit'\n    },\n    '& strong, & b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    variants: [{\n      props: {\n        enableColorScheme: true\n      },\n      style: theme.vars ? colorSchemeStyles : {\n        colorScheme: theme.palette.mode\n      }\n    }]\n  };\n}));\nconst ScopedCssBaseline = /*#__PURE__*/React.forwardRef(function ScopedCssBaseline(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiScopedCssBaseline'\n  });\n  const {\n    className,\n    component = 'div',\n    enableColorScheme,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    component\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ScopedCssBaselineRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ScopedCssBaseline.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   */\n  enableColorScheme: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ScopedCssBaseline;"]},"metadata":{},"sourceType":"module"}