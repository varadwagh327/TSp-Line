{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../useCompound';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n/**\n *\n * Demos:\n *\n * - [Select](https://next.mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOption API](https://next.mui.com/base-ui/react-select/hooks-api/#use-option)\n */\n\nexport function useOption(params) {\n  const {\n    value,\n    label,\n    disabled,\n    rootRef: optionRefParam,\n    id: idParam\n  } = params;\n  const {\n    getRootProps: getListItemProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const id = useId(idParam);\n  const optionRef = React.useRef(null);\n  const selectOption = React.useMemo(() => ({\n    disabled,\n    label,\n    value,\n    ref: optionRef,\n    id\n  }), [disabled, label, value, id]);\n  const {\n    index\n  } = useCompoundItem(value, selectOption);\n  const handleRef = useForkRef(optionRefParam, optionRef, buttonRefHandler);\n\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if ([' ', 'Enter'].includes(event.key)) {\n      event.defaultMuiPrevented = true; // prevent listbox onKeyDown\n    }\n  };\n\n  const getOwnHandlers = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n\n  return {\n    getRootProps: function () {\n      let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const externalEventHandlers = extractEventHandlers(externalProps);\n      const getCombinedRootProps = combineHooksSlotProps(getListItemProps, combineHooksSlotProps(getButtonProps, getOwnHandlers));\n      return { ...externalProps,\n        ...externalEventHandlers,\n        ...getCombinedRootProps(externalEventHandlers),\n        id,\n        ref: handleRef,\n        role: 'option',\n        'aria-selected': selected\n      };\n    },\n    highlighted,\n    index,\n    selected,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useOption/useOption.js"],"names":["React","unstable_useForkRef","useForkRef","unstable_useId","useId","extractEventHandlers","useListItem","useCompoundItem","useButton","combineHooksSlotProps","useOption","params","value","label","disabled","rootRef","optionRefParam","id","idParam","getRootProps","getListItemProps","highlighted","selected","item","getButtonProps","buttonRefHandler","focusableWhenDisabled","optionRef","useRef","selectOption","useMemo","ref","index","handleRef","createHandleKeyDown","otherHandlers","event","onKeyDown","defaultMuiPrevented","includes","key","getOwnHandlers","externalProps","externalEventHandlers","getCombinedRootProps","role"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../useCompound';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n/**\n *\n * Demos:\n *\n * - [Select](https://next.mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOption API](https://next.mui.com/base-ui/react-select/hooks-api/#use-option)\n */\nexport function useOption(params) {\n  const {\n    value,\n    label,\n    disabled,\n    rootRef: optionRefParam,\n    id: idParam\n  } = params;\n  const {\n    getRootProps: getListItemProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const id = useId(idParam);\n  const optionRef = React.useRef(null);\n  const selectOption = React.useMemo(() => ({\n    disabled,\n    label,\n    value,\n    ref: optionRef,\n    id\n  }), [disabled, label, value, id]);\n  const {\n    index\n  } = useCompoundItem(value, selectOption);\n  const handleRef = useForkRef(optionRefParam, optionRef, buttonRefHandler);\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ([' ', 'Enter'].includes(event.key)) {\n      event.defaultMuiPrevented = true; // prevent listbox onKeyDown\n    }\n  };\n  const getOwnHandlers = (otherHandlers = {}) => ({\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  return {\n    getRootProps: (externalProps = {}) => {\n      const externalEventHandlers = extractEventHandlers(externalProps);\n      const getCombinedRootProps = combineHooksSlotProps(getListItemProps, combineHooksSlotProps(getButtonProps, getOwnHandlers));\n      return {\n        ...externalProps,\n        ...externalEventHandlers,\n        ...getCombinedRootProps(externalEventHandlers),\n        id,\n        ref: handleRef,\n        role: 'option',\n        'aria-selected': selected\n      };\n    },\n    highlighted,\n    index,\n    selected,\n    rootRef: handleRef\n  };\n}"]},"metadata":{},"sourceType":"module"}