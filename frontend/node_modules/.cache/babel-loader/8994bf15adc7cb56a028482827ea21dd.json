{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getButtonUtilityClass } from './buttonClasses';\nimport { useButton } from '../useButton';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    active,\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']\n  };\n  return composeClasses(slots, useClassNamesOverride(getButtonUtilityClass));\n};\n/**\n * The foundation for building custom-styled buttons.\n *\n * Demos:\n *\n * - [Button](https://mui.com/base-ui/react-button/)\n *\n * API:\n *\n * - [Button API](https://mui.com/base-ui/react-button/components-api/#button)\n */\n\n\nconst Button = /*#__PURE__*/React.forwardRef(function Button(props, forwardedRef) {\n  const {\n    action,\n    children,\n    disabled,\n    focusableWhenDisabled = false,\n    onFocusVisible,\n    slotProps = {},\n    slots = {},\n    rootElementName: rootElementNameProp = 'button',\n    ...other\n  } = props;\n  const buttonRef = React.useRef(null);\n  let rootElementName = rootElementNameProp;\n\n  if (typeof slots.root === 'string') {\n    rootElementName = slots.root;\n  } else if (other.href || other.to) {\n    rootElementName = 'a';\n  }\n\n  const {\n    active,\n    focusVisible,\n    setFocusVisible,\n    getRootProps\n  } = useButton({ ...props,\n    focusableWhenDisabled,\n    rootElementName\n  });\n  React.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), [setFocusVisible]);\n  const ownerState = { ...props,\n    active,\n    focusableWhenDisabled,\n    focusVisible\n  };\n  const classes = useUtilityClasses(ownerState);\n  const defaultElement = other.href || other.to ? 'a' : 'button';\n  const Root = slots.root ?? defaultElement;\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(Root, { ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  href: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n\n  /**\n   * The HTML element that is ultimately rendered, for example 'button' or 'a'\n   * @default 'button'\n   */\n  rootElementName: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .string,\n\n  /**\n   * The props used for each slot inside the Button.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * @ignore\n   */\n  to: PropTypes.string\n} : void 0;\nexport { Button };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Button/Button.js"],"names":["React","PropTypes","unstable_composeClasses","composeClasses","getButtonUtilityClass","useButton","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","active","disabled","focusVisible","slots","root","Button","forwardRef","props","forwardedRef","action","children","focusableWhenDisabled","onFocusVisible","slotProps","rootElementName","rootElementNameProp","other","buttonRef","useRef","href","to","setFocusVisible","getRootProps","useImperativeHandle","current","focus","classes","defaultElement","Root","rootProps","elementType","getSlotProps","externalForwardedProps","externalSlotProps","additionalProps","ref","className","process","env","NODE_ENV","propTypes","oneOfType","func","shape","isRequired","node","string","bool","object"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getButtonUtilityClass } from './buttonClasses';\nimport { useButton } from '../useButton';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    active,\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']\n  };\n  return composeClasses(slots, useClassNamesOverride(getButtonUtilityClass));\n};\n/**\n * The foundation for building custom-styled buttons.\n *\n * Demos:\n *\n * - [Button](https://mui.com/base-ui/react-button/)\n *\n * API:\n *\n * - [Button API](https://mui.com/base-ui/react-button/components-api/#button)\n */\nconst Button = /*#__PURE__*/React.forwardRef(function Button(props, forwardedRef) {\n  const {\n    action,\n    children,\n    disabled,\n    focusableWhenDisabled = false,\n    onFocusVisible,\n    slotProps = {},\n    slots = {},\n    rootElementName: rootElementNameProp = 'button',\n    ...other\n  } = props;\n  const buttonRef = React.useRef(null);\n  let rootElementName = rootElementNameProp;\n  if (typeof slots.root === 'string') {\n    rootElementName = slots.root;\n  } else if (other.href || other.to) {\n    rootElementName = 'a';\n  }\n  const {\n    active,\n    focusVisible,\n    setFocusVisible,\n    getRootProps\n  } = useButton({\n    ...props,\n    focusableWhenDisabled,\n    rootElementName\n  });\n  React.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), [setFocusVisible]);\n  const ownerState = {\n    ...props,\n    active,\n    focusableWhenDisabled,\n    focusVisible\n  };\n  const classes = useUtilityClasses(ownerState);\n  const defaultElement = other.href || other.to ? 'a' : 'button';\n  const Root = slots.root ?? defaultElement;\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(Root, {\n    ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  href: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n  /**\n   * The HTML element that is ultimately rendered, for example 'button' or 'a'\n   * @default 'button'\n   */\n  rootElementName: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The props used for each slot inside the Button.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * @ignore\n   */\n  to: PropTypes.string\n} : void 0;\nexport { Button };"]},"metadata":{},"sourceType":"module"}