{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSlotProps } from '../utils';\nimport { useMenuButton } from '../useMenuButton';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { getMenuButtonUtilityClass } from './menuButtonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    active,\n    disabled,\n    open\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', active && 'active', open && 'expanded']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuButtonUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [MenuButton API](https://mui.com/base-ui/react-menu/components-api/#menu-button)\n */\n\n\nconst MenuButton = /*#__PURE__*/React.forwardRef(function MenuButton(props, forwardedRef) {\n  const {\n    children,\n    disabled = false,\n    label,\n    slots = {},\n    slotProps = {},\n    focusableWhenDisabled = false,\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    open,\n    active\n  } = useMenuButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: forwardedRef\n  });\n  const ownerState = { ...props,\n    open,\n    active,\n    disabled,\n    focusableWhenDisabled\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = slots.root || 'button';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef,\n      type: 'button'\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(Root, { ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuButton.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: PropTypes.bool,\n\n  /**\n   * Label of the button\n   */\n  label: PropTypes.string,\n\n  /**\n   * The components used for each slot inside the MenuButton.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The props used for each slot inside the MenuButton.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { MenuButton };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/MenuButton/MenuButton.js"],"names":["React","PropTypes","useSlotProps","useMenuButton","unstable_composeClasses","composeClasses","useClassNamesOverride","getMenuButtonUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","active","disabled","open","slots","root","MenuButton","forwardRef","props","forwardedRef","children","label","slotProps","focusableWhenDisabled","other","getRootProps","rootRef","classes","Root","rootProps","elementType","getSlotProps","externalForwardedProps","externalSlotProps","additionalProps","ref","type","className","process","env","NODE_ENV","propTypes","node","string","bool","shape","oneOfType","func","object"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSlotProps } from '../utils';\nimport { useMenuButton } from '../useMenuButton';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { getMenuButtonUtilityClass } from './menuButtonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    active,\n    disabled,\n    open\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', active && 'active', open && 'expanded']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuButtonUtilityClass));\n};\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [MenuButton API](https://mui.com/base-ui/react-menu/components-api/#menu-button)\n */\nconst MenuButton = /*#__PURE__*/React.forwardRef(function MenuButton(props, forwardedRef) {\n  const {\n    children,\n    disabled = false,\n    label,\n    slots = {},\n    slotProps = {},\n    focusableWhenDisabled = false,\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    open,\n    active\n  } = useMenuButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: forwardedRef\n  });\n  const ownerState = {\n    ...props,\n    open,\n    active,\n    disabled,\n    focusableWhenDisabled\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = slots.root || 'button';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef,\n      type: 'button'\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(Root, {\n    ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuButton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: PropTypes.bool,\n  /**\n   * Label of the button\n   */\n  label: PropTypes.string,\n  /**\n   * The components used for each slot inside the MenuButton.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The props used for each slot inside the MenuButton.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { MenuButton };"]},"metadata":{},"sourceType":"module"}