{"ast":null,"code":"import { NumberInputActionTypes } from './numberInputAction.types';\nimport { clampStepwise, isNumber } from './utils';\n\nfunction getClampedValues(rawValue, context) {\n  const {\n    min,\n    max,\n    step\n  } = context;\n  const clampedValue = rawValue === null ? null : clampStepwise(rawValue, min, max, step);\n  const newInputValue = clampedValue === null ? '' : String(clampedValue);\n  return {\n    value: clampedValue,\n    inputValue: newInputValue\n  };\n}\n\nfunction stepValue(state, context, direction, multiplier) {\n  const {\n    value\n  } = state;\n  const {\n    step = 1,\n    min,\n    max\n  } = context;\n\n  if (isNumber(value)) {\n    return {\n      up: value + (step ?? 1) * multiplier,\n      down: value - (step ?? 1) * multiplier\n    }[direction];\n  }\n\n  return {\n    up: min ?? 1,\n    down: max ?? -1\n  }[direction];\n}\n\nfunction handleClamp(state, context, inputValue) {\n  const {\n    getInputValueAsString\n  } = context;\n  const numberValueAsString = getInputValueAsString(inputValue);\n  const intermediateValue = numberValueAsString === '' || numberValueAsString === '-' ? null : parseInt(numberValueAsString, 10);\n  const clampedValues = getClampedValues(intermediateValue, context);\n  return { ...state,\n    ...clampedValues\n  };\n}\n\nfunction handleInputChange(state, context, inputValue) {\n  const {\n    getInputValueAsString\n  } = context;\n  const numberValueAsString = getInputValueAsString(inputValue);\n\n  if (numberValueAsString.match(/^-?\\d+?$/) || numberValueAsString === '' || numberValueAsString === '-') {\n    return { ...state,\n      inputValue: numberValueAsString\n    };\n  }\n\n  return state;\n} // use this for ArrowUp, ArrowDown, button clicks\n// use this with applyMultiplier: true for PageUp, PageDown, button shift-clicks\n\n\nfunction handleStep(state, context, applyMultiplier, direction) {\n  const multiplier = applyMultiplier ? context.shiftMultiplier : 1;\n  const newValue = stepValue(state, context, direction, multiplier);\n  const clampedValues = getClampedValues(newValue, context);\n  return { ...state,\n    ...clampedValues\n  };\n}\n\nfunction handleToMinOrMax(state, context, to) {\n  const newValue = context[to];\n\n  if (!isNumber(newValue)) {\n    return state;\n  }\n\n  return { ...state,\n    value: newValue,\n    inputValue: String(newValue)\n  };\n}\n\nexport function numberInputReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n\n  switch (type) {\n    case NumberInputActionTypes.clamp:\n      return handleClamp(state, context, action.inputValue);\n\n    case NumberInputActionTypes.inputChange:\n      return handleInputChange(state, context, action.inputValue);\n\n    case NumberInputActionTypes.increment:\n      return handleStep(state, context, action.applyMultiplier, 'up');\n\n    case NumberInputActionTypes.decrement:\n      return handleStep(state, context, action.applyMultiplier, 'down');\n\n    case NumberInputActionTypes.incrementToMax:\n      return handleToMinOrMax(state, context, 'max');\n\n    case NumberInputActionTypes.decrementToMin:\n      return handleToMinOrMax(state, context, 'min');\n\n    case NumberInputActionTypes.resetInputValue:\n      return { ...state,\n        inputValue: String(state.value)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/unstable_useNumberInput/numberInputReducer.js"],"names":["NumberInputActionTypes","clampStepwise","isNumber","getClampedValues","rawValue","context","min","max","step","clampedValue","newInputValue","String","value","inputValue","stepValue","state","direction","multiplier","up","down","handleClamp","getInputValueAsString","numberValueAsString","intermediateValue","parseInt","clampedValues","handleInputChange","match","handleStep","applyMultiplier","shiftMultiplier","newValue","handleToMinOrMax","to","numberInputReducer","action","type","clamp","inputChange","increment","decrement","incrementToMax","decrementToMin","resetInputValue"],"mappings":"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","sourcesContent":["import { NumberInputActionTypes } from './numberInputAction.types';\nimport { clampStepwise, isNumber } from './utils';\nfunction getClampedValues(rawValue, context) {\n  const {\n    min,\n    max,\n    step\n  } = context;\n  const clampedValue = rawValue === null ? null : clampStepwise(rawValue, min, max, step);\n  const newInputValue = clampedValue === null ? '' : String(clampedValue);\n  return {\n    value: clampedValue,\n    inputValue: newInputValue\n  };\n}\nfunction stepValue(state, context, direction, multiplier) {\n  const {\n    value\n  } = state;\n  const {\n    step = 1,\n    min,\n    max\n  } = context;\n  if (isNumber(value)) {\n    return {\n      up: value + (step ?? 1) * multiplier,\n      down: value - (step ?? 1) * multiplier\n    }[direction];\n  }\n  return {\n    up: min ?? 1,\n    down: max ?? -1\n  }[direction];\n}\nfunction handleClamp(state, context, inputValue) {\n  const {\n    getInputValueAsString\n  } = context;\n  const numberValueAsString = getInputValueAsString(inputValue);\n  const intermediateValue = numberValueAsString === '' || numberValueAsString === '-' ? null : parseInt(numberValueAsString, 10);\n  const clampedValues = getClampedValues(intermediateValue, context);\n  return {\n    ...state,\n    ...clampedValues\n  };\n}\nfunction handleInputChange(state, context, inputValue) {\n  const {\n    getInputValueAsString\n  } = context;\n  const numberValueAsString = getInputValueAsString(inputValue);\n  if (numberValueAsString.match(/^-?\\d+?$/) || numberValueAsString === '' || numberValueAsString === '-') {\n    return {\n      ...state,\n      inputValue: numberValueAsString\n    };\n  }\n  return state;\n}\n\n// use this for ArrowUp, ArrowDown, button clicks\n// use this with applyMultiplier: true for PageUp, PageDown, button shift-clicks\nfunction handleStep(state, context, applyMultiplier, direction) {\n  const multiplier = applyMultiplier ? context.shiftMultiplier : 1;\n  const newValue = stepValue(state, context, direction, multiplier);\n  const clampedValues = getClampedValues(newValue, context);\n  return {\n    ...state,\n    ...clampedValues\n  };\n}\nfunction handleToMinOrMax(state, context, to) {\n  const newValue = context[to];\n  if (!isNumber(newValue)) {\n    return state;\n  }\n  return {\n    ...state,\n    value: newValue,\n    inputValue: String(newValue)\n  };\n}\nexport function numberInputReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n  switch (type) {\n    case NumberInputActionTypes.clamp:\n      return handleClamp(state, context, action.inputValue);\n    case NumberInputActionTypes.inputChange:\n      return handleInputChange(state, context, action.inputValue);\n    case NumberInputActionTypes.increment:\n      return handleStep(state, context, action.applyMultiplier, 'up');\n    case NumberInputActionTypes.decrement:\n      return handleStep(state, context, action.applyMultiplier, 'down');\n    case NumberInputActionTypes.incrementToMax:\n      return handleToMinOrMax(state, context, 'max');\n    case NumberInputActionTypes.decrementToMin:\n      return handleToMinOrMax(state, context, 'min');\n    case NumberInputActionTypes.resetInputValue:\n      return {\n        ...state,\n        inputValue: String(state.value)\n      };\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}