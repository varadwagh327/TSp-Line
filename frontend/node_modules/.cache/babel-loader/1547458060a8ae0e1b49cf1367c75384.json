{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getSvgIconUtilityClass } from \"./svgIconClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    color,\n    fontSize,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]\n  };\n  return composeClasses(slots, getSvgIconUtilityClass, classes);\n};\n\nconst SvgIconRoot = styled('svg', {\n  name: 'MuiSvgIcon',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];\n  }\n})(memoTheme(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    userSelect: 'none',\n    width: '1em',\n    height: '1em',\n    display: 'inline-block',\n    flexShrink: 0,\n    transition: theme.transitions?.create?.('fill', {\n      duration: (theme.vars ?? theme).transitions?.duration?.shorter\n    }),\n    variants: [{\n      props: props => !props.hasSvgAsChild,\n      style: {\n        // the <svg> will define the property that has `currentColor`\n        // for example heroicons uses fill=\"none\" and stroke=\"currentColor\"\n        fill: 'currentColor'\n      }\n    }, {\n      props: {\n        fontSize: 'inherit'\n      },\n      style: {\n        fontSize: 'inherit'\n      }\n    }, {\n      props: {\n        fontSize: 'small'\n      },\n      style: {\n        fontSize: theme.typography?.pxToRem?.(20) || '1.25rem'\n      }\n    }, {\n      props: {\n        fontSize: 'medium'\n      },\n      style: {\n        fontSize: theme.typography?.pxToRem?.(24) || '1.5rem'\n      }\n    }, {\n      props: {\n        fontSize: 'large'\n      },\n      style: {\n        fontSize: theme.typography?.pxToRem?.(35) || '2.1875rem'\n      }\n    }, // TODO v5 deprecate color prop, v6 remove for sx\n    ...Object.entries((theme.vars ?? theme).palette).filter(_ref2 => {\n      let [, value] = _ref2;\n      return value && value.main;\n    }).map(_ref3 => {\n      let [color] = _ref3;\n      return {\n        props: {\n          color\n        },\n        style: {\n          color: (theme.vars ?? theme).palette?.[color]?.main\n        }\n      };\n    }), {\n      props: {\n        color: 'action'\n      },\n      style: {\n        color: (theme.vars ?? theme).palette?.action?.active\n      }\n    }, {\n      props: {\n        color: 'disabled'\n      },\n      style: {\n        color: (theme.vars ?? theme).palette?.action?.disabled\n      }\n    }, {\n      props: {\n        color: 'inherit'\n      },\n      style: {\n        color: undefined\n      }\n    }]\n  };\n}));\nconst SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSvgIcon'\n  });\n  const {\n    children,\n    className,\n    color = 'inherit',\n    component = 'svg',\n    fontSize = 'medium',\n    htmlColor,\n    inheritViewBox = false,\n    titleAccess,\n    viewBox = '0 0 24 24',\n    ...other\n  } = props;\n  const hasSvgAsChild = /*#__PURE__*/React.isValidElement(children) && children.type === 'svg';\n  const ownerState = { ...props,\n    color,\n    component,\n    fontSize,\n    instanceFontSize: inProps.fontSize,\n    inheritViewBox,\n    viewBox,\n    hasSvgAsChild\n  };\n  const more = {};\n\n  if (!inheritViewBox) {\n    more.viewBox = viewBox;\n  }\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SvgIconRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    focusable: \"false\",\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? undefined : true,\n    role: titleAccess ? 'img' : undefined,\n    ref: ref,\n    ...more,\n    ...other,\n    ...(hasSvgAsChild && children.props),\n    ownerState: ownerState,\n    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/_jsx(\"title\", {\n      children: titleAccess\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SvgIcon.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   * @default 'inherit'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   * @default 'medium'\n   */\n  fontSize: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),\n\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n\n  /**\n   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`\n   * prop will be ignored.\n   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that\n   * `component`'s viewBox to the root node.\n   * @default false\n   */\n  inheritViewBox: PropTypes.bool,\n\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this prop.\n   */\n  shapeRendering: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   * @default '0 0 24 24'\n   */\n  viewBox: PropTypes.string\n} : void 0;\n\nif (SvgIcon) {\n  SvgIcon.muiName = 'SvgIcon';\n}\n\nexport default SvgIcon;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/SvgIcon/SvgIcon.js"],"names":["React","PropTypes","clsx","composeClasses","capitalize","styled","memoTheme","useDefaultProps","getSvgIconUtilityClass","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","color","fontSize","classes","slots","root","SvgIconRoot","name","slot","overridesResolver","props","styles","theme","userSelect","width","height","display","flexShrink","transition","transitions","create","duration","vars","shorter","variants","hasSvgAsChild","style","fill","typography","pxToRem","Object","entries","palette","filter","value","main","map","action","active","disabled","undefined","SvgIcon","forwardRef","inProps","ref","children","className","component","htmlColor","inheritViewBox","titleAccess","viewBox","other","isValidElement","type","instanceFontSize","more","as","focusable","role","process","env","NODE_ENV","propTypes","node","object","string","oneOfType","oneOf","elementType","bool","shapeRendering","sx","arrayOf","func","muiName"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getSvgIconUtilityClass } from \"./svgIconClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    color,\n    fontSize,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]\n  };\n  return composeClasses(slots, getSvgIconUtilityClass, classes);\n};\nconst SvgIconRoot = styled('svg', {\n  name: 'MuiSvgIcon',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  userSelect: 'none',\n  width: '1em',\n  height: '1em',\n  display: 'inline-block',\n  flexShrink: 0,\n  transition: theme.transitions?.create?.('fill', {\n    duration: (theme.vars ?? theme).transitions?.duration?.shorter\n  }),\n  variants: [{\n    props: props => !props.hasSvgAsChild,\n    style: {\n      // the <svg> will define the property that has `currentColor`\n      // for example heroicons uses fill=\"none\" and stroke=\"currentColor\"\n      fill: 'currentColor'\n    }\n  }, {\n    props: {\n      fontSize: 'inherit'\n    },\n    style: {\n      fontSize: 'inherit'\n    }\n  }, {\n    props: {\n      fontSize: 'small'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(20) || '1.25rem'\n    }\n  }, {\n    props: {\n      fontSize: 'medium'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(24) || '1.5rem'\n    }\n  }, {\n    props: {\n      fontSize: 'large'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(35) || '2.1875rem'\n    }\n  },\n  // TODO v5 deprecate color prop, v6 remove for sx\n  ...Object.entries((theme.vars ?? theme).palette).filter(([, value]) => value && value.main).map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.[color]?.main\n    }\n  })), {\n    props: {\n      color: 'action'\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.action?.active\n    }\n  }, {\n    props: {\n      color: 'disabled'\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.action?.disabled\n    }\n  }, {\n    props: {\n      color: 'inherit'\n    },\n    style: {\n      color: undefined\n    }\n  }]\n})));\nconst SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSvgIcon'\n  });\n  const {\n    children,\n    className,\n    color = 'inherit',\n    component = 'svg',\n    fontSize = 'medium',\n    htmlColor,\n    inheritViewBox = false,\n    titleAccess,\n    viewBox = '0 0 24 24',\n    ...other\n  } = props;\n  const hasSvgAsChild = /*#__PURE__*/React.isValidElement(children) && children.type === 'svg';\n  const ownerState = {\n    ...props,\n    color,\n    component,\n    fontSize,\n    instanceFontSize: inProps.fontSize,\n    inheritViewBox,\n    viewBox,\n    hasSvgAsChild\n  };\n  const more = {};\n  if (!inheritViewBox) {\n    more.viewBox = viewBox;\n  }\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SvgIconRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    focusable: \"false\",\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? undefined : true,\n    role: titleAccess ? 'img' : undefined,\n    ref: ref,\n    ...more,\n    ...other,\n    ...(hasSvgAsChild && children.props),\n    ownerState: ownerState,\n    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/_jsx(\"title\", {\n      children: titleAccess\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SvgIcon.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   * @default 'inherit'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   * @default 'medium'\n   */\n  fontSize: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n  /**\n   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`\n   * prop will be ignored.\n   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that\n   * `component`'s viewBox to the root node.\n   * @default false\n   */\n  inheritViewBox: PropTypes.bool,\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this prop.\n   */\n  shapeRendering: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   * @default '0 0 24 24'\n   */\n  viewBox: PropTypes.string\n} : void 0;\nif (SvgIcon) {\n  SvgIcon.muiName = 'SvgIcon';\n}\nexport default SvgIcon;"]},"metadata":{},"sourceType":"module"}