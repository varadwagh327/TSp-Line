{"ast":null,"code":"import clsx from 'clsx';\nimport extractEventHandlers from '../extractEventHandlers';\nimport omitEventHandlers from '../omitEventHandlers';\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\n\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n    const mergedStyle = { ...additionalProps?.style,\n      ...externalForwardedProps?.style,\n      ...externalSlotProps?.style\n    };\n    const props = { ...additionalProps,\n      ...externalForwardedProps,\n      ...externalSlotProps\n    };\n\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n\n    return {\n      props,\n      internalRef: undefined\n    };\n  } // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n\n  const eventHandlers = extractEventHandlers({ ...externalForwardedProps,\n    ...externalSlotProps\n  });\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers); // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n\n  const joinedClasses = clsx(internalSlotProps?.className, additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n  const mergedStyle = { ...internalSlotProps?.style,\n    ...additionalProps?.style,\n    ...externalForwardedProps?.style,\n    ...externalSlotProps?.style\n  };\n  const props = { ...internalSlotProps,\n    ...additionalProps,\n    ...otherPropsWithoutEventHandlers,\n    ...componentsPropsWithoutEventHandlers\n  };\n\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}\n\nexport default mergeSlotProps;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js"],"names":["clsx","extractEventHandlers","omitEventHandlers","mergeSlotProps","parameters","getSlotProps","additionalProps","externalSlotProps","externalForwardedProps","className","joinedClasses","mergedStyle","style","props","length","Object","keys","internalRef","undefined","eventHandlers","componentsPropsWithoutEventHandlers","otherPropsWithoutEventHandlers","internalSlotProps","ref"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAClC,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,iBAHI;AAIJC,IAAAA,sBAJI;AAKJC,IAAAA;AALI,MAMFL,UANJ;;AAOA,MAAI,CAACC,YAAL,EAAmB;AACjB;AACA;AACA,UAAMK,aAAa,GAAGV,IAAI,CAACM,eAAe,EAAEG,SAAlB,EAA6BA,SAA7B,EAAwCD,sBAAsB,EAAEC,SAAhE,EAA2EF,iBAAiB,EAAEE,SAA9F,CAA1B;AACA,UAAME,WAAW,GAAG,EAClB,GAAGL,eAAe,EAAEM,KADF;AAElB,SAAGJ,sBAAsB,EAAEI,KAFT;AAGlB,SAAGL,iBAAiB,EAAEK;AAHJ,KAApB;AAKA,UAAMC,KAAK,GAAG,EACZ,GAAGP,eADS;AAEZ,SAAGE,sBAFS;AAGZ,SAAGD;AAHS,KAAd;;AAKA,QAAIG,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC5BD,MAAAA,KAAK,CAACJ,SAAN,GAAkBC,aAAlB;AACD;;AACD,QAAIK,MAAM,CAACC,IAAP,CAAYL,WAAZ,EAAyBG,MAAzB,GAAkC,CAAtC,EAAyC;AACvCD,MAAAA,KAAK,CAACD,KAAN,GAAcD,WAAd;AACD;;AACD,WAAO;AACLE,MAAAA,KADK;AAELI,MAAAA,WAAW,EAAEC;AAFR,KAAP;AAID,GAhCiC,CAkClC;AACA;;;AAEA,QAAMC,aAAa,GAAGlB,oBAAoB,CAAC,EACzC,GAAGO,sBADsC;AAEzC,OAAGD;AAFsC,GAAD,CAA1C;AAIA,QAAMa,mCAAmC,GAAGlB,iBAAiB,CAACK,iBAAD,CAA7D;AACA,QAAMc,8BAA8B,GAAGnB,iBAAiB,CAACM,sBAAD,CAAxD;AACA,QAAMc,iBAAiB,GAAGjB,YAAY,CAACc,aAAD,CAAtC,CA3CkC,CA6ClC;AACA;AACA;AACA;;AACA,QAAMT,aAAa,GAAGV,IAAI,CAACsB,iBAAiB,EAAEb,SAApB,EAA+BH,eAAe,EAAEG,SAAhD,EAA2DA,SAA3D,EAAsED,sBAAsB,EAAEC,SAA9F,EAAyGF,iBAAiB,EAAEE,SAA5H,CAA1B;AACA,QAAME,WAAW,GAAG,EAClB,GAAGW,iBAAiB,EAAEV,KADJ;AAElB,OAAGN,eAAe,EAAEM,KAFF;AAGlB,OAAGJ,sBAAsB,EAAEI,KAHT;AAIlB,OAAGL,iBAAiB,EAAEK;AAJJ,GAApB;AAMA,QAAMC,KAAK,GAAG,EACZ,GAAGS,iBADS;AAEZ,OAAGhB,eAFS;AAGZ,OAAGe,8BAHS;AAIZ,OAAGD;AAJS,GAAd;;AAMA,MAAIV,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC5BD,IAAAA,KAAK,CAACJ,SAAN,GAAkBC,aAAlB;AACD;;AACD,MAAIK,MAAM,CAACC,IAAP,CAAYL,WAAZ,EAAyBG,MAAzB,GAAkC,CAAtC,EAAyC;AACvCD,IAAAA,KAAK,CAACD,KAAN,GAAcD,WAAd;AACD;;AACD,SAAO;AACLE,IAAAA,KADK;AAELI,IAAAA,WAAW,EAAEK,iBAAiB,CAACC;AAF1B,GAAP;AAID;;AACD,eAAepB,cAAf","sourcesContent":["import clsx from 'clsx';\nimport extractEventHandlers from '../extractEventHandlers';\nimport omitEventHandlers from '../omitEventHandlers';\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n    const mergedStyle = {\n      ...additionalProps?.style,\n      ...externalForwardedProps?.style,\n      ...externalSlotProps?.style\n    };\n    const props = {\n      ...additionalProps,\n      ...externalForwardedProps,\n      ...externalSlotProps\n    };\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n    return {\n      props,\n      internalRef: undefined\n    };\n  }\n\n  // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n  const eventHandlers = extractEventHandlers({\n    ...externalForwardedProps,\n    ...externalSlotProps\n  });\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n\n  // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n  const joinedClasses = clsx(internalSlotProps?.className, additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n  const mergedStyle = {\n    ...internalSlotProps?.style,\n    ...additionalProps?.style,\n    ...externalForwardedProps?.style,\n    ...externalSlotProps?.style\n  };\n  const props = {\n    ...internalSlotProps,\n    ...additionalProps,\n    ...otherPropsWithoutEventHandlers,\n    ...componentsPropsWithoutEventHandlers\n  };\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}\nexport default mergeSlotProps;"]},"metadata":{},"sourceType":"module"}