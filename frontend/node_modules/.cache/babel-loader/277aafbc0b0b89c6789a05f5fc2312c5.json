{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport HTMLElementType from '@mui/utils/HTMLElementType';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport MenuList from \"../MenuList/index.js\";\nimport Popover, { PopoverPaper } from \"../Popover/index.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getMenuUtilityClass } from \"./menuClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    paper: ['paper'],\n    list: ['list']\n  };\n  return composeClasses(slots, getMenuUtilityClass, classes);\n};\n\nconst MenuRoot = styled(Popover, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiMenu',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nexport const MenuPaper = styled(PopoverPaper, {\n  name: 'MuiMenu',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})({\n  // specZ: The maximum height of a simple menu should be one or more rows less than the view\n  // height. This ensures a tappable area outside of the simple menu with which to dismiss\n  // the menu.\n  maxHeight: 'calc(100% - 96px)',\n  // Add iOS momentum scrolling for iOS < 13.0\n  WebkitOverflowScrolling: 'touch'\n});\nconst MenuMenuList = styled(MenuList, {\n  name: 'MuiMenu',\n  slot: 'List',\n  overridesResolver: (props, styles) => styles.list\n})({\n  // We disable the focus ring for mouse, touch and keyboard users.\n  outline: 0\n});\nconst Menu = /*#__PURE__*/React.forwardRef(function Menu(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiMenu'\n  });\n  const {\n    autoFocus = true,\n    children,\n    className,\n    disableAutoFocusItem = false,\n    MenuListProps = {},\n    onClose,\n    open,\n    PaperProps = {},\n    PopoverClasses,\n    transitionDuration = 'auto',\n    TransitionProps: {\n      onEntering,\n      ...TransitionProps\n    } = {},\n    variant = 'selectedMenu',\n    slots = {},\n    slotProps = {},\n    ...other\n  } = props;\n  const isRtl = useRtl();\n  const ownerState = { ...props,\n    autoFocus,\n    disableAutoFocusItem,\n    MenuListProps,\n    onEntering,\n    PaperProps,\n    transitionDuration,\n    TransitionProps,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n  const menuListActionsRef = React.useRef(null);\n\n  const handleEntering = (element, isAppearing) => {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, {\n        direction: isRtl ? 'rtl' : 'ltr'\n      });\n    }\n\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n\n  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.map(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"MUI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const PaperSlot = slots.paper ?? MenuPaper;\n  const paperExternalSlotProps = slotProps.paper ?? PaperProps;\n  const rootSlotProps = useSlotProps({\n    elementType: slots.root,\n    externalSlotProps: slotProps.root,\n    ownerState,\n    className: [classes.root, className]\n  });\n  const paperSlotProps = useSlotProps({\n    elementType: PaperSlot,\n    externalSlotProps: paperExternalSlotProps,\n    ownerState,\n    className: classes.paper\n  });\n  return /*#__PURE__*/_jsx(MenuRoot, {\n    onClose: onClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: isRtl ? 'right' : 'left'\n    },\n    transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,\n    slots: {\n      paper: PaperSlot,\n      root: slots.root\n    },\n    slotProps: {\n      root: rootSlotProps,\n      paper: paperSlotProps\n    },\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration,\n    TransitionProps: {\n      onEntering: handleEntering,\n      ...TransitionProps\n    },\n    ownerState: ownerState,\n    ...other,\n    classes: PopoverClasses,\n    children: /*#__PURE__*/_jsx(MenuMenuList, {\n      onKeyDown: handleListKeyDown,\n      actions: menuListActionsRef,\n      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),\n      autoFocusItem: autoFocusItem,\n      variant: variant,\n      ...MenuListProps,\n      className: clsx(classes.list, MenuListProps.className),\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the position of the menu.\n   */\n  anchorEl: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   * @default true\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   * @default false\n   */\n  disableAutoFocusItem: PropTypes.bool,\n\n  /**\n   * Props applied to the [`MenuList`](https://mui.com/material-ui/api/menu-list/) element.\n   * @default {}\n   */\n  MenuListProps: PropTypes.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * `classes` prop applied to the [`Popover`](https://mui.com/material-ui/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    paper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   * @default 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps: PropTypes.object,\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.\n   * @default 'selectedMenu'\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default Menu;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/Menu/Menu.js"],"names":["React","isFragment","PropTypes","clsx","composeClasses","HTMLElementType","useRtl","useSlotProps","MenuList","Popover","PopoverPaper","rootShouldForwardProp","styled","useDefaultProps","getMenuUtilityClass","jsx","_jsx","RTL_ORIGIN","vertical","horizontal","LTR_ORIGIN","useUtilityClasses","ownerState","classes","slots","root","paper","list","MenuRoot","shouldForwardProp","prop","name","slot","overridesResolver","props","styles","MenuPaper","maxHeight","WebkitOverflowScrolling","MenuMenuList","outline","Menu","forwardRef","inProps","ref","autoFocus","children","className","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","onEntering","variant","slotProps","other","isRtl","autoFocusItem","menuListActionsRef","useRef","handleEntering","element","isAppearing","current","adjustStyleForScrollbar","direction","handleListKeyDown","event","key","preventDefault","activeItemIndex","Children","map","child","index","isValidElement","process","env","NODE_ENV","console","error","join","disabled","selected","PaperSlot","paperExternalSlotProps","rootSlotProps","elementType","externalSlotProps","paperSlotProps","anchorOrigin","transformOrigin","onKeyDown","actions","propTypes","anchorEl","oneOfType","func","bool","node","object","string","isRequired","shape","sx","arrayOf","oneOf","number","appear","enter","exit"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport HTMLElementType from '@mui/utils/HTMLElementType';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport MenuList from \"../MenuList/index.js\";\nimport Popover, { PopoverPaper } from \"../Popover/index.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getMenuUtilityClass } from \"./menuClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    paper: ['paper'],\n    list: ['list']\n  };\n  return composeClasses(slots, getMenuUtilityClass, classes);\n};\nconst MenuRoot = styled(Popover, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiMenu',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nexport const MenuPaper = styled(PopoverPaper, {\n  name: 'MuiMenu',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})({\n  // specZ: The maximum height of a simple menu should be one or more rows less than the view\n  // height. This ensures a tappable area outside of the simple menu with which to dismiss\n  // the menu.\n  maxHeight: 'calc(100% - 96px)',\n  // Add iOS momentum scrolling for iOS < 13.0\n  WebkitOverflowScrolling: 'touch'\n});\nconst MenuMenuList = styled(MenuList, {\n  name: 'MuiMenu',\n  slot: 'List',\n  overridesResolver: (props, styles) => styles.list\n})({\n  // We disable the focus ring for mouse, touch and keyboard users.\n  outline: 0\n});\nconst Menu = /*#__PURE__*/React.forwardRef(function Menu(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiMenu'\n  });\n  const {\n    autoFocus = true,\n    children,\n    className,\n    disableAutoFocusItem = false,\n    MenuListProps = {},\n    onClose,\n    open,\n    PaperProps = {},\n    PopoverClasses,\n    transitionDuration = 'auto',\n    TransitionProps: {\n      onEntering,\n      ...TransitionProps\n    } = {},\n    variant = 'selectedMenu',\n    slots = {},\n    slotProps = {},\n    ...other\n  } = props;\n  const isRtl = useRtl();\n  const ownerState = {\n    ...props,\n    autoFocus,\n    disableAutoFocusItem,\n    MenuListProps,\n    onEntering,\n    PaperProps,\n    transitionDuration,\n    TransitionProps,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n  const menuListActionsRef = React.useRef(null);\n  const handleEntering = (element, isAppearing) => {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, {\n        direction: isRtl ? 'rtl' : 'ltr'\n      });\n    }\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n  let activeItemIndex = -1;\n  // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n  React.Children.map(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"MUI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const PaperSlot = slots.paper ?? MenuPaper;\n  const paperExternalSlotProps = slotProps.paper ?? PaperProps;\n  const rootSlotProps = useSlotProps({\n    elementType: slots.root,\n    externalSlotProps: slotProps.root,\n    ownerState,\n    className: [classes.root, className]\n  });\n  const paperSlotProps = useSlotProps({\n    elementType: PaperSlot,\n    externalSlotProps: paperExternalSlotProps,\n    ownerState,\n    className: classes.paper\n  });\n  return /*#__PURE__*/_jsx(MenuRoot, {\n    onClose: onClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: isRtl ? 'right' : 'left'\n    },\n    transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,\n    slots: {\n      paper: PaperSlot,\n      root: slots.root\n    },\n    slotProps: {\n      root: rootSlotProps,\n      paper: paperSlotProps\n    },\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration,\n    TransitionProps: {\n      onEntering: handleEntering,\n      ...TransitionProps\n    },\n    ownerState: ownerState,\n    ...other,\n    classes: PopoverClasses,\n    children: /*#__PURE__*/_jsx(MenuMenuList, {\n      onKeyDown: handleListKeyDown,\n      actions: menuListActionsRef,\n      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),\n      autoFocusItem: autoFocusItem,\n      variant: variant,\n      ...MenuListProps,\n      className: clsx(classes.list, MenuListProps.className),\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the position of the menu.\n   */\n  anchorEl: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   * @default true\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   * @default false\n   */\n  disableAutoFocusItem: PropTypes.bool,\n  /**\n   * Props applied to the [`MenuList`](https://mui.com/material-ui/api/menu-list/) element.\n   * @default {}\n   */\n  MenuListProps: PropTypes.object,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n  /**\n   * `classes` prop applied to the [`Popover`](https://mui.com/material-ui/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    paper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   * @default 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps: PropTypes.object,\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.\n   * @default 'selectedMenu'\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default Menu;"]},"metadata":{},"sourceType":"module"}