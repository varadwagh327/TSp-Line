{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\n/**\n * Allows child elements to be transitioned in and out.\n *\n * Demos:\n *\n * - [Transitions](https://next.mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionTrigger API](https://next.mui.com/base-ui/react-transitions/hooks-api/#use-transition-trigger)\n */\n\nexport function useTransitionTrigger(requestEnter) {\n  const [exitTransitionFinished, setExitTransitionFinished] = React.useState(true);\n  const hasPendingExitTransition = React.useRef(false);\n  const registeredTransitions = React.useRef(0);\n  const [hasTransition, setHasTransition] = React.useState(false);\n  const previousRequestEnter = React.useRef(requestEnter);\n  React.useEffect(() => {\n    if (!requestEnter && // checking registeredTransitions.current instead of hasTransition to avoid this effect re-firing whenever hasTransition changes\n    registeredTransitions.current > 0 && // prevents waiting for a pending transition right after mounting\n    previousRequestEnter.current !== requestEnter) {\n      hasPendingExitTransition.current = true;\n      setExitTransitionFinished(false);\n    }\n\n    previousRequestEnter.current = requestEnter;\n  }, [requestEnter]);\n  const handleExited = React.useCallback(() => {\n    hasPendingExitTransition.current = false;\n    setExitTransitionFinished(true);\n  }, []);\n  const registerTransition = React.useCallback(() => {\n    registeredTransitions.current += 1;\n    setHasTransition(true);\n    return () => {\n      registeredTransitions.current -= 1;\n\n      if (registeredTransitions.current === 0) {\n        setHasTransition(false);\n      }\n    };\n  }, []);\n  let hasExited;\n\n  if (!hasTransition) {\n    // If there are no transitions registered, the `exited` state is opposite of `requestEnter` immediately.\n    hasExited = !requestEnter;\n  } else if (requestEnter) {\n    hasExited = false;\n  } else {\n    hasExited = !hasPendingExitTransition.current && exitTransitionFinished;\n  }\n\n  const contextValue = React.useMemo(() => ({\n    requestedEnter: requestEnter,\n    onExited: handleExited,\n    registerTransition,\n    hasExited\n  }), [handleExited, requestEnter, registerTransition, hasExited]);\n  return {\n    contextValue,\n    hasExited\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useTransition/useTransitionTrigger.js"],"names":["React","useTransitionTrigger","requestEnter","exitTransitionFinished","setExitTransitionFinished","useState","hasPendingExitTransition","useRef","registeredTransitions","hasTransition","setHasTransition","previousRequestEnter","useEffect","current","handleExited","useCallback","registerTransition","hasExited","contextValue","useMemo","requestedEnter","onExited"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,YAA9B,EAA4C;AACjD,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDJ,KAAK,CAACK,QAAN,CAAe,IAAf,CAA5D;AACA,QAAMC,wBAAwB,GAAGN,KAAK,CAACO,MAAN,CAAa,KAAb,CAAjC;AACA,QAAMC,qBAAqB,GAAGR,KAAK,CAACO,MAAN,CAAa,CAAb,CAA9B;AACA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCV,KAAK,CAACK,QAAN,CAAe,KAAf,CAA1C;AACA,QAAMM,oBAAoB,GAAGX,KAAK,CAACO,MAAN,CAAaL,YAAb,CAA7B;AACAF,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACV,YAAD,IACJ;AACAM,IAAAA,qBAAqB,CAACK,OAAtB,GAAgC,CAF5B,IAGJ;AACAF,IAAAA,oBAAoB,CAACE,OAArB,KAAiCX,YAJjC,EAI+C;AAC7CI,MAAAA,wBAAwB,CAACO,OAAzB,GAAmC,IAAnC;AACAT,MAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD;;AACDO,IAAAA,oBAAoB,CAACE,OAArB,GAA+BX,YAA/B;AACD,GAVD,EAUG,CAACA,YAAD,CAVH;AAWA,QAAMY,YAAY,GAAGd,KAAK,CAACe,WAAN,CAAkB,MAAM;AAC3CT,IAAAA,wBAAwB,CAACO,OAAzB,GAAmC,KAAnC;AACAT,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD,GAHoB,EAGlB,EAHkB,CAArB;AAIA,QAAMY,kBAAkB,GAAGhB,KAAK,CAACe,WAAN,CAAkB,MAAM;AACjDP,IAAAA,qBAAqB,CAACK,OAAtB,IAAiC,CAAjC;AACAH,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,WAAO,MAAM;AACXF,MAAAA,qBAAqB,CAACK,OAAtB,IAAiC,CAAjC;;AACA,UAAIL,qBAAqB,CAACK,OAAtB,KAAkC,CAAtC,EAAyC;AACvCH,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AACF,KALD;AAMD,GAT0B,EASxB,EATwB,CAA3B;AAUA,MAAIO,SAAJ;;AACA,MAAI,CAACR,aAAL,EAAoB;AAClB;AACAQ,IAAAA,SAAS,GAAG,CAACf,YAAb;AACD,GAHD,MAGO,IAAIA,YAAJ,EAAkB;AACvBe,IAAAA,SAAS,GAAG,KAAZ;AACD,GAFM,MAEA;AACLA,IAAAA,SAAS,GAAG,CAACX,wBAAwB,CAACO,OAA1B,IAAqCV,sBAAjD;AACD;;AACD,QAAMe,YAAY,GAAGlB,KAAK,CAACmB,OAAN,CAAc,OAAO;AACxCC,IAAAA,cAAc,EAAElB,YADwB;AAExCmB,IAAAA,QAAQ,EAAEP,YAF8B;AAGxCE,IAAAA,kBAHwC;AAIxCC,IAAAA;AAJwC,GAAP,CAAd,EAKjB,CAACH,YAAD,EAAeZ,YAAf,EAA6Bc,kBAA7B,EAAiDC,SAAjD,CALiB,CAArB;AAMA,SAAO;AACLC,IAAAA,YADK;AAELD,IAAAA;AAFK,GAAP;AAID","sourcesContent":["'use client';\n\nimport * as React from 'react';\n/**\n * Allows child elements to be transitioned in and out.\n *\n * Demos:\n *\n * - [Transitions](https://next.mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionTrigger API](https://next.mui.com/base-ui/react-transitions/hooks-api/#use-transition-trigger)\n */\nexport function useTransitionTrigger(requestEnter) {\n  const [exitTransitionFinished, setExitTransitionFinished] = React.useState(true);\n  const hasPendingExitTransition = React.useRef(false);\n  const registeredTransitions = React.useRef(0);\n  const [hasTransition, setHasTransition] = React.useState(false);\n  const previousRequestEnter = React.useRef(requestEnter);\n  React.useEffect(() => {\n    if (!requestEnter &&\n    // checking registeredTransitions.current instead of hasTransition to avoid this effect re-firing whenever hasTransition changes\n    registeredTransitions.current > 0 &&\n    // prevents waiting for a pending transition right after mounting\n    previousRequestEnter.current !== requestEnter) {\n      hasPendingExitTransition.current = true;\n      setExitTransitionFinished(false);\n    }\n    previousRequestEnter.current = requestEnter;\n  }, [requestEnter]);\n  const handleExited = React.useCallback(() => {\n    hasPendingExitTransition.current = false;\n    setExitTransitionFinished(true);\n  }, []);\n  const registerTransition = React.useCallback(() => {\n    registeredTransitions.current += 1;\n    setHasTransition(true);\n    return () => {\n      registeredTransitions.current -= 1;\n      if (registeredTransitions.current === 0) {\n        setHasTransition(false);\n      }\n    };\n  }, []);\n  let hasExited;\n  if (!hasTransition) {\n    // If there are no transitions registered, the `exited` state is opposite of `requestEnter` immediately.\n    hasExited = !requestEnter;\n  } else if (requestEnter) {\n    hasExited = false;\n  } else {\n    hasExited = !hasPendingExitTransition.current && exitTransitionFinished;\n  }\n  const contextValue = React.useMemo(() => ({\n    requestedEnter: requestEnter,\n    onExited: handleExited,\n    registerTransition,\n    hasExited\n  }), [handleExited, requestEnter, registerTransition, hasExited]);\n  return {\n    contextValue,\n    hasExited\n  };\n}"]},"metadata":{},"sourceType":"module"}