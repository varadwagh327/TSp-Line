{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, HTMLElementType } from '@mui/utils';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { Portal } from '../Portal';\nimport { unstable_useModal as useModal } from '../unstable_useModal';\nimport { FocusTrap } from '../FocusTrap';\nimport { getModalUtilityClass } from './modalClasses';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    open,\n    exited\n  } = ownerState;\n  const slots = {\n    root: ['root', !open && exited && 'hidden'],\n    backdrop: ['backdrop']\n  };\n  return composeClasses(slots, useClassNamesOverride(getModalUtilityClass));\n};\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * *   [Dialog](https://mui.com/material-ui/api/dialog/)\n * *   [Drawer](https://mui.com/material-ui/api/drawer/)\n * *   [Menu](https://mui.com/material-ui/api/menu/)\n * *   [Popover](https://mui.com/material-ui/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](https://mui.com/material-ui/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n *\n * Demos:\n *\n * - [Modal](https://mui.com/base-ui/react-modal/)\n *\n * API:\n *\n * - [Modal API](https://mui.com/base-ui/react-modal/components-api/#modal)\n */\n\n\nconst Modal = /*#__PURE__*/React.forwardRef(function Modal(props, forwardedRef) {\n  const {\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    onBackdropClick,\n    onClose,\n    onKeyDown,\n    open,\n    onTransitionEnter,\n    onTransitionExited,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const propsWithDefaults = { ...props,\n    closeAfterTransition,\n    disableAutoFocus,\n    disableEnforceFocus,\n    disableEscapeKeyDown,\n    disablePortal,\n    disableRestoreFocus,\n    disableScrollLock,\n    hideBackdrop,\n    keepMounted\n  };\n  const {\n    getRootProps,\n    getBackdropProps,\n    getTransitionProps,\n    portalRef,\n    isTopModal,\n    exited,\n    hasTransition\n  } = useModal({ ...propsWithDefaults,\n    rootRef: forwardedRef\n  });\n  const ownerState = { ...propsWithDefaults,\n    exited,\n    hasTransition\n  };\n  const classes = useUtilityClasses(ownerState);\n  const childProps = {};\n\n  if (children.props.tabIndex === undefined) {\n    childProps.tabIndex = '-1';\n  } // It's a Transition like component\n\n\n  if (hasTransition) {\n    const {\n      onEnter,\n      onExited\n    } = getTransitionProps();\n    childProps.onEnter = onEnter;\n    childProps.onExited = onExited;\n  }\n\n  const Root = slots.root ?? 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    getSlotProps: getRootProps,\n    className: classes.root,\n    ownerState\n  });\n  const BackdropComponent = slots.backdrop;\n  const backdropProps = useSlotProps({\n    elementType: BackdropComponent,\n    externalSlotProps: slotProps.backdrop,\n    getSlotProps: otherHandlers => {\n      return getBackdropProps({ ...otherHandlers,\n        onClick: e => {\n          if (onBackdropClick) {\n            onBackdropClick(e);\n          }\n\n          if (otherHandlers?.onClick) {\n            otherHandlers.onClick(e);\n          }\n        }\n      });\n    },\n    className: classes.backdrop,\n    ownerState\n  });\n\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(Portal, {\n    ref: portalRef,\n    container: container,\n    disablePortal: disablePortal,\n    children: /*#__PURE__*/_jsxs(Root, { ...rootProps,\n      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/_jsx(BackdropComponent, { ...backdropProps\n      }) : null, /*#__PURE__*/_jsx(FocusTrap, {\n        disableEnforceFocus: disableEnforceFocus,\n        disableAutoFocus: disableAutoFocus,\n        disableRestoreFocus: disableRestoreFocus,\n        isEnabled: isTopModal,\n        open: open,\n        children: /*#__PURE__*/React.cloneElement(children, childProps)\n      })]\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Modal.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   * @default false\n   */\n  closeAfterTransition: PropTypes.bool,\n\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   * @default false\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Disable the scroll lock behavior.\n   * @default false\n   */\n  disableScrollLock: PropTypes.bool,\n\n  /**\n   * If `true`, the backdrop is not rendered.\n   * @default false\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   * @default false\n   */\n  keepMounted: PropTypes.bool,\n\n  /**\n   * Callback fired when the backdrop is clicked.\n   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * A function called when a transition enters.\n   */\n  onTransitionEnter: PropTypes.func,\n\n  /**\n   * A function called when a transition has exited.\n   */\n  onTransitionExited: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * The props used for each slot inside the Modal.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Modal.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    backdrop: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Modal };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Modal/Modal.js"],"names":["React","PropTypes","elementAcceptingRef","HTMLElementType","useSlotProps","useClassNamesOverride","unstable_composeClasses","composeClasses","Portal","unstable_useModal","useModal","FocusTrap","getModalUtilityClass","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","open","exited","slots","root","backdrop","Modal","forwardRef","props","forwardedRef","children","closeAfterTransition","container","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","onKeyDown","onTransitionEnter","onTransitionExited","slotProps","other","propsWithDefaults","getRootProps","getBackdropProps","getTransitionProps","portalRef","isTopModal","hasTransition","rootRef","classes","childProps","tabIndex","undefined","onEnter","onExited","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","getSlotProps","className","BackdropComponent","backdropProps","otherHandlers","onClick","e","ref","isEnabled","cloneElement","process","env","NODE_ENV","propTypes","isRequired","bool","oneOfType","func","shape","object"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, HTMLElementType } from '@mui/utils';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { Portal } from '../Portal';\nimport { unstable_useModal as useModal } from '../unstable_useModal';\nimport { FocusTrap } from '../FocusTrap';\nimport { getModalUtilityClass } from './modalClasses';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    open,\n    exited\n  } = ownerState;\n  const slots = {\n    root: ['root', !open && exited && 'hidden'],\n    backdrop: ['backdrop']\n  };\n  return composeClasses(slots, useClassNamesOverride(getModalUtilityClass));\n};\n\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * *   [Dialog](https://mui.com/material-ui/api/dialog/)\n * *   [Drawer](https://mui.com/material-ui/api/drawer/)\n * *   [Menu](https://mui.com/material-ui/api/menu/)\n * *   [Popover](https://mui.com/material-ui/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](https://mui.com/material-ui/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n *\n * Demos:\n *\n * - [Modal](https://mui.com/base-ui/react-modal/)\n *\n * API:\n *\n * - [Modal API](https://mui.com/base-ui/react-modal/components-api/#modal)\n */\nconst Modal = /*#__PURE__*/React.forwardRef(function Modal(props, forwardedRef) {\n  const {\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    onBackdropClick,\n    onClose,\n    onKeyDown,\n    open,\n    onTransitionEnter,\n    onTransitionExited,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const propsWithDefaults = {\n    ...props,\n    closeAfterTransition,\n    disableAutoFocus,\n    disableEnforceFocus,\n    disableEscapeKeyDown,\n    disablePortal,\n    disableRestoreFocus,\n    disableScrollLock,\n    hideBackdrop,\n    keepMounted\n  };\n  const {\n    getRootProps,\n    getBackdropProps,\n    getTransitionProps,\n    portalRef,\n    isTopModal,\n    exited,\n    hasTransition\n  } = useModal({\n    ...propsWithDefaults,\n    rootRef: forwardedRef\n  });\n  const ownerState = {\n    ...propsWithDefaults,\n    exited,\n    hasTransition\n  };\n  const classes = useUtilityClasses(ownerState);\n  const childProps = {};\n  if (children.props.tabIndex === undefined) {\n    childProps.tabIndex = '-1';\n  }\n\n  // It's a Transition like component\n  if (hasTransition) {\n    const {\n      onEnter,\n      onExited\n    } = getTransitionProps();\n    childProps.onEnter = onEnter;\n    childProps.onExited = onExited;\n  }\n  const Root = slots.root ?? 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    getSlotProps: getRootProps,\n    className: classes.root,\n    ownerState\n  });\n  const BackdropComponent = slots.backdrop;\n  const backdropProps = useSlotProps({\n    elementType: BackdropComponent,\n    externalSlotProps: slotProps.backdrop,\n    getSlotProps: otherHandlers => {\n      return getBackdropProps({\n        ...otherHandlers,\n        onClick: e => {\n          if (onBackdropClick) {\n            onBackdropClick(e);\n          }\n          if (otherHandlers?.onClick) {\n            otherHandlers.onClick(e);\n          }\n        }\n      });\n    },\n    className: classes.backdrop,\n    ownerState\n  });\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(Portal, {\n    ref: portalRef,\n    container: container,\n    disablePortal: disablePortal,\n    children: /*#__PURE__*/_jsxs(Root, {\n      ...rootProps,\n      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/_jsx(BackdropComponent, {\n        ...backdropProps\n      }) : null, /*#__PURE__*/_jsx(FocusTrap, {\n        disableEnforceFocus: disableEnforceFocus,\n        disableAutoFocus: disableAutoFocus,\n        disableRestoreFocus: disableRestoreFocus,\n        isEnabled: isTopModal,\n        open: open,\n        children: /*#__PURE__*/React.cloneElement(children, childProps)\n      })]\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Modal.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   * @default false\n   */\n  closeAfterTransition: PropTypes.bool,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   * @default false\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n  /**\n   * Disable the scroll lock behavior.\n   * @default false\n   */\n  disableScrollLock: PropTypes.bool,\n  /**\n   * If `true`, the backdrop is not rendered.\n   * @default false\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   * @default false\n   */\n  keepMounted: PropTypes.bool,\n  /**\n   * Callback fired when the backdrop is clicked.\n   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.\n   */\n  onBackdropClick: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * A function called when a transition enters.\n   */\n  onTransitionEnter: PropTypes.func,\n  /**\n   * A function called when a transition has exited.\n   */\n  onTransitionExited: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * The props used for each slot inside the Modal.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Modal.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    backdrop: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Modal };"]},"metadata":{},"sourceType":"module"}