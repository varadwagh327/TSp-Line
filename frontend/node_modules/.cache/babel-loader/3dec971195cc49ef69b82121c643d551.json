{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\nimport { useButton } from '../useButton/useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { extractEventHandlers } from '../utils';\n/**\n *\n * Demos:\n *\n * - [Menu](https://next.mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuButton API](https://next.mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\n */\n\nexport function useMenuButton() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  } = parameters;\n  const menuContext = React.useContext(DropdownContext);\n\n  if (menuContext === null) {\n    throw new Error('useMenuButton: no menu context available.');\n  }\n\n  const {\n    state,\n    dispatch,\n    registerTrigger,\n    popupId\n  } = menuContext;\n  const {\n    getRootProps: getButtonRootProps,\n    rootRef: buttonRootRef,\n    active\n  } = useButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  });\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\n\n  const createHandleClick = otherHandlers => event => {\n    otherHandlers.onClick?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    dispatch({\n      type: DropdownActionTypes.toggle,\n      event\n    });\n  };\n\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: DropdownActionTypes.open,\n        event\n      });\n    }\n  };\n\n  const getOwnRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onClick: createHandleClick(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedProps = combineHooksSlotProps(getOwnRootProps, getButtonRootProps);\n    return {\n      'aria-haspopup': 'menu',\n      'aria-expanded': state.open,\n      'aria-controls': popupId,\n      ...externalProps,\n      ...externalEventHandlers,\n      ...getCombinedProps(externalEventHandlers),\n      tabIndex: 0,\n      // this is needed to make the button focused after click in Safari\n      ref: handleRef\n    };\n  };\n\n  return {\n    active,\n    getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useMenuButton/useMenuButton.js"],"names":["React","unstable_useForkRef","useForkRef","DropdownContext","DropdownActionTypes","useButton","combineHooksSlotProps","extractEventHandlers","useMenuButton","parameters","disabled","focusableWhenDisabled","rootRef","externalRef","menuContext","useContext","Error","state","dispatch","registerTrigger","popupId","getRootProps","getButtonRootProps","buttonRootRef","active","handleRef","createHandleClick","otherHandlers","event","onClick","defaultMuiPrevented","type","toggle","createHandleKeyDown","onKeyDown","key","preventDefault","open","getOwnRootProps","externalProps","externalEventHandlers","getCombinedProps","tabIndex","ref"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\nimport { useButton } from '../useButton/useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { extractEventHandlers } from '../utils';\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://next.mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuButton API](https://next.mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\n */\nexport function useMenuButton(parameters = {}) {\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  } = parameters;\n  const menuContext = React.useContext(DropdownContext);\n  if (menuContext === null) {\n    throw new Error('useMenuButton: no menu context available.');\n  }\n  const {\n    state,\n    dispatch,\n    registerTrigger,\n    popupId\n  } = menuContext;\n  const {\n    getRootProps: getButtonRootProps,\n    rootRef: buttonRootRef,\n    active\n  } = useButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  });\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\n  const createHandleClick = otherHandlers => event => {\n    otherHandlers.onClick?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    dispatch({\n      type: DropdownActionTypes.toggle,\n      event\n    });\n  };\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: DropdownActionTypes.open,\n        event\n      });\n    }\n  };\n  const getOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleClick(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedProps = combineHooksSlotProps(getOwnRootProps, getButtonRootProps);\n    return {\n      'aria-haspopup': 'menu',\n      'aria-expanded': state.open,\n      'aria-controls': popupId,\n      ...externalProps,\n      ...externalEventHandlers,\n      ...getCombinedProps(externalEventHandlers),\n      tabIndex: 0,\n      // this is needed to make the button focused after click in Safari\n      ref: handleRef\n    };\n  };\n  return {\n    active,\n    getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}"]},"metadata":{},"sourceType":"module"}