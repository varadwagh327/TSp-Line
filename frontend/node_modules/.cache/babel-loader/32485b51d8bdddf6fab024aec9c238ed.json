{"ast":null,"code":"'use client';\n\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useFormControlContext } from '../FormControl';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\n/**\n *\n * Demos:\n *\n * - [Input](https://next.mui.com/base-ui/react-input/#hook)\n *\n * API:\n *\n * - [useInput API](https://next.mui.com/base-ui/react-input/hooks-api/#use-input)\n */\n\nexport function useInput() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultValue: defaultValueProp,\n    disabled: disabledProp = false,\n    error: errorProp = false,\n    onBlur,\n    onChange,\n    onFocus,\n    required: requiredProp = false,\n    value: valueProp,\n    inputRef: inputRefProp\n  } = parameters;\n  const formControlContext = useFormControlContext();\n  let defaultValue;\n  let disabled;\n  let error;\n  let required;\n  let value;\n\n  if (formControlContext) {\n    defaultValue = undefined;\n    disabled = formControlContext.disabled ?? false;\n    error = formControlContext.error ?? false;\n    required = formControlContext.required ?? false;\n    value = formControlContext.value;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const definedLocalProps = ['defaultValue', 'disabled', 'error', 'required', 'value'].filter(prop => parameters[prop] !== undefined);\n\n      if (definedLocalProps.length > 0) {\n        console.warn(['MUI: You have set props on an input that is inside a FormControl.', 'Set these props on a FormControl instead. Otherwise they will be ignored.', `Ignored props: ${definedLocalProps.join(', ')}`].join('\\n'));\n      }\n    }\n  } else {\n    defaultValue = defaultValueProp;\n    disabled = disabledProp;\n    error = errorProp;\n    required = requiredProp;\n    value = valueProp;\n  }\n\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const handleInputRefWarning = React.useCallback(instance => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {\n        console.error(['MUI: You have provided a `slots.input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\\n'));\n      }\n    }\n  }, []);\n  const inputRef = React.useRef(null);\n  const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\n  const [focused, setFocused] = React.useState(false); // The blur won't fire when the disabled state is set on a focused input.\n  // We need to book keep the focused state manually.\n\n  React.useEffect(() => {\n    if (!formControlContext && disabled && focused) {\n      setFocused(false); // @ts-ignore\n\n      onBlur?.();\n    }\n  }, [formControlContext, disabled, focused, onBlur]);\n\n  const handleFocus = otherHandlers => event => {\n    // Fix a bug with IE11 where the focus/blur events are triggered\n    // while the component is disabled.\n    if (formControlContext?.disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    otherHandlers.onFocus?.(event);\n\n    if (formControlContext && formControlContext.onFocus) {\n      formControlContext?.onFocus?.();\n    } else {\n      setFocused(true);\n    }\n  };\n\n  const handleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n\n    if (formControlContext && formControlContext.onBlur) {\n      formControlContext.onBlur();\n    } else {\n      setFocused(false);\n    }\n  };\n\n  const handleChange = otherHandlers => function (event) {\n    if (!isControlled) {\n      const element = event.target || inputRef.current;\n\n      if (element == null) {\n        throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Expected valid input target. Did you use a custom \\`slots.input\\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : _formatMuiErrorMessage(17));\n      }\n    }\n\n    formControlContext?.onChange?.(event); // @ts-ignore\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    otherHandlers.onChange?.(event, ...args);\n  };\n\n  const handleClick = otherHandlers => event => {\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n\n    otherHandlers.onClick?.(event);\n  };\n\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // onBlur, onChange and onFocus are forwarded to the input slot.\n    const propsEventHandlers = extractEventHandlers(parameters, ['onBlur', 'onChange', 'onFocus']);\n    const externalEventHandlers = { ...propsEventHandlers,\n      ...extractEventHandlers(externalProps)\n    };\n    return { ...externalProps,\n      ...externalEventHandlers,\n      onClick: handleClick(externalEventHandlers)\n    };\n  };\n\n  const getInputProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const propsEventHandlers = {\n      onBlur,\n      onChange,\n      onFocus\n    };\n    const externalEventHandlers = { ...propsEventHandlers,\n      ...extractEventHandlers(externalProps)\n    };\n    const mergedEventHandlers = { ...externalEventHandlers,\n      onBlur: handleBlur(externalEventHandlers),\n      onChange: handleChange(externalEventHandlers),\n      onFocus: handleFocus(externalEventHandlers)\n    };\n    return { ...mergedEventHandlers,\n      'aria-invalid': error || undefined,\n      defaultValue: defaultValue,\n      value: value,\n      required,\n      disabled,\n      ...externalProps,\n      ref: handleInputRef,\n      ...mergedEventHandlers\n    };\n  };\n\n  return {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    getInputProps,\n    getRootProps,\n    inputRef: handleInputRef,\n    required,\n    value\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useInput/useInput.js"],"names":["_formatMuiErrorMessage","React","unstable_useForkRef","useForkRef","useFormControlContext","extractEventHandlers","useInput","parameters","defaultValue","defaultValueProp","disabled","disabledProp","error","errorProp","onBlur","onChange","onFocus","required","requiredProp","value","valueProp","inputRef","inputRefProp","formControlContext","undefined","process","env","NODE_ENV","definedLocalProps","filter","prop","length","console","warn","join","current","isControlled","useRef","handleInputRefWarning","useCallback","instance","nodeName","focus","handleInputRef","focused","setFocused","useState","useEffect","handleFocus","otherHandlers","event","stopPropagation","handleBlur","handleChange","element","target","Error","args","handleClick","currentTarget","onClick","getRootProps","externalProps","propsEventHandlers","externalEventHandlers","getInputProps","mergedEventHandlers","ref"],"mappings":"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","sourcesContent":["'use client';\n\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useFormControlContext } from '../FormControl';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\n/**\n *\n * Demos:\n *\n * - [Input](https://next.mui.com/base-ui/react-input/#hook)\n *\n * API:\n *\n * - [useInput API](https://next.mui.com/base-ui/react-input/hooks-api/#use-input)\n */\nexport function useInput(parameters = {}) {\n  const {\n    defaultValue: defaultValueProp,\n    disabled: disabledProp = false,\n    error: errorProp = false,\n    onBlur,\n    onChange,\n    onFocus,\n    required: requiredProp = false,\n    value: valueProp,\n    inputRef: inputRefProp\n  } = parameters;\n  const formControlContext = useFormControlContext();\n  let defaultValue;\n  let disabled;\n  let error;\n  let required;\n  let value;\n  if (formControlContext) {\n    defaultValue = undefined;\n    disabled = formControlContext.disabled ?? false;\n    error = formControlContext.error ?? false;\n    required = formControlContext.required ?? false;\n    value = formControlContext.value;\n    if (process.env.NODE_ENV !== 'production') {\n      const definedLocalProps = ['defaultValue', 'disabled', 'error', 'required', 'value'].filter(prop => parameters[prop] !== undefined);\n      if (definedLocalProps.length > 0) {\n        console.warn(['MUI: You have set props on an input that is inside a FormControl.', 'Set these props on a FormControl instead. Otherwise they will be ignored.', `Ignored props: ${definedLocalProps.join(', ')}`].join('\\n'));\n      }\n    }\n  } else {\n    defaultValue = defaultValueProp;\n    disabled = disabledProp;\n    error = errorProp;\n    required = requiredProp;\n    value = valueProp;\n  }\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const handleInputRefWarning = React.useCallback(instance => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {\n        console.error(['MUI: You have provided a `slots.input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\\n'));\n      }\n    }\n  }, []);\n  const inputRef = React.useRef(null);\n  const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\n  const [focused, setFocused] = React.useState(false);\n\n  // The blur won't fire when the disabled state is set on a focused input.\n  // We need to book keep the focused state manually.\n  React.useEffect(() => {\n    if (!formControlContext && disabled && focused) {\n      setFocused(false);\n\n      // @ts-ignore\n      onBlur?.();\n    }\n  }, [formControlContext, disabled, focused, onBlur]);\n  const handleFocus = otherHandlers => event => {\n    // Fix a bug with IE11 where the focus/blur events are triggered\n    // while the component is disabled.\n    if (formControlContext?.disabled) {\n      event.stopPropagation();\n      return;\n    }\n    otherHandlers.onFocus?.(event);\n    if (formControlContext && formControlContext.onFocus) {\n      formControlContext?.onFocus?.();\n    } else {\n      setFocused(true);\n    }\n  };\n  const handleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (formControlContext && formControlContext.onBlur) {\n      formControlContext.onBlur();\n    } else {\n      setFocused(false);\n    }\n  };\n  const handleChange = otherHandlers => (event, ...args) => {\n    if (!isControlled) {\n      const element = event.target || inputRef.current;\n      if (element == null) {\n        throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Expected valid input target. Did you use a custom \\`slots.input\\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : _formatMuiErrorMessage(17));\n      }\n    }\n    formControlContext?.onChange?.(event);\n\n    // @ts-ignore\n    otherHandlers.onChange?.(event, ...args);\n  };\n  const handleClick = otherHandlers => event => {\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n    otherHandlers.onClick?.(event);\n  };\n  const getRootProps = (externalProps = {}) => {\n    // onBlur, onChange and onFocus are forwarded to the input slot.\n    const propsEventHandlers = extractEventHandlers(parameters, ['onBlur', 'onChange', 'onFocus']);\n    const externalEventHandlers = {\n      ...propsEventHandlers,\n      ...extractEventHandlers(externalProps)\n    };\n    return {\n      ...externalProps,\n      ...externalEventHandlers,\n      onClick: handleClick(externalEventHandlers)\n    };\n  };\n  const getInputProps = (externalProps = {}) => {\n    const propsEventHandlers = {\n      onBlur,\n      onChange,\n      onFocus\n    };\n    const externalEventHandlers = {\n      ...propsEventHandlers,\n      ...extractEventHandlers(externalProps)\n    };\n    const mergedEventHandlers = {\n      ...externalEventHandlers,\n      onBlur: handleBlur(externalEventHandlers),\n      onChange: handleChange(externalEventHandlers),\n      onFocus: handleFocus(externalEventHandlers)\n    };\n    return {\n      ...mergedEventHandlers,\n      'aria-invalid': error || undefined,\n      defaultValue: defaultValue,\n      value: value,\n      required,\n      disabled,\n      ...externalProps,\n      ref: handleInputRef,\n      ...mergedEventHandlers\n    };\n  };\n  return {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    getInputProps,\n    getRootProps,\n    inputRef: handleInputRef,\n    required,\n    value\n  };\n}"]},"metadata":{},"sourceType":"module"}