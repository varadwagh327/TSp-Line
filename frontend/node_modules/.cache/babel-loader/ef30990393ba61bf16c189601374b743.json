{"ast":null,"code":"import createPalette from \"./createPalette.js\";\nimport getOverlayAlpha from \"./getOverlayAlpha.js\";\nconst defaultDarkOverlays = [...Array(25)].map((_, index) => {\n  if (index === 0) {\n    return 'none';\n  }\n\n  const overlay = getOverlayAlpha(index);\n  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;\n});\nexport function getOpacity(mode) {\n  return {\n    inputPlaceholder: mode === 'dark' ? 0.5 : 0.42,\n    inputUnderline: mode === 'dark' ? 0.7 : 0.42,\n    switchTrackDisabled: mode === 'dark' ? 0.2 : 0.12,\n    switchTrack: mode === 'dark' ? 0.3 : 0.38\n  };\n}\nexport function getOverlays(mode) {\n  return mode === 'dark' ? defaultDarkOverlays : [];\n}\nexport default function createColorScheme(options) {\n  const {\n    palette: paletteInput = {\n      mode: 'light'\n    },\n    // need to cast to avoid module augmentation test\n    opacity,\n    overlays,\n    ...rest\n  } = options;\n  const palette = createPalette(paletteInput);\n  return {\n    palette,\n    opacity: { ...getOpacity(palette.mode),\n      ...opacity\n    },\n    overlays: overlays || getOverlays(palette.mode),\n    ...rest\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/material/styles/createColorScheme.js"],"names":["createPalette","getOverlayAlpha","defaultDarkOverlays","Array","map","_","index","overlay","getOpacity","mode","inputPlaceholder","inputUnderline","switchTrackDisabled","switchTrack","getOverlays","createColorScheme","options","palette","paletteInput","opacity","overlays","rest"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,MAAMC,mBAAmB,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAD,CAAT,EAAeC,GAAf,CAAmB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC3D,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,MAAP;AACD;;AACD,QAAMC,OAAO,GAAGN,eAAe,CAACK,KAAD,CAA/B;AACA,SAAQ,sCAAqCC,OAAQ,yBAAwBA,OAAQ,IAArF;AACD,CAN2B,CAA5B;AAOA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,SAAO;AACLC,IAAAA,gBAAgB,EAAED,IAAI,KAAK,MAAT,GAAkB,GAAlB,GAAwB,IADrC;AAELE,IAAAA,cAAc,EAAEF,IAAI,KAAK,MAAT,GAAkB,GAAlB,GAAwB,IAFnC;AAGLG,IAAAA,mBAAmB,EAAEH,IAAI,KAAK,MAAT,GAAkB,GAAlB,GAAwB,IAHxC;AAILI,IAAAA,WAAW,EAAEJ,IAAI,KAAK,MAAT,GAAkB,GAAlB,GAAwB;AAJhC,GAAP;AAMD;AACD,OAAO,SAASK,WAAT,CAAqBL,IAArB,EAA2B;AAChC,SAAOA,IAAI,KAAK,MAAT,GAAkBP,mBAAlB,GAAwC,EAA/C;AACD;AACD,eAAe,SAASa,iBAAT,CAA2BC,OAA3B,EAAoC;AACjD,QAAM;AACJC,IAAAA,OAAO,EAAEC,YAAY,GAAG;AACtBT,MAAAA,IAAI,EAAE;AADgB,KADpB;AAIJ;AACAU,IAAAA,OALI;AAMJC,IAAAA,QANI;AAOJ,OAAGC;AAPC,MAQFL,OARJ;AASA,QAAMC,OAAO,GAAGjB,aAAa,CAACkB,YAAD,CAA7B;AACA,SAAO;AACLD,IAAAA,OADK;AAELE,IAAAA,OAAO,EAAE,EACP,GAAGX,UAAU,CAACS,OAAO,CAACR,IAAT,CADN;AAEP,SAAGU;AAFI,KAFJ;AAMLC,IAAAA,QAAQ,EAAEA,QAAQ,IAAIN,WAAW,CAACG,OAAO,CAACR,IAAT,CAN5B;AAOL,OAAGY;AAPE,GAAP;AASD","sourcesContent":["import createPalette from \"./createPalette.js\";\nimport getOverlayAlpha from \"./getOverlayAlpha.js\";\nconst defaultDarkOverlays = [...Array(25)].map((_, index) => {\n  if (index === 0) {\n    return 'none';\n  }\n  const overlay = getOverlayAlpha(index);\n  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;\n});\nexport function getOpacity(mode) {\n  return {\n    inputPlaceholder: mode === 'dark' ? 0.5 : 0.42,\n    inputUnderline: mode === 'dark' ? 0.7 : 0.42,\n    switchTrackDisabled: mode === 'dark' ? 0.2 : 0.12,\n    switchTrack: mode === 'dark' ? 0.3 : 0.38\n  };\n}\nexport function getOverlays(mode) {\n  return mode === 'dark' ? defaultDarkOverlays : [];\n}\nexport default function createColorScheme(options) {\n  const {\n    palette: paletteInput = {\n      mode: 'light'\n    },\n    // need to cast to avoid module augmentation test\n    opacity,\n    overlays,\n    ...rest\n  } = options;\n  const palette = createPalette(paletteInput);\n  return {\n    palette,\n    opacity: {\n      ...getOpacity(palette.mode),\n      ...opacity\n    },\n    overlays: overlays || getOverlays(palette.mode),\n    ...rest\n  };\n}"]},"metadata":{},"sourceType":"module"}