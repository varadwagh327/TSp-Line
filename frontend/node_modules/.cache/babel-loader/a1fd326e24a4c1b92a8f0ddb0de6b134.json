{"ast":null,"code":"'use client';\n\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport * as ReactDOM from 'react-dom';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getMasonryUtilityClass } from \"./masonryClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const parseToNumber = val => {\n  return Number(val.replace('px', ''));\n};\nconst lineBreakStyle = {\n  flexBasis: '100%',\n  width: 0,\n  margin: 0,\n  padding: 0\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryUtilityClass, classes);\n};\n\nexport const getStyle = _ref => {\n  let {\n    ownerState,\n    theme\n  } = _ref;\n  let styles = {\n    width: '100%',\n    display: 'flex',\n    flexFlow: 'column wrap',\n    alignContent: 'flex-start',\n    boxSizing: 'border-box',\n    '& > *': {\n      boxSizing: 'border-box'\n    }\n  };\n  const stylesSSR = {}; // Only applicable for Server-Side Rendering\n\n  if (ownerState.isSSR) {\n    const orderStyleSSR = {};\n    const defaultSpacing = parseToNumber(theme.spacing(ownerState.defaultSpacing));\n\n    for (let i = 1; i <= ownerState.defaultColumns; i += 1) {\n      orderStyleSSR[`&:nth-of-type(${ownerState.defaultColumns}n+${i % ownerState.defaultColumns})`] = {\n        order: i\n      };\n    }\n\n    stylesSSR.height = ownerState.defaultHeight;\n    stylesSSR.margin = -(defaultSpacing / 2);\n    stylesSSR['& > *'] = { ...styles['& > *'],\n      ...orderStyleSSR,\n      margin: defaultSpacing / 2,\n      width: `calc(${(100 / ownerState.defaultColumns).toFixed(2)}% - ${defaultSpacing}px)`\n    };\n    return { ...styles,\n      ...stylesSSR\n    };\n  }\n\n  const spacingValues = resolveBreakpointValues({\n    values: ownerState.spacing,\n    breakpoints: theme.breakpoints.values\n  });\n  const transformer = createUnarySpacing(theme);\n\n  const spacingStyleFromPropValue = propValue => {\n    let spacing; // in case of string/number value\n\n    if (typeof propValue === 'string' && !Number.isNaN(Number(propValue)) || typeof propValue === 'number') {\n      const themeSpacingValue = Number(propValue);\n      spacing = getValue(transformer, themeSpacingValue);\n    } else {\n      spacing = propValue;\n    }\n\n    return {\n      margin: `calc(0px - (${spacing} / 2))`,\n      '& > *': {\n        margin: `calc(${spacing} / 2)`\n      },\n      ...(ownerState.maxColumnHeight && {\n        height: typeof spacing === 'number' ? Math.ceil(ownerState.maxColumnHeight + parseToNumber(spacing)) : `calc(${ownerState.maxColumnHeight}px + ${spacing})`\n      })\n    };\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, spacingValues, spacingStyleFromPropValue));\n  const columnValues = resolveBreakpointValues({\n    values: ownerState.columns,\n    breakpoints: theme.breakpoints.values\n  });\n\n  const columnStyleFromPropValue = propValue => {\n    const columnValue = Number(propValue);\n    const width = `${(100 / columnValue).toFixed(2)}%`;\n    const spacing = typeof spacingValues === 'string' && !Number.isNaN(Number(spacingValues)) || typeof spacingValues === 'number' ? getValue(transformer, Number(spacingValues)) : '0px';\n    return {\n      '& > *': {\n        width: `calc(${width} - ${spacing})`\n      }\n    };\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, columnValues, columnStyleFromPropValue)); // configure width for responsive spacing values\n\n  if (typeof spacingValues === 'object') {\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, (propValue, breakpoint) => {\n      if (breakpoint) {\n        const themeSpacingValue = Number(propValue);\n        const lastBreakpoint = Object.keys(columnValues).pop();\n        const spacing = getValue(transformer, themeSpacingValue);\n        const column = typeof columnValues === 'object' ? columnValues[breakpoint] || columnValues[lastBreakpoint] : columnValues;\n        const width = `${(100 / column).toFixed(2)}%`;\n        return {\n          '& > *': {\n            width: `calc(${width} - ${spacing})`\n          }\n        };\n      }\n\n      return null;\n    }));\n  }\n\n  return styles;\n};\nconst MasonryRoot = styled('div', {\n  name: 'MuiMasonry',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(getStyle);\nconst Masonry = /*#__PURE__*/React.forwardRef(function Masonry(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonry'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    columns = 4,\n    spacing = 1,\n    sequential = false,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    ...other\n  } = props;\n  const masonryRef = React.useRef();\n  const [maxColumnHeight, setMaxColumnHeight] = React.useState();\n  const isSSR = !maxColumnHeight && defaultHeight && defaultColumns !== undefined && defaultSpacing !== undefined;\n  const [numberOfLineBreaks, setNumberOfLineBreaks] = React.useState(isSSR ? defaultColumns - 1 : 0);\n  const ownerState = { ...props,\n    spacing,\n    columns,\n    maxColumnHeight,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    isSSR\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleResize = React.useCallback(masonryChildren => {\n    if (!masonryRef.current || !masonryChildren || masonryChildren.length === 0) {\n      return;\n    }\n\n    const masonry = masonryRef.current;\n    const masonryFirstChild = masonryRef.current.firstChild;\n    const parentWidth = masonry.clientWidth;\n    const firstChildWidth = masonryFirstChild.clientWidth;\n\n    if (parentWidth === 0 || firstChildWidth === 0) {\n      return;\n    }\n\n    const firstChildComputedStyle = window.getComputedStyle(masonryFirstChild);\n    const firstChildMarginLeft = parseToNumber(firstChildComputedStyle.marginLeft);\n    const firstChildMarginRight = parseToNumber(firstChildComputedStyle.marginRight);\n    const currentNumberOfColumns = Math.round(parentWidth / (firstChildWidth + firstChildMarginLeft + firstChildMarginRight));\n    const columnHeights = new Array(currentNumberOfColumns).fill(0);\n    let skip = false;\n    let nextOrder = 1;\n    masonry.childNodes.forEach(child => {\n      if (child.nodeType !== Node.ELEMENT_NODE || child.dataset.class === 'line-break' || skip) {\n        return;\n      }\n\n      const childComputedStyle = window.getComputedStyle(child);\n      const childMarginTop = parseToNumber(childComputedStyle.marginTop);\n      const childMarginBottom = parseToNumber(childComputedStyle.marginBottom); // if any one of children isn't rendered yet, masonry's height shouldn't be computed yet\n\n      const childHeight = parseToNumber(childComputedStyle.height) ? Math.ceil(parseToNumber(childComputedStyle.height)) + childMarginTop + childMarginBottom : 0;\n\n      if (childHeight === 0) {\n        skip = true;\n        return;\n      } // if there is a nested image that isn't rendered yet, masonry's height shouldn't be computed yet\n\n\n      for (let i = 0; i < child.childNodes.length; i += 1) {\n        const nestedChild = child.childNodes[i];\n\n        if (nestedChild.tagName === 'IMG' && nestedChild.clientHeight === 0) {\n          skip = true;\n          break;\n        }\n      }\n\n      if (!skip) {\n        if (sequential) {\n          columnHeights[nextOrder - 1] += childHeight;\n          child.style.order = nextOrder;\n          nextOrder += 1;\n\n          if (nextOrder > currentNumberOfColumns) {\n            nextOrder = 1;\n          }\n        } else {\n          // find the current shortest column (where the current item will be placed)\n          const currentMinColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));\n          columnHeights[currentMinColumnIndex] += childHeight;\n          const order = currentMinColumnIndex + 1;\n          child.style.order = order;\n        }\n      }\n    });\n\n    if (!skip) {\n      // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n      // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n      // Related issue - https://github.com/facebook/react/issues/24331\n      ReactDOM.flushSync(() => {\n        setMaxColumnHeight(Math.max(...columnHeights));\n        setNumberOfLineBreaks(currentNumberOfColumns > 0 ? currentNumberOfColumns - 1 : 0);\n      });\n    }\n  }, [sequential]);\n  useEnhancedEffect(() => {\n    // IE and old browsers are not supported\n    if (typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n\n    let animationFrame;\n    const resizeObserver = new ResizeObserver(() => {\n      // see https://github.com/mui/material-ui/issues/36909\n      animationFrame = requestAnimationFrame(handleResize);\n    });\n\n    if (masonryRef.current) {\n      masonryRef.current.childNodes.forEach(childNode => {\n        resizeObserver.observe(childNode);\n      });\n    }\n\n    return () => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame);\n      }\n\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [columns, spacing, children, handleResize]);\n  const handleRef = useForkRef(ref, masonryRef); //  columns are likely to have different heights and hence can start to merge;\n  //  a line break at the end of each column prevents columns from merging\n\n  const lineBreaks = new Array(numberOfLineBreaks).fill('').map((_, index) => /*#__PURE__*/_jsx(\"span\", {\n    \"data-class\": \"line-break\",\n    style: { ...lineBreakStyle,\n      order: index + 1\n    }\n  }, index));\n  return /*#__PURE__*/_jsxs(MasonryRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState,\n    ...other,\n    children: [children, lineBreaks]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Masonry.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Number of columns.\n   * @default 4\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The default number of columns of the component. This is provided for server-side rendering.\n   */\n  defaultColumns: PropTypes.number,\n\n  /**\n   * The default height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * The default spacing of the component. Like `spacing`, it is a factor of the theme's spacing. This is provided for server-side rendering.\n   */\n  defaultSpacing: PropTypes.number,\n\n  /**\n   * Allows using sequential order rather than adding to shortest column\n   * @default false\n   */\n  sequential: PropTypes.bool,\n\n  /**\n   * Defines the space between children. It is a factor of the theme's spacing.\n   * @default 1\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Masonry;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/lab/Masonry/Masonry.js"],"names":["unstable_composeClasses","composeClasses","ReactDOM","styled","useThemeProps","createUnarySpacing","getValue","handleBreakpoints","unstable_resolveBreakpointValues","resolveBreakpointValues","deepmerge","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","clsx","PropTypes","React","getMasonryUtilityClass","jsx","_jsx","jsxs","_jsxs","parseToNumber","val","Number","replace","lineBreakStyle","flexBasis","width","margin","padding","useUtilityClasses","ownerState","classes","slots","root","getStyle","theme","styles","display","flexFlow","alignContent","boxSizing","stylesSSR","isSSR","orderStyleSSR","defaultSpacing","spacing","i","defaultColumns","order","height","defaultHeight","toFixed","spacingValues","values","breakpoints","transformer","spacingStyleFromPropValue","propValue","isNaN","themeSpacingValue","maxColumnHeight","Math","ceil","columnValues","columns","columnStyleFromPropValue","columnValue","breakpoint","lastBreakpoint","Object","keys","pop","column","MasonryRoot","name","slot","overridesResolver","props","Masonry","forwardRef","inProps","ref","children","className","component","sequential","other","masonryRef","useRef","setMaxColumnHeight","useState","undefined","numberOfLineBreaks","setNumberOfLineBreaks","handleResize","useCallback","masonryChildren","current","length","masonry","masonryFirstChild","firstChild","parentWidth","clientWidth","firstChildWidth","firstChildComputedStyle","window","getComputedStyle","firstChildMarginLeft","marginLeft","firstChildMarginRight","marginRight","currentNumberOfColumns","round","columnHeights","Array","fill","skip","nextOrder","childNodes","forEach","child","nodeType","Node","ELEMENT_NODE","dataset","class","childComputedStyle","childMarginTop","marginTop","childMarginBottom","marginBottom","childHeight","nestedChild","tagName","clientHeight","style","currentMinColumnIndex","indexOf","min","flushSync","max","ResizeObserver","animationFrame","resizeObserver","requestAnimationFrame","childNode","observe","cancelAnimationFrame","disconnect","handleRef","lineBreaks","map","_","index","as","process","env","NODE_ENV","propTypes","node","isRequired","object","string","oneOfType","arrayOf","number","elementType","bool","sx","func"],"mappings":"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","sourcesContent":["'use client';\n\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport * as ReactDOM from 'react-dom';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getMasonryUtilityClass } from \"./masonryClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const parseToNumber = val => {\n  return Number(val.replace('px', ''));\n};\nconst lineBreakStyle = {\n  flexBasis: '100%',\n  width: 0,\n  margin: 0,\n  padding: 0\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryUtilityClass, classes);\n};\nexport const getStyle = ({\n  ownerState,\n  theme\n}) => {\n  let styles = {\n    width: '100%',\n    display: 'flex',\n    flexFlow: 'column wrap',\n    alignContent: 'flex-start',\n    boxSizing: 'border-box',\n    '& > *': {\n      boxSizing: 'border-box'\n    }\n  };\n  const stylesSSR = {};\n  // Only applicable for Server-Side Rendering\n  if (ownerState.isSSR) {\n    const orderStyleSSR = {};\n    const defaultSpacing = parseToNumber(theme.spacing(ownerState.defaultSpacing));\n    for (let i = 1; i <= ownerState.defaultColumns; i += 1) {\n      orderStyleSSR[`&:nth-of-type(${ownerState.defaultColumns}n+${i % ownerState.defaultColumns})`] = {\n        order: i\n      };\n    }\n    stylesSSR.height = ownerState.defaultHeight;\n    stylesSSR.margin = -(defaultSpacing / 2);\n    stylesSSR['& > *'] = {\n      ...styles['& > *'],\n      ...orderStyleSSR,\n      margin: defaultSpacing / 2,\n      width: `calc(${(100 / ownerState.defaultColumns).toFixed(2)}% - ${defaultSpacing}px)`\n    };\n    return {\n      ...styles,\n      ...stylesSSR\n    };\n  }\n  const spacingValues = resolveBreakpointValues({\n    values: ownerState.spacing,\n    breakpoints: theme.breakpoints.values\n  });\n  const transformer = createUnarySpacing(theme);\n  const spacingStyleFromPropValue = propValue => {\n    let spacing;\n    // in case of string/number value\n    if (typeof propValue === 'string' && !Number.isNaN(Number(propValue)) || typeof propValue === 'number') {\n      const themeSpacingValue = Number(propValue);\n      spacing = getValue(transformer, themeSpacingValue);\n    } else {\n      spacing = propValue;\n    }\n    return {\n      margin: `calc(0px - (${spacing} / 2))`,\n      '& > *': {\n        margin: `calc(${spacing} / 2)`\n      },\n      ...(ownerState.maxColumnHeight && {\n        height: typeof spacing === 'number' ? Math.ceil(ownerState.maxColumnHeight + parseToNumber(spacing)) : `calc(${ownerState.maxColumnHeight}px + ${spacing})`\n      })\n    };\n  };\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, spacingValues, spacingStyleFromPropValue));\n  const columnValues = resolveBreakpointValues({\n    values: ownerState.columns,\n    breakpoints: theme.breakpoints.values\n  });\n  const columnStyleFromPropValue = propValue => {\n    const columnValue = Number(propValue);\n    const width = `${(100 / columnValue).toFixed(2)}%`;\n    const spacing = typeof spacingValues === 'string' && !Number.isNaN(Number(spacingValues)) || typeof spacingValues === 'number' ? getValue(transformer, Number(spacingValues)) : '0px';\n    return {\n      '& > *': {\n        width: `calc(${width} - ${spacing})`\n      }\n    };\n  };\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, columnValues, columnStyleFromPropValue));\n\n  // configure width for responsive spacing values\n  if (typeof spacingValues === 'object') {\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, (propValue, breakpoint) => {\n      if (breakpoint) {\n        const themeSpacingValue = Number(propValue);\n        const lastBreakpoint = Object.keys(columnValues).pop();\n        const spacing = getValue(transformer, themeSpacingValue);\n        const column = typeof columnValues === 'object' ? columnValues[breakpoint] || columnValues[lastBreakpoint] : columnValues;\n        const width = `${(100 / column).toFixed(2)}%`;\n        return {\n          '& > *': {\n            width: `calc(${width} - ${spacing})`\n          }\n        };\n      }\n      return null;\n    }));\n  }\n  return styles;\n};\nconst MasonryRoot = styled('div', {\n  name: 'MuiMasonry',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(getStyle);\nconst Masonry = /*#__PURE__*/React.forwardRef(function Masonry(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonry'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    columns = 4,\n    spacing = 1,\n    sequential = false,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    ...other\n  } = props;\n  const masonryRef = React.useRef();\n  const [maxColumnHeight, setMaxColumnHeight] = React.useState();\n  const isSSR = !maxColumnHeight && defaultHeight && defaultColumns !== undefined && defaultSpacing !== undefined;\n  const [numberOfLineBreaks, setNumberOfLineBreaks] = React.useState(isSSR ? defaultColumns - 1 : 0);\n  const ownerState = {\n    ...props,\n    spacing,\n    columns,\n    maxColumnHeight,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    isSSR\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleResize = React.useCallback(masonryChildren => {\n    if (!masonryRef.current || !masonryChildren || masonryChildren.length === 0) {\n      return;\n    }\n    const masonry = masonryRef.current;\n    const masonryFirstChild = masonryRef.current.firstChild;\n    const parentWidth = masonry.clientWidth;\n    const firstChildWidth = masonryFirstChild.clientWidth;\n    if (parentWidth === 0 || firstChildWidth === 0) {\n      return;\n    }\n    const firstChildComputedStyle = window.getComputedStyle(masonryFirstChild);\n    const firstChildMarginLeft = parseToNumber(firstChildComputedStyle.marginLeft);\n    const firstChildMarginRight = parseToNumber(firstChildComputedStyle.marginRight);\n    const currentNumberOfColumns = Math.round(parentWidth / (firstChildWidth + firstChildMarginLeft + firstChildMarginRight));\n    const columnHeights = new Array(currentNumberOfColumns).fill(0);\n    let skip = false;\n    let nextOrder = 1;\n    masonry.childNodes.forEach(child => {\n      if (child.nodeType !== Node.ELEMENT_NODE || child.dataset.class === 'line-break' || skip) {\n        return;\n      }\n      const childComputedStyle = window.getComputedStyle(child);\n      const childMarginTop = parseToNumber(childComputedStyle.marginTop);\n      const childMarginBottom = parseToNumber(childComputedStyle.marginBottom);\n      // if any one of children isn't rendered yet, masonry's height shouldn't be computed yet\n      const childHeight = parseToNumber(childComputedStyle.height) ? Math.ceil(parseToNumber(childComputedStyle.height)) + childMarginTop + childMarginBottom : 0;\n      if (childHeight === 0) {\n        skip = true;\n        return;\n      }\n      // if there is a nested image that isn't rendered yet, masonry's height shouldn't be computed yet\n      for (let i = 0; i < child.childNodes.length; i += 1) {\n        const nestedChild = child.childNodes[i];\n        if (nestedChild.tagName === 'IMG' && nestedChild.clientHeight === 0) {\n          skip = true;\n          break;\n        }\n      }\n      if (!skip) {\n        if (sequential) {\n          columnHeights[nextOrder - 1] += childHeight;\n          child.style.order = nextOrder;\n          nextOrder += 1;\n          if (nextOrder > currentNumberOfColumns) {\n            nextOrder = 1;\n          }\n        } else {\n          // find the current shortest column (where the current item will be placed)\n          const currentMinColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));\n          columnHeights[currentMinColumnIndex] += childHeight;\n          const order = currentMinColumnIndex + 1;\n          child.style.order = order;\n        }\n      }\n    });\n    if (!skip) {\n      // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n      // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n      // Related issue - https://github.com/facebook/react/issues/24331\n      ReactDOM.flushSync(() => {\n        setMaxColumnHeight(Math.max(...columnHeights));\n        setNumberOfLineBreaks(currentNumberOfColumns > 0 ? currentNumberOfColumns - 1 : 0);\n      });\n    }\n  }, [sequential]);\n  useEnhancedEffect(() => {\n    // IE and old browsers are not supported\n    if (typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    let animationFrame;\n    const resizeObserver = new ResizeObserver(() => {\n      // see https://github.com/mui/material-ui/issues/36909\n      animationFrame = requestAnimationFrame(handleResize);\n    });\n    if (masonryRef.current) {\n      masonryRef.current.childNodes.forEach(childNode => {\n        resizeObserver.observe(childNode);\n      });\n    }\n    return () => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame);\n      }\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [columns, spacing, children, handleResize]);\n  const handleRef = useForkRef(ref, masonryRef);\n\n  //  columns are likely to have different heights and hence can start to merge;\n  //  a line break at the end of each column prevents columns from merging\n  const lineBreaks = new Array(numberOfLineBreaks).fill('').map((_, index) => /*#__PURE__*/_jsx(\"span\", {\n    \"data-class\": \"line-break\",\n    style: {\n      ...lineBreakStyle,\n      order: index + 1\n    }\n  }, index));\n  return /*#__PURE__*/_jsxs(MasonryRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState,\n    ...other,\n    children: [children, lineBreaks]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Masonry.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes /* @typescript-to-proptypes-ignore */.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Number of columns.\n   * @default 4\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The default number of columns of the component. This is provided for server-side rendering.\n   */\n  defaultColumns: PropTypes.number,\n  /**\n   * The default height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n  /**\n   * The default spacing of the component. Like `spacing`, it is a factor of the theme's spacing. This is provided for server-side rendering.\n   */\n  defaultSpacing: PropTypes.number,\n  /**\n   * Allows using sequential order rather than adding to shortest column\n   * @default false\n   */\n  sequential: PropTypes.bool,\n  /**\n   * Defines the space between children. It is a factor of the theme's spacing.\n   * @default 1\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Masonry;"]},"metadata":{},"sourceType":"module"}