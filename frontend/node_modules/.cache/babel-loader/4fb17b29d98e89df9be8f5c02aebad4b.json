{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isHostComponent } from '../utils/isHostComponent';\nimport { getInputUtilityClass } from './inputClasses';\nimport { useInput } from '../useInput';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    multiline,\n    startAdornment,\n    endAdornment\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', error && 'error', focused && 'focused', Boolean(formControlContext) && 'formControl', multiline && 'multiline', Boolean(startAdornment) && 'adornedStart', Boolean(endAdornment) && 'adornedEnd'],\n    input: ['input', disabled && 'disabled', multiline && 'multiline']\n  };\n  return composeClasses(slots, useClassNamesOverride(getInputUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Input](https://mui.com/base-ui/react-input/)\n *\n * API:\n *\n * - [Input API](https://mui.com/base-ui/react-input/components-api/#input)\n */\n\n\nconst Input = /*#__PURE__*/React.forwardRef(function Input(props, forwardedRef) {\n  const {\n    'aria-describedby': ariaDescribedby,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    autoComplete,\n    autoFocus,\n    className,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    id,\n    multiline = false,\n    name,\n    onClick,\n    onChange,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onBlur,\n    placeholder,\n    readOnly,\n    required,\n    startAdornment,\n    value,\n    type: typeProp,\n    rows,\n    slotProps = {},\n    slots = {},\n    minRows,\n    maxRows,\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    focused,\n    formControlContext,\n    error: errorState,\n    disabled: disabledState\n  } = useInput({\n    disabled,\n    defaultValue,\n    error,\n    onBlur,\n    onClick,\n    onChange,\n    onFocus,\n    required,\n    value\n  });\n  const type = !multiline ? typeProp ?? 'text' : undefined;\n  const ownerState = { ...props,\n    disabled: disabledState,\n    error: errorState,\n    focused,\n    formControlContext,\n    multiline,\n    type\n  };\n  const classes = useUtilityClasses(ownerState);\n  const propsToForward = {\n    'aria-describedby': ariaDescribedby,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    autoComplete,\n    autoFocus,\n    id,\n    onKeyDown,\n    onKeyUp,\n    name,\n    placeholder,\n    readOnly,\n    type\n  };\n  const Root = slots.root ?? 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: [classes.root, className]\n  });\n  const InputComponent = multiline ? slots.textarea ?? 'textarea' : slots.input ?? 'input';\n  const inputProps = useSlotProps({\n    elementType: InputComponent,\n    getSlotProps: otherHandlers => {\n      return getInputProps({ ...propsToForward,\n        ...otherHandlers\n      });\n    },\n    externalSlotProps: slotProps.input,\n    additionalProps: {\n      rows: multiline ? rows : undefined,\n      ...(multiline && !isHostComponent(InputComponent) && {\n        minRows: rows || minRows,\n        maxRows: rows || maxRows\n      })\n    },\n    ownerState,\n    className: classes.input\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (multiline) {\n      if (rows) {\n        if (minRows || maxRows) {\n          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(Root, { ...rootProps,\n    children: [startAdornment, /*#__PURE__*/_jsx(InputComponent, { ...inputProps\n    }), endAdornment]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Input.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * @ignore\n   */\n  'aria-describedby': PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `baseui--error` class on the root element.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.number,\n\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.number,\n\n  /**\n   * If `true`, a `textarea` element is rendered.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.number,\n\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    textarea: PropTypes.elementType\n  }),\n\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   * @default 'text'\n   */\n  type: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOf(['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week']),\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { Input };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Input/Input.js"],"names":["React","PropTypes","isHostComponent","getInputUtilityClass","useInput","useSlotProps","unstable_composeClasses","composeClasses","useClassNamesOverride","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","disabled","error","focused","formControlContext","multiline","startAdornment","endAdornment","slots","root","Boolean","input","Input","forwardRef","props","forwardedRef","ariaDescribedby","ariaLabel","ariaLabelledby","autoComplete","autoFocus","className","defaultValue","id","name","onClick","onChange","onKeyDown","onKeyUp","onFocus","onBlur","placeholder","readOnly","required","value","type","typeProp","rows","slotProps","minRows","maxRows","other","getRootProps","getInputProps","errorState","disabledState","undefined","classes","propsToForward","Root","rootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","additionalProps","ref","InputComponent","textarea","inputProps","otherHandlers","process","env","NODE_ENV","console","warn","children","propTypes","string","bool","any","node","inputRef","oneOfType","func","shape","current","object","number","oneOf"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isHostComponent } from '../utils/isHostComponent';\nimport { getInputUtilityClass } from './inputClasses';\nimport { useInput } from '../useInput';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    multiline,\n    startAdornment,\n    endAdornment\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', error && 'error', focused && 'focused', Boolean(formControlContext) && 'formControl', multiline && 'multiline', Boolean(startAdornment) && 'adornedStart', Boolean(endAdornment) && 'adornedEnd'],\n    input: ['input', disabled && 'disabled', multiline && 'multiline']\n  };\n  return composeClasses(slots, useClassNamesOverride(getInputUtilityClass));\n};\n\n/**\n *\n * Demos:\n *\n * - [Input](https://mui.com/base-ui/react-input/)\n *\n * API:\n *\n * - [Input API](https://mui.com/base-ui/react-input/components-api/#input)\n */\nconst Input = /*#__PURE__*/React.forwardRef(function Input(props, forwardedRef) {\n  const {\n    'aria-describedby': ariaDescribedby,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    autoComplete,\n    autoFocus,\n    className,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    id,\n    multiline = false,\n    name,\n    onClick,\n    onChange,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onBlur,\n    placeholder,\n    readOnly,\n    required,\n    startAdornment,\n    value,\n    type: typeProp,\n    rows,\n    slotProps = {},\n    slots = {},\n    minRows,\n    maxRows,\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    focused,\n    formControlContext,\n    error: errorState,\n    disabled: disabledState\n  } = useInput({\n    disabled,\n    defaultValue,\n    error,\n    onBlur,\n    onClick,\n    onChange,\n    onFocus,\n    required,\n    value\n  });\n  const type = !multiline ? typeProp ?? 'text' : undefined;\n  const ownerState = {\n    ...props,\n    disabled: disabledState,\n    error: errorState,\n    focused,\n    formControlContext,\n    multiline,\n    type\n  };\n  const classes = useUtilityClasses(ownerState);\n  const propsToForward = {\n    'aria-describedby': ariaDescribedby,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    autoComplete,\n    autoFocus,\n    id,\n    onKeyDown,\n    onKeyUp,\n    name,\n    placeholder,\n    readOnly,\n    type\n  };\n  const Root = slots.root ?? 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: [classes.root, className]\n  });\n  const InputComponent = multiline ? slots.textarea ?? 'textarea' : slots.input ?? 'input';\n  const inputProps = useSlotProps({\n    elementType: InputComponent,\n    getSlotProps: otherHandlers => {\n      return getInputProps({\n        ...propsToForward,\n        ...otherHandlers\n      });\n    },\n    externalSlotProps: slotProps.input,\n    additionalProps: {\n      rows: multiline ? rows : undefined,\n      ...(multiline && !isHostComponent(InputComponent) && {\n        minRows: rows || minRows,\n        maxRows: rows || maxRows\n      })\n    },\n    ownerState,\n    className: classes.input\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (multiline) {\n      if (rows) {\n        if (minRows || maxRows) {\n          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');\n        }\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [startAdornment, /*#__PURE__*/_jsx(InputComponent, {\n      ...inputProps\n    }), endAdornment]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Input.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  'aria-describedby': PropTypes.string,\n  /**\n   * @ignore\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * @ignore\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: PropTypes.node,\n  /**\n   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `baseui--error` class on the root element.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  error: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * @ignore\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.number,\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.number,\n  /**\n   * If `true`, a `textarea` element is rendered.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.number,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    textarea: PropTypes.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: PropTypes.node,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   * @default 'text'\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.oneOf(['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week']),\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { Input };"]},"metadata":{},"sourceType":"module"}