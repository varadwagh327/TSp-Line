{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport getReactNodeRef from '@mui/utils/getReactNodeRef';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * Demos:\n *\n * - [Portal](https://mui.com/base-ui/react-portal/)\n *\n * API:\n *\n * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)\n */\n\n\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, forwardedRef) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef(getReactNodeRef(children), forwardedRef);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(forwardedRef, mountNode);\n      return () => {\n        setRef(forwardedRef, null);\n      };\n    }\n\n    return undefined;\n  }, [forwardedRef, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return /*#__PURE__*/React.cloneElement(children, newProps);\n    }\n\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: children\n    });\n  }\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport { Portal };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Portal/Portal.js"],"names":["React","ReactDOM","PropTypes","getReactNodeRef","exactProp","HTMLElementType","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useForkRef","useForkRef","unstable_setRef","setRef","jsx","_jsx","getContainer","container","Portal","forwardRef","props","forwardedRef","children","disablePortal","mountNode","setMountNode","useState","handleRef","document","body","undefined","isValidElement","newProps","ref","cloneElement","Fragment","createPortal","process","env","NODE_ENV","propTypes","node","oneOfType","func","bool"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport getReactNodeRef from '@mui/utils/getReactNodeRef';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * Demos:\n *\n * - [Portal](https://mui.com/base-ui/react-portal/)\n *\n * API:\n *\n * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)\n */\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, forwardedRef) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef(getReactNodeRef(children), forwardedRef);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(forwardedRef, mountNode);\n      return () => {\n        setRef(forwardedRef, null);\n      };\n    }\n    return undefined;\n  }, [forwardedRef, mountNode, disablePortal]);\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return /*#__PURE__*/React.cloneElement(children, newProps);\n    }\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: children\n    });\n  }\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\nexport { Portal };"]},"metadata":{},"sourceType":"module"}