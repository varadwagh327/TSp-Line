{"ast":null,"code":"import deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from \"./cssVarsParser.js\";\n\nfunction prepareCssVars(theme) {\n  let parserConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    getSelector = defaultGetSelector,\n    disableCssColorScheme,\n    colorSchemeSelector: selector\n  } = parserConfig; // @ts-ignore - ignore components do not exist\n\n  const {\n    colorSchemes = {},\n    components,\n    defaultColorScheme = 'light',\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    [defaultColorScheme]: defaultScheme,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(defaultScheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n\n  function defaultGetSelector(colorScheme, cssObject) {\n    let rule = selector;\n\n    if (selector === 'class') {\n      rule = '.%s';\n    }\n\n    if (selector === 'data') {\n      rule = '[data-%s]';\n    }\n\n    if (selector?.startsWith('data-') && !selector.includes('%s')) {\n      // 'data-joy-color-scheme' -> '[data-joy-color-scheme=\"%s\"]'\n      rule = `[${selector}=\"%s\"]`;\n    }\n\n    if (colorScheme) {\n      if (rule === 'media') {\n        if (theme.defaultColorScheme === colorScheme) {\n          return ':root';\n        }\n\n        const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;\n        return {\n          [`@media (prefers-color-scheme: ${mode})`]: {\n            ':root': cssObject\n          }\n        };\n      }\n\n      if (rule) {\n        if (theme.defaultColorScheme === colorScheme) {\n          return `:root, ${rule.replace('%s', String(colorScheme))}`;\n        }\n\n        return rule.replace('%s', String(colorScheme));\n      }\n    }\n\n    return ':root';\n  }\n\n  const generateThemeVars = () => {\n    let vars = { ...rootVars\n    };\n    Object.entries(colorSchemesMap).forEach(_ref2 => {\n      let [, {\n        vars: schemeVars\n      }] = _ref2;\n      vars = deepmerge(vars, schemeVars);\n    });\n    return vars;\n  };\n\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n\n    function insertStyleSheet(key, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof key === 'string' ? {\n          [key]: { ...css\n          }\n        } : key);\n      }\n    }\n\n    insertStyleSheet(getSelector(undefined, { ...rootCss\n    }), rootCss);\n    const {\n      [colorScheme]: defaultSchemeVal,\n      ...other\n    } = colorSchemesMap;\n\n    if (defaultSchemeVal) {\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : { ...css\n      };\n      insertStyleSheet(getSelector(colorScheme, { ...finalCss\n      }), finalCss);\n    }\n\n    Object.entries(other).forEach(_ref3 => {\n      let [key, {\n        css\n      }] = _ref3;\n      const cssColorSheme = colorSchemes[key]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : { ...css\n      };\n      insertStyleSheet(getSelector(key, { ...finalCss\n      }), finalCss);\n    });\n    return stylesheets;\n  };\n\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/system/cssVars/prepareCssVars.js"],"names":["deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","getSelector","defaultGetSelector","disableCssColorScheme","colorSchemeSelector","selector","colorSchemes","components","defaultColorScheme","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","defaultScheme","otherColorSchemes","Object","entries","forEach","key","scheme","colorScheme","cssObject","rule","startsWith","includes","mode","palette","replace","String","generateThemeVars","schemeVars","generateStyleSheets","stylesheets","insertStyleSheet","keys","length","push","undefined","defaultSchemeVal","other","cssColorSheme","finalCss"],"mappings":"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","sourcesContent":["import deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from \"./cssVarsParser.js\";\nfunction prepareCssVars(theme, parserConfig = {}) {\n  const {\n    getSelector = defaultGetSelector,\n    disableCssColorScheme,\n    colorSchemeSelector: selector\n  } = parserConfig;\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    defaultColorScheme = 'light',\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    [defaultColorScheme]: defaultScheme,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(defaultScheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  function defaultGetSelector(colorScheme, cssObject) {\n    let rule = selector;\n    if (selector === 'class') {\n      rule = '.%s';\n    }\n    if (selector === 'data') {\n      rule = '[data-%s]';\n    }\n    if (selector?.startsWith('data-') && !selector.includes('%s')) {\n      // 'data-joy-color-scheme' -> '[data-joy-color-scheme=\"%s\"]'\n      rule = `[${selector}=\"%s\"]`;\n    }\n    if (colorScheme) {\n      if (rule === 'media') {\n        if (theme.defaultColorScheme === colorScheme) {\n          return ':root';\n        }\n        const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;\n        return {\n          [`@media (prefers-color-scheme: ${mode})`]: {\n            ':root': cssObject\n          }\n        };\n      }\n      if (rule) {\n        if (theme.defaultColorScheme === colorScheme) {\n          return `:root, ${rule.replace('%s', String(colorScheme))}`;\n        }\n        return rule.replace('%s', String(colorScheme));\n      }\n    }\n    return ':root';\n  }\n  const generateThemeVars = () => {\n    let vars = {\n      ...rootVars\n    };\n    Object.entries(colorSchemesMap).forEach(([, {\n      vars: schemeVars\n    }]) => {\n      vars = deepmerge(vars, schemeVars);\n    });\n    return vars;\n  };\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n    function insertStyleSheet(key, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof key === 'string' ? {\n          [key]: {\n            ...css\n          }\n        } : key);\n      }\n    }\n    insertStyleSheet(getSelector(undefined, {\n      ...rootCss\n    }), rootCss);\n    const {\n      [colorScheme]: defaultSchemeVal,\n      ...other\n    } = colorSchemesMap;\n    if (defaultSchemeVal) {\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : {\n        ...css\n      };\n      insertStyleSheet(getSelector(colorScheme, {\n        ...finalCss\n      }), finalCss);\n    }\n    Object.entries(other).forEach(([key, {\n      css\n    }]) => {\n      const cssColorSheme = colorSchemes[key]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : {\n        ...css\n      };\n      insertStyleSheet(getSelector(key, {\n        ...finalCss\n      }), finalCss);\n    });\n    return stylesheets;\n  };\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\nexport default prepareCssVars;"]},"metadata":{},"sourceType":"module"}