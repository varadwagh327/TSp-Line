{"ast":null,"code":"/**\n * @license lucide-react v0.454.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nconst mergeClasses = function () {\n  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n    classes[_key] = arguments[_key];\n  }\n\n  return classes.filter((className, index, array) => {\n    return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n  }).join(\" \").trim();\n};\n\nexport { mergeClasses, toKebabCase };","map":{"version":3,"sources":["F:\\Web Projects\\Web\\Business Website\\frontend\\node_modules\\shared\\src\\utils.ts"],"names":[],"mappings":";;;;;;AAQa,MAAA,WAAA,GAAe,MAAD,IACzB,MAAA,CAAO,OAAP,CAAe,oBAAf,EAAqC,OAArC,EAA8C,WAA9C,EADW;;AAgCA,MAAA,YAAA,GAAe;AAAA,oCAA2C,OAA3C;AAA2C,IAAA,OAA3C;AAAA;;AAAA,SAC1B,OAAA,CACG,MADH,CACU,CAAC,SAAD,EAAY,KAAZ,EAAmB,KAAnB,KAA6B;AAEjC,WAAA,OAAA,CAAQ,SAAR,CAAA,IACC,SAAqB,CAAA,IAArB,OAAgC,EADjC,IAEA,KAAA,CAAM,OAAN,CAAc,SAAd,MAA6B,KAF7B;AAIH,GAPH,EAQG,IARH,CAQQ,GARR,EASG,IATH,EAD0B;AAAA,CAAf","sourcesContent":["import { CamelToPascal } from './utility-types';\n\n/**\n * Converts string to kebab case\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) =>\n  string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Converts string to camel case\n *\n * @param {string} string\n * @returns {string} A camelized string\n */\nexport const toCamelCase = <T extends string>(string: T) =>\n  string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2) =>\n    p2 ? p2.toUpperCase() : p1.toLowerCase(),\n  );\n\n/**\n * Converts string to pascal case\n *\n * @param {string} string\n * @returns {string} A pascalized string\n */\nexport const toPascalCase = <T extends string>(string: T): CamelToPascal<T> => {\n  const camelCase = toCamelCase(string);\n\n  return (camelCase.charAt(0).toUpperCase() + camelCase.slice(1)) as CamelToPascal<T>;\n};\n\n/**\n * Merges classes into a single string\n *\n * @param {array} classes\n * @returns {string} A string of classes\n */\nexport const mergeClasses = <ClassType = string | undefined | null>(...classes: ClassType[]) =>\n  classes\n    .filter((className, index, array) => {\n      return (\n        Boolean(className) &&\n        (className as string).trim() !== '' &&\n        array.indexOf(className) === index\n      );\n    })\n    .join(' ')\n    .trim();\n"]},"metadata":{},"sourceType":"module"}