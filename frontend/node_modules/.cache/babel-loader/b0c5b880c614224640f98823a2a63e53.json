{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getNumberInputUtilityClass } from './numberInputClasses';\nimport { unstable_useNumberInput as useNumberInput } from '../unstable_useNumberInput';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    error,\n    focused,\n    readOnly,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled,\n    startAdornment,\n    endAdornment\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', error && 'error', focused && 'focused', readOnly && 'readOnly', Boolean(formControlContext) && 'formControl', Boolean(startAdornment) && 'adornedStart', Boolean(endAdornment) && 'adornedEnd'],\n    input: ['input', disabled && 'disabled', readOnly && 'readOnly'],\n    incrementButton: ['incrementButton', isIncrementDisabled && 'disabled'],\n    decrementButton: ['decrementButton', isDecrementDisabled && 'disabled']\n  };\n  return composeClasses(slots, useClassNamesOverride(getNumberInputUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Number Input](https://mui.com/base-ui/react-number-input/)\n *\n * API:\n *\n * - [NumberInput API](https://mui.com/base-ui/react-number-input/components-api/#number-input)\n */\n\n\nconst NumberInput = /*#__PURE__*/React.forwardRef(function NumberInput(props, forwardedRef) {\n  const {\n    className,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    id,\n    max,\n    min,\n    onBlur,\n    onInputChange,\n    onFocus,\n    onChange,\n    placeholder,\n    required,\n    readOnly = false,\n    shiftMultiplier,\n    startAdornment,\n    step,\n    value,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    focused,\n    error: errorState,\n    disabled: disabledState,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled\n  } = useNumberInput({\n    min,\n    max,\n    step,\n    shiftMultiplier,\n    defaultValue,\n    disabled,\n    error,\n    onFocus,\n    onInputChange,\n    onBlur,\n    onChange,\n    required,\n    readOnly,\n    value,\n    inputId: id,\n    componentName: 'NumberInput'\n  });\n  const ownerState = { ...props,\n    disabled: disabledState,\n    error: errorState,\n    focused,\n    readOnly,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled\n  };\n  const classes = useUtilityClasses(ownerState);\n  const propsForwardedToInputSlot = {\n    placeholder\n  };\n  const Root = slots.root ?? 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: [classes.root, className]\n  });\n  const Input = slots.input ?? 'input';\n  const inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: otherHandlers => getInputProps({ ...propsForwardedToInputSlot,\n      ...otherHandlers\n    }),\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const IncrementButton = slots.incrementButton ?? 'button';\n  const incrementButtonProps = useSlotProps({\n    elementType: IncrementButton,\n    getSlotProps: getIncrementButtonProps,\n    externalSlotProps: slotProps.incrementButton,\n    ownerState,\n    className: classes.incrementButton\n  });\n  const DecrementButton = slots.decrementButton ?? 'button';\n  const decrementButtonProps = useSlotProps({\n    elementType: DecrementButton,\n    getSlotProps: getDecrementButtonProps,\n    externalSlotProps: slotProps.decrementButton,\n    ownerState,\n    className: classes.decrementButton\n  });\n  return /*#__PURE__*/_jsxs(Root, { ...rootProps,\n    children: [/*#__PURE__*/_jsx(DecrementButton, { ...decrementButtonProps\n    }), /*#__PURE__*/_jsx(IncrementButton, { ...incrementButtonProps\n    }), startAdornment, /*#__PURE__*/_jsx(Input, { ...inputProps\n    }), endAdornment]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NumberInput.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.number,\n\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `baseui--error` class on the root element.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The maximum value.\n   */\n  max: PropTypes.number,\n\n  /**\n   * The minimum value.\n   */\n  min: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired after the value is clamped and changes - when the `input` is blurred or when\n   * the stepper buttons are triggered.\n   * Called with `undefined` when the value is unset.\n   *\n   * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback\n   * @param {number|undefined} value The new value of the component\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the `input` value changes after each keypress, before clamping is applied.\n   * Note that `event.target.value` may contain values that fall outside of `min` and `max` or\n   * are otherwise \"invalid\".\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element becomes read-only. The stepper buttons remain active,\n   * with the addition that they are now keyboard focusable.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Multiplier applied to `step` if the shift key is held while incrementing\n   * or decrementing the value. Defaults to `10`.\n   */\n  shiftMultiplier: PropTypes.number,\n\n  /**\n   * The props used for each slot inside the NumberInput.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    decrementButton: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    incrementButton: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    decrementButton: PropTypes.elementType,\n    incrementButton: PropTypes.elementType,\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * The amount that the value changes on each increment or decrement.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The current value. Use when the component is controlled.\n   * @default null\n   */\n  value: PropTypes.number\n} : void 0;\nexport { NumberInput };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Unstable_NumberInput/NumberInput.js"],"names":["React","PropTypes","getNumberInputUtilityClass","unstable_useNumberInput","useNumberInput","unstable_composeClasses","composeClasses","useSlotProps","useClassNamesOverride","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","disabled","error","focused","readOnly","formControlContext","isIncrementDisabled","isDecrementDisabled","startAdornment","endAdornment","slots","root","Boolean","input","incrementButton","decrementButton","NumberInput","forwardRef","props","forwardedRef","className","defaultValue","id","max","min","onBlur","onInputChange","onFocus","onChange","placeholder","required","shiftMultiplier","step","value","slotProps","other","getRootProps","getInputProps","getIncrementButtonProps","getDecrementButtonProps","errorState","disabledState","inputId","componentName","classes","propsForwardedToInputSlot","Root","rootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","additionalProps","ref","Input","inputProps","otherHandlers","IncrementButton","incrementButtonProps","DecrementButton","decrementButtonProps","children","process","env","NODE_ENV","propTypes","node","string","number","bool","func","shape","oneOfType","object"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getNumberInputUtilityClass } from './numberInputClasses';\nimport { unstable_useNumberInput as useNumberInput } from '../unstable_useNumberInput';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    error,\n    focused,\n    readOnly,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled,\n    startAdornment,\n    endAdornment\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', error && 'error', focused && 'focused', readOnly && 'readOnly', Boolean(formControlContext) && 'formControl', Boolean(startAdornment) && 'adornedStart', Boolean(endAdornment) && 'adornedEnd'],\n    input: ['input', disabled && 'disabled', readOnly && 'readOnly'],\n    incrementButton: ['incrementButton', isIncrementDisabled && 'disabled'],\n    decrementButton: ['decrementButton', isDecrementDisabled && 'disabled']\n  };\n  return composeClasses(slots, useClassNamesOverride(getNumberInputUtilityClass));\n};\n\n/**\n *\n * Demos:\n *\n * - [Number Input](https://mui.com/base-ui/react-number-input/)\n *\n * API:\n *\n * - [NumberInput API](https://mui.com/base-ui/react-number-input/components-api/#number-input)\n */\nconst NumberInput = /*#__PURE__*/React.forwardRef(function NumberInput(props, forwardedRef) {\n  const {\n    className,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    id,\n    max,\n    min,\n    onBlur,\n    onInputChange,\n    onFocus,\n    onChange,\n    placeholder,\n    required,\n    readOnly = false,\n    shiftMultiplier,\n    startAdornment,\n    step,\n    value,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    focused,\n    error: errorState,\n    disabled: disabledState,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled\n  } = useNumberInput({\n    min,\n    max,\n    step,\n    shiftMultiplier,\n    defaultValue,\n    disabled,\n    error,\n    onFocus,\n    onInputChange,\n    onBlur,\n    onChange,\n    required,\n    readOnly,\n    value,\n    inputId: id,\n    componentName: 'NumberInput'\n  });\n  const ownerState = {\n    ...props,\n    disabled: disabledState,\n    error: errorState,\n    focused,\n    readOnly,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled\n  };\n  const classes = useUtilityClasses(ownerState);\n  const propsForwardedToInputSlot = {\n    placeholder\n  };\n  const Root = slots.root ?? 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: [classes.root, className]\n  });\n  const Input = slots.input ?? 'input';\n  const inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: otherHandlers => getInputProps({\n      ...propsForwardedToInputSlot,\n      ...otherHandlers\n    }),\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const IncrementButton = slots.incrementButton ?? 'button';\n  const incrementButtonProps = useSlotProps({\n    elementType: IncrementButton,\n    getSlotProps: getIncrementButtonProps,\n    externalSlotProps: slotProps.incrementButton,\n    ownerState,\n    className: classes.incrementButton\n  });\n  const DecrementButton = slots.decrementButton ?? 'button';\n  const decrementButtonProps = useSlotProps({\n    elementType: DecrementButton,\n    getSlotProps: getDecrementButtonProps,\n    externalSlotProps: slotProps.decrementButton,\n    ownerState,\n    className: classes.decrementButton\n  });\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [/*#__PURE__*/_jsx(DecrementButton, {\n      ...decrementButtonProps\n    }), /*#__PURE__*/_jsx(IncrementButton, {\n      ...incrementButtonProps\n    }), startAdornment, /*#__PURE__*/_jsx(Input, {\n      ...inputProps\n    }), endAdornment]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NumberInput.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.number,\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: PropTypes.node,\n  /**\n   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `baseui--error` class on the root element.\n   */\n  error: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * The maximum value.\n   */\n  max: PropTypes.number,\n  /**\n   * The minimum value.\n   */\n  min: PropTypes.number,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired after the value is clamped and changes - when the `input` is blurred or when\n   * the stepper buttons are triggered.\n   * Called with `undefined` when the value is unset.\n   *\n   * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback\n   * @param {number|undefined} value The new value of the component\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Callback fired when the `input` value changes after each keypress, before clamping is applied.\n   * Note that `event.target.value` may contain values that fall outside of `min` and `max` or\n   * are otherwise \"invalid\".\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the `input` element becomes read-only. The stepper buttons remain active,\n   * with the addition that they are now keyboard focusable.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n  /**\n   * Multiplier applied to `step` if the shift key is held while incrementing\n   * or decrementing the value. Defaults to `10`.\n   */\n  shiftMultiplier: PropTypes.number,\n  /**\n   * The props used for each slot inside the NumberInput.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    decrementButton: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    incrementButton: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    decrementButton: PropTypes.elementType,\n    incrementButton: PropTypes.elementType,\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: PropTypes.node,\n  /**\n   * The amount that the value changes on each increment or decrement.\n   */\n  step: PropTypes.number,\n  /**\n   * The current value. Use when the component is controlled.\n   * @default null\n   */\n  value: PropTypes.number\n} : void 0;\nexport { NumberInput };"]},"metadata":{},"sourceType":"module"}