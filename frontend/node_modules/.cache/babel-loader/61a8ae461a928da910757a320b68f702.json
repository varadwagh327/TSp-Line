{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { useListItem } from '../useList';\nimport { DropdownActionTypes } from '../useDropdown';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { useCompoundItem } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\n\nfunction idGenerator(existingKeys) {\n  return `menu-item-${existingKeys.size}`;\n}\n\nconst FALLBACK_MENU_CONTEXT = {\n  dispatch: () => {},\n  popupId: '',\n  registerPopup: () => {},\n  registerTrigger: () => {},\n  state: {\n    open: true,\n    changeReason: null\n  },\n  triggerElement: null\n};\n/**\n *\n * Demos:\n *\n * - [Menu](https://next.mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://next.mui.com/base-ui/react-menu/hooks-api/#use-menu-item)\n */\n\nexport function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label,\n    disableFocusOnHover = false\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id ?? '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    dispatch\n  } = React.useContext(DropdownContext) ?? FALLBACK_MENU_CONTEXT;\n  const {\n    getRootProps: getListRootProps,\n    highlighted\n  } = useListItem({\n    item: id,\n    handlePointerOverEvents: !disableFocusOnHover\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id ?? idGenerator, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n\n  const createHandleClick = otherHandlers => event => {\n    otherHandlers.onClick?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    dispatch({\n      type: DropdownActionTypes.close,\n      event\n    });\n  };\n\n  const getOwnHandlers = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return { ...otherHandlers,\n      onClick: createHandleClick(otherHandlers)\n    };\n  };\n\n  function getRootProps() {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnHandlers, combineHooksSlotProps(getButtonProps, getListRootProps));\n    return { ...externalProps,\n      ...externalEventHandlers,\n      ...getCombinedRootProps(externalEventHandlers),\n      id,\n      ref: handleRef,\n      role: 'menuitem'\n    };\n  } // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n\n\n  if (id === undefined) {\n    return {\n      getRootProps,\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useMenuItem/useMenuItem.js"],"names":["React","unstable_useId","useId","unstable_useForkRef","useForkRef","useButton","useListItem","DropdownActionTypes","DropdownContext","combineHooksSlotProps","useCompoundItem","extractEventHandlers","idGenerator","existingKeys","size","FALLBACK_MENU_CONTEXT","dispatch","popupId","registerPopup","registerTrigger","state","open","changeReason","triggerElement","useMenuItem","params","disabled","id","idParam","rootRef","externalRef","label","disableFocusOnHover","itemRef","useRef","itemMetadata","useMemo","ref","useContext","getRootProps","getListRootProps","highlighted","item","handlePointerOverEvents","index","totalItemCount","getButtonProps","focusVisible","buttonRefHandler","focusableWhenDisabled","handleRef","useDebugValue","createHandleClick","otherHandlers","event","onClick","defaultMuiPrevented","type","close","getOwnHandlers","externalProps","externalEventHandlers","getCombinedRootProps","role","undefined"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { useListItem } from '../useList';\nimport { DropdownActionTypes } from '../useDropdown';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { useCompoundItem } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nfunction idGenerator(existingKeys) {\n  return `menu-item-${existingKeys.size}`;\n}\nconst FALLBACK_MENU_CONTEXT = {\n  dispatch: () => {},\n  popupId: '',\n  registerPopup: () => {},\n  registerTrigger: () => {},\n  state: {\n    open: true,\n    changeReason: null\n  },\n  triggerElement: null\n};\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://next.mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://next.mui.com/base-ui/react-menu/hooks-api/#use-menu-item)\n */\nexport function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label,\n    disableFocusOnHover = false\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id ?? '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    dispatch\n  } = React.useContext(DropdownContext) ?? FALLBACK_MENU_CONTEXT;\n  const {\n    getRootProps: getListRootProps,\n    highlighted\n  } = useListItem({\n    item: id,\n    handlePointerOverEvents: !disableFocusOnHover\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id ?? idGenerator, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n  const createHandleClick = otherHandlers => event => {\n    otherHandlers.onClick?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    dispatch({\n      type: DropdownActionTypes.close,\n      event\n    });\n  };\n  const getOwnHandlers = (otherHandlers = {}) => ({\n    ...otherHandlers,\n    onClick: createHandleClick(otherHandlers)\n  });\n  function getRootProps(externalProps = {}) {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnHandlers, combineHooksSlotProps(getButtonProps, getListRootProps));\n    return {\n      ...externalProps,\n      ...externalEventHandlers,\n      ...getCombinedRootProps(externalEventHandlers),\n      id,\n      ref: handleRef,\n      role: 'menuitem'\n    };\n  }\n\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n  if (id === undefined) {\n    return {\n      getRootProps,\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}"]},"metadata":{},"sourceType":"module"}