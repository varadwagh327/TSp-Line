{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getTabsUtilityClass } from './tabsClasses';\nimport { useTabs } from '../useTabs';\nimport { TabsProvider } from '../useTabs/TabsProvider';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    orientation\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabsUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [Tabs API](https://mui.com/base-ui/react-tabs/components-api/#tabs)\n */\n\n\nconst Tabs = /*#__PURE__*/React.forwardRef(function Tabs(props, forwardedRef) {\n  const {\n    children,\n    value: valueProp,\n    defaultValue,\n    orientation = 'horizontal',\n    direction = 'ltr',\n    onChange,\n    selectionFollowsFocus,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const ownerState = { ...props,\n    orientation,\n    direction\n  };\n  const {\n    contextValue\n  } = useTabs(ownerState);\n  const classes = useUtilityClasses(ownerState);\n  const TabsRoot = slots.root ?? 'div';\n  const tabsRootProps = useSlotProps({\n    elementType: TabsRoot,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabsRoot, { ...tabsRootProps,\n    children: /*#__PURE__*/_jsx(TabsProvider, {\n      value: contextValue,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Tabs.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The direction of the text.\n   * @default 'ltr'\n   */\n  direction: PropTypes.oneOf(['ltr', 'rtl']),\n\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * If `true` the selected tab changes on focus. Otherwise it only\n   * changes on activation.\n   */\n  selectionFollowsFocus: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside the Tabs.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Tabs.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The value of the currently selected `Tab`.\n   * If you don't want any selected `Tab`, you can set this prop to `null`.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport { Tabs };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/Tabs/Tabs.js"],"names":["React","PropTypes","useSlotProps","unstable_composeClasses","composeClasses","getTabsUtilityClass","useTabs","TabsProvider","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","orientation","slots","root","Tabs","forwardRef","props","forwardedRef","children","value","valueProp","defaultValue","direction","onChange","selectionFollowsFocus","slotProps","other","contextValue","classes","TabsRoot","tabsRootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","className","process","env","NODE_ENV","propTypes","node","string","oneOfType","number","oneOf","func","bool","shape","object"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getTabsUtilityClass } from './tabsClasses';\nimport { useTabs } from '../useTabs';\nimport { TabsProvider } from '../useTabs/TabsProvider';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    orientation\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabsUtilityClass));\n};\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [Tabs API](https://mui.com/base-ui/react-tabs/components-api/#tabs)\n */\nconst Tabs = /*#__PURE__*/React.forwardRef(function Tabs(props, forwardedRef) {\n  const {\n    children,\n    value: valueProp,\n    defaultValue,\n    orientation = 'horizontal',\n    direction = 'ltr',\n    onChange,\n    selectionFollowsFocus,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    orientation,\n    direction\n  };\n  const {\n    contextValue\n  } = useTabs(ownerState);\n  const classes = useUtilityClasses(ownerState);\n  const TabsRoot = slots.root ?? 'div';\n  const tabsRootProps = useSlotProps({\n    elementType: TabsRoot,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabsRoot, {\n    ...tabsRootProps,\n    children: /*#__PURE__*/_jsx(TabsProvider, {\n      value: contextValue,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Tabs.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The direction of the text.\n   * @default 'ltr'\n   */\n  direction: PropTypes.oneOf(['ltr', 'rtl']),\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * If `true` the selected tab changes on focus. Otherwise it only\n   * changes on activation.\n   */\n  selectionFollowsFocus: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Tabs.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Tabs.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The value of the currently selected `Tab`.\n   * If you don't want any selected `Tab`, you can set this prop to `null`.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport { Tabs };"]},"metadata":{},"sourceType":"module"}