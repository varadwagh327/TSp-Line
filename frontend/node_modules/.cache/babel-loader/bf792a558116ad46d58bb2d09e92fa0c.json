{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport { listReducer as defaultReducer } from './listReducer';\nimport { useControllableReducer } from '../utils/useControllableReducer';\nimport { areArraysEqual } from '../utils/areArraysEqual';\nimport { useTextNavigation } from '../utils/useTextNavigation';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nconst EMPTY_OBJECT = {};\n\nconst NOOP = () => {};\n\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\n\nconst defaultIsItemDisabled = () => false;\n\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\n\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\n\n\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    onItemsChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer,\n    componentName = 'useList'\n  } = params;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange?.(event, value, reason);\n\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      getItemDomElement?.(value)?.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]); // This gets called whenever a reducer changes the state.\n\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange?.(event, field, value, reason, state);\n\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n\n      case 'selectedValues':\n        onChange?.(event, value, reason);\n        break;\n\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]); // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer ?? defaultReducer;\n  const actionContext = React.useMemo(() => ({ ...reducerActionContext,\n    ...listActionContext\n  }), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange,\n    componentName\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n    onItemsChange?.(items);\n  }, [items, itemComparer, dispatch, onItemsChange]);\n\n  const createHandleKeyDown = externalHandlers => event => {\n    externalHandlers.onKeyDown?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n\n  const createHandleBlur = externalHandlers => event => {\n    externalHandlers.onBlur?.(event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (listRef.current?.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return { ...externalProps,\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef,\n      ...externalEventHandlers,\n      onBlur: createHandleBlur(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers)\n    };\n  };\n\n  const getItemState = React.useCallback(item => {\n    const selected = (selectedValues ?? []).some(value => value != null && itemComparer(item, value));\n    const highlighted = highlightedValue != null && itemComparer(item, highlightedValue);\n    const focusable = focusManagement === 'DOM';\n    return {\n      focusable,\n      highlighted,\n      selected\n    };\n  }, [itemComparer, selectedValues, highlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState\n  }), [dispatch, getItemState]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\n\nexport { useList };","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/useList/useList.js"],"names":["React","unstable_useForkRef","useForkRef","ListActionTypes","listReducer","defaultReducer","useControllableReducer","areArraysEqual","useTextNavigation","extractEventHandlers","EMPTY_OBJECT","NOOP","defaultItemComparer","optionA","optionB","defaultIsItemDisabled","defaultItemStringifier","item","String","defaultGetInitialState","highlightedValue","selectedValues","useList","params","controlledProps","disabledItemsFocusable","disableListWrap","focusManagement","getInitialState","getItemDomElement","getItemId","isItemDisabled","rootRef","externalListRef","onStateChange","items","itemComparer","getItemAsString","onChange","onHighlightChange","onItemsChange","orientation","pageSize","reducerActionContext","selectionMode","stateReducer","externalReducer","componentName","process","env","NODE_ENV","Error","listRef","useRef","handleRef","handleHighlightChange","useCallback","event","value","reason","itemClick","keyDown","textNavigation","focus","stateComparers","useMemo","valuesArray1","valuesArray2","handleStateChange","field","state","listActionContext","initialState","reducer","actionContext","dispatch","handleTextNavigation","searchString","type","previousItems","useEffect","current","itemsChange","createHandleKeyDown","externalHandlers","onKeyDown","defaultMuiPrevented","keysToPreventDefault","push","includes","key","preventDefault","createHandleBlur","onBlur","contains","relatedTarget","blur","getRootProps","externalProps","externalEventHandlers","undefined","tabIndex","ref","getItemState","selected","some","highlighted","focusable","contextValue","useDebugValue"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport { listReducer as defaultReducer } from './listReducer';\nimport { useControllableReducer } from '../utils/useControllableReducer';\nimport { areArraysEqual } from '../utils/areArraysEqual';\nimport { useTextNavigation } from '../utils/useTextNavigation';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsItemDisabled = () => false;\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    onItemsChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer,\n    componentName = 'useList'\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange?.(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      getItemDomElement?.(value)?.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange?.(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange?.(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer ?? defaultReducer;\n  const actionContext = React.useMemo(() => ({\n    ...reducerActionContext,\n    ...listActionContext\n  }), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange,\n    componentName\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n    onItemsChange?.(items);\n  }, [items, itemComparer, dispatch, onItemsChange]);\n  const createHandleKeyDown = externalHandlers => event => {\n    externalHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = externalHandlers => event => {\n    externalHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (listRef.current?.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return {\n      ...externalProps,\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef,\n      ...externalEventHandlers,\n      onBlur: createHandleBlur(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers)\n    };\n  };\n  const getItemState = React.useCallback(item => {\n    const selected = (selectedValues ?? []).some(value => value != null && itemComparer(item, value));\n    const highlighted = highlightedValue != null && itemComparer(item, highlightedValue);\n    const focusable = focusManagement === 'DOM';\n    return {\n      focusable,\n      highlighted,\n      selected\n    };\n  }, [itemComparer, selectedValues, highlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState\n  }), [dispatch, getItemState]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\nexport { useList };"]},"metadata":{},"sourceType":"module"}