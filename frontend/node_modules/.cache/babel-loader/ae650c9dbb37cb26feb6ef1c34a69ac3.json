{"ast":null,"code":"'use client';\n\nimport useForkRef from '../useForkRef';\nimport appendOwnerState from '../appendOwnerState';\nimport mergeSlotProps from '../mergeSlotProps';\nimport resolveComponentProps from '../resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\n\nfunction useSlotProps(parameters) {\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    skipResolvingSlotProps = false,\n    ...other\n  } = parameters;\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps({ ...other,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);\n  const props = appendOwnerState(elementType, { ...mergedProps,\n    ref\n  }, ownerState);\n  return props;\n}\n\nexport default useSlotProps;","map":{"version":3,"sources":["F:/Web Projects/Web/Business Website/frontend/node_modules/@mui/base/node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js"],"names":["useForkRef","appendOwnerState","mergeSlotProps","resolveComponentProps","useSlotProps","parameters","elementType","externalSlotProps","ownerState","skipResolvingSlotProps","other","resolvedComponentsProps","props","mergedProps","internalRef","ref","additionalProps"],"mappings":"AAAA;;AAEA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAChC,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,sBAAsB,GAAG,KAJrB;AAKJ,OAAGC;AALC,MAMFL,UANJ;AAOA,QAAMM,uBAAuB,GAAGF,sBAAsB,GAAG,EAAH,GAAQN,qBAAqB,CAACI,iBAAD,EAAoBC,UAApB,CAAnF;AACA,QAAM;AACJI,IAAAA,KAAK,EAAEC,WADH;AAEJC,IAAAA;AAFI,MAGFZ,cAAc,CAAC,EACjB,GAAGQ,KADc;AAEjBH,IAAAA,iBAAiB,EAAEI;AAFF,GAAD,CAHlB;AAOA,QAAMI,GAAG,GAAGf,UAAU,CAACc,WAAD,EAAcH,uBAAuB,EAAEI,GAAvC,EAA4CV,UAAU,CAACW,eAAX,EAA4BD,GAAxE,CAAtB;AACA,QAAMH,KAAK,GAAGX,gBAAgB,CAACK,WAAD,EAAc,EAC1C,GAAGO,WADuC;AAE1CE,IAAAA;AAF0C,GAAd,EAG3BP,UAH2B,CAA9B;AAIA,SAAOI,KAAP;AACD;;AACD,eAAeR,YAAf","sourcesContent":["'use client';\n\nimport useForkRef from '../useForkRef';\nimport appendOwnerState from '../appendOwnerState';\nimport mergeSlotProps from '../mergeSlotProps';\nimport resolveComponentProps from '../resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nfunction useSlotProps(parameters) {\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    skipResolvingSlotProps = false,\n    ...other\n  } = parameters;\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps({\n    ...other,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);\n  const props = appendOwnerState(elementType, {\n    ...mergedProps,\n    ref\n  }, ownerState);\n  return props;\n}\nexport default useSlotProps;"]},"metadata":{},"sourceType":"module"}